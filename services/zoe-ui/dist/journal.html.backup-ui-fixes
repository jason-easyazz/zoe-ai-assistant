<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zoe - Journal</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #fafbfc 0%, #f1f3f6 100%);
            min-height: 100vh;
            color: #333;
            overflow-x: hidden;
        }

        /* Navigation Bar - EXACT COPY FROM CALENDAR.HTML */
        .nav-bar {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 70px;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(40px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.3);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 20px;
            z-index: 110;
        }

        .nav-left {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .mini-orb {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            cursor: pointer;
            position: relative;
            overflow: hidden;
            transition: transform 0.2s ease;
        }

        .mini-orb:hover {
            transform: scale(1.1);
        }

        .fluid-layer {
            position: absolute;
            inset: 0;
            border-radius: 50%;
            background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.3) 0%, transparent 70%);
            animation: breathe 2s ease-in-out infinite;
        }

        @keyframes breathe {
            0%, 100% { transform: scale(1) rotate(0deg); opacity: 0.8; }
            50% { transform: scale(1.1) rotate(5deg); opacity: 1; }
        }

        .nav-menu {
            display: flex;
            gap: 20px;
        }

        .nav-item {
            color: #666;
            text-decoration: none;
            font-size: 13px;
            font-weight: 400;
            transition: all 0.3s ease;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 8px;
        }

        .nav-item:hover {
            color: #7B61FF;
            background: rgba(123, 97, 255, 0.1);
        }

        .nav-item.active {
            color: #7B61FF;
            background: rgba(123, 97, 255, 0.1);
            font-weight: 500;
        }

        .more-nav-btn {
            padding: 8px 12px;
            border-radius: 8px;
            background: none;
            border: none;
            color: #666;
            font-size: 13px;
            font-weight: 400;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .more-nav-btn:hover {
            color: #7B61FF;
            background: rgba(123, 97, 255, 0.1);
        }

        .nav-right {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .api-indicator {
            font-size: 12px;
            padding: 4px 8px;
            border-radius: 8px;
            font-weight: 500;
        }

        .api-indicator.online {
            background: rgba(34, 197, 94, 0.1);
            color: #22c55e;
        }

        .api-indicator.offline {
            background: rgba(239, 68, 68, 0.1);
            color: #ef4444;
        }

        .api-indicator.connecting {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
        }

        .settings-btn {
            width: 36px;
            height: 36px;
            border: none;
            background: rgba(255, 255, 255, 0.6);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            color: #666;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .settings-btn:hover {
            background: rgba(255, 255, 255, 0.8);
            color: #333;
        }

        /* More Overlay - EXACT COPY FROM CALENDAR.HTML */
        .more-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(8px);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 3000;
            opacity: 0;
            transition: all 0.3s ease;
        }

        .more-overlay.active {
            display: flex;
            opacity: 1;
        }

        .more-content {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(60px);
            border: 1px solid rgba(255, 255, 255, 0.5);
            border-radius: 20px;
            padding: 40px;
            max-width: 500px;
            width: 90%;
            position: relative;
            transform: scale(0.8);
            transition: transform 0.3s ease;
        }

        .more-overlay.active .more-content {
            transform: scale(1);
        }

        .more-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .more-title {
            font-size: 24px;
            font-weight: 300;
            color: #333;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .more-close {
            position: absolute;
            top: 15px;
            right: 15px;
            background: rgba(255, 255, 255, 0.6);
            border: none;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            font-size: 18px;
            cursor: pointer;
            color: #666;
        }

        .more-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }

        .more-item {
            background: rgba(255, 255, 255, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.4);
            border-radius: 16px;
            padding: 24px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            min-height: 120px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .more-item:hover {
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            color: white;
            transform: translateY(-4px);
        }

        .more-item-icon {
            font-size: 36px;
            margin-bottom: 12px;
        }

        .more-item-label {
            font-size: 15px;
            font-weight: 500;
        }

        /* Main Container - Two Column Layout */
        .main-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            padding: 90px 20px 20px;
            height: 100vh;
            max-width: 100vw;
            box-sizing: border-box;
        }

        /* Left Column - Entry Form */
        .entry-form-section {
            display: flex;
            flex-direction: column;
            gap: 16px;
            height: calc(100vh - 110px);
        }

        .journal-form {
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.4);
            border-radius: 16px;
            padding: 16px 20px 20px 20px; /* Reduced top padding */
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.06);
        }

        /* Move Title Box to Very Top */
        .form-header {
            margin-bottom: 0px; /* No margin - title goes right to top */
        }

        .form-title {
            display: none; /* Remove "üìù New Journal Entry" */
        }

        .voice-btn {
            display: none; /* Remove voice button */
        }

        /* Condensed Title Input - "Title" as placeholder */
        .title-input {
            width: 100%;
            padding: 12px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.9);
            font-size: 16px;
            font-weight: 600;
            font-family: inherit;
            transition: all 0.3s ease;
        }

        .title-input:focus {
            outline: none;
            border-color: #7B61FF;
            background: rgba(255, 255, 255, 1);
            box-shadow: 0 4px 16px rgba(123, 97, 255, 0.1);
        }

        .title-input::placeholder {
            color: #999;
            font-weight: 400;
        }

        /* Condensed Content Textarea */
        .content-textarea {
            width: 100%;
            flex: 1;
            padding: 12px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.9);
            font-size: 14px;
            font-family: inherit;
            resize: none;
            transition: all 0.3s ease;
            min-height: 120px;
        }

        .content-textarea:focus {
            outline: none;
            border-color: #7B61FF;
            background: rgba(255, 255, 255, 1);
            box-shadow: 0 4px 16px rgba(123, 97, 255, 0.1);
        }

        .content-textarea::placeholder {
            color: #999;
            font-style: italic;
        }

        /* Condensed Photo Upload Section */
        .photo-section {
            position: relative;
        }

        .photo-upload {
            position: relative;
            border: 2px dashed rgba(123, 97, 255, 0.3);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.5);
            height: 80px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .photo-upload:hover {
            border-color: #7B61FF;
            background: rgba(255, 255, 255, 0.8);
        }

        .photo-upload.has-image {
            padding: 0;
            border: none;
            height: auto;
            min-height: 100px;
            max-height: 180px;
        }

        .photo-preview {
            width: 100%;
            height: auto;
            min-height: 100px;
            max-height: 180px;
            object-fit: cover;
            border-radius: 10px;
        }

        .upload-placeholder {
            color: #666;
            font-size: 12px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 6px;
        }

        .upload-icon {
            font-size: 20px;
            opacity: 0.5;
        }

        #photoInput {
            display: none;
        }

        /* Ultra-Condensed Mood Analysis - 3 Column Layout */
        .mood-analysis {
            background: rgba(255, 255, 255, 0.6);
            border-radius: 10px;
            padding: 10px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .mood-analysis-title {
            font-size: 12px;
            font-weight: 600;
            color: #333;
            white-space: nowrap;
        }

        .mood-prompt {
            font-size: 11px;
            color: #666;
            flex: 1;
        }

        .detected-mood {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 6px 10px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 6px;
            border: 1px solid rgba(255, 255, 255, 0.4);
            white-space: nowrap;
        }

        .mood-emoji {
            font-size: 16px;
        }

        .mood-text {
            font-size: 12px;
            font-weight: 500;
            color: #333;
        }

        .mood-confidence {
            font-size: 10px;
            color: #666;
        }

        /* Condensed Health Check Section */
        .health-check {
            background: rgba(255, 255, 255, 0.6);
            border-radius: 10px;
            padding: 12px;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .health-check-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 8px;
        }

        .health-checkbox {
            width: 18px;
            height: 18px;
            border: 2px solid rgba(123, 97, 255, 0.3);
            border-radius: 4px;
            cursor: pointer;
            position: relative;
            transition: all 0.3s ease;
        }

        .health-checkbox.checked {
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            border-color: transparent;
        }

        .health-checkbox.checked::after {
            content: '‚úì';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 10px;
            font-weight: bold;
        }

        .health-label {
            font-size: 12px;
            font-weight: 500;
            color: #333;
            cursor: pointer;
        }

        .symptoms-input {
            width: 100%;
            padding: 10px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.8);
            font-size: 12px;
            font-family: inherit;
            transition: all 0.3s ease;
            display: none;
            min-height: 40px;
        }

        .symptoms-input.visible {
            display: block;
        }

        .symptoms-input:focus {
            outline: none;
            border-color: #7B61FF;
            background: rgba(255, 255, 255, 1);
        }

        .symptoms-input::placeholder {
            color: #999;
            font-style: italic;
        }

        /* Condensed Form Actions */
        .form-actions {
            display: flex;
            gap: 10px;
        }

        .form-btn {
            flex: 1;
            padding: 12px 16px;
            border: none;
            border-radius: 10px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .form-btn.primary {
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            color: white;
        }

        .form-btn.primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(123, 97, 255, 0.3);
        }

        .form-btn.secondary {
            background: rgba(255, 255, 255, 0.8);
            color: #666;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .form-btn.secondary:hover {
            background: rgba(255, 255, 255, 0.95);
            color: #333;
        }

        /* Right Column - Entries List */
        .entries-section {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 110px);
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
        }

        .section-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
        }

        .filter-tabs {
            display: flex;
            gap: 6px;
        }

        .filter-tab {
            padding: 8px 16px;
            background: rgba(255, 255, 255, 0.6);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            font-size: 12px;
            color: #666;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .filter-tab.active {
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            color: white;
            border-color: transparent;
        }

        .filter-tab:hover:not(.active) {
            background: rgba(255, 255, 255, 0.8);
            color: #333;
        }

        .entries-container {
            flex: 1;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 12px;
            padding-right: 8px;
        }

        .entries-container::-webkit-scrollbar {
            width: 6px;
        }

        .entries-container::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 3px;
        }

        .entries-container::-webkit-scrollbar-thumb {
            background: rgba(123, 97, 255, 0.3);
            border-radius: 3px;
        }

        .entries-container::-webkit-scrollbar-thumb:hover {
            background: rgba(123, 97, 255, 0.5);
        }

        /* Entry Card - Clickable to Edit */
        .entry-card {
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.4);
            border-radius: 12px;
            padding: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .entry-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
            border-color: rgba(123, 97, 255, 0.3);
            background: rgba(255, 255, 255, 0.95);
        }

        .entry-card.selected {
            border-color: #7B61FF;
            background: rgba(123, 97, 255, 0.05);
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(123, 97, 255, 0.2);
        }

        .entry-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }

        .entry-title {
            font-size: 16px;
            font-weight: 600;
            color: #333;
            margin-bottom: 4px;
        }

        .entry-meta {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .entry-date {
            font-size: 12px;
            color: #666;
            font-weight: 500;
        }

        .entry-mood {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 4px 8px;
            border-radius: 8px;
            font-size: 11px;
            font-weight: 500;
        }

        .mood-amazing { background: rgba(34, 197, 94, 0.2); color: #059669; }
        .mood-good { background: rgba(59, 130, 246, 0.2); color: #2563eb; }
        .mood-okay { background: rgba(156, 163, 175, 0.2); color: #6b7280; }
        .mood-stressed { background: rgba(245, 158, 11, 0.2); color: #d97706; }
        .mood-sad { background: rgba(239, 68, 68, 0.2); color: #dc2626; }

        .entry-health {
            background: rgba(239, 68, 68, 0.1);
            color: #dc2626;
            padding: 3px 8px;
            border-radius: 6px;
            font-size: 10px;
            font-weight: 600;
        }

        .entry-content {
            color: #333;
            line-height: 1.5;
            font-size: 14px;
            margin-bottom: 12px;
        }

        .entry-preview {
            display: block;
        }

        .entry-full {
            display: none;
        }

        .entry-card.expanded .entry-preview {
            display: none;
        }

        .entry-card.expanded .entry-full {
            display: block;
        }

        .entry-photo {
            width: 100%;
            max-height: 300px;
            object-fit: cover;
            border-radius: 8px;
            margin-top: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .entry-photo:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
        }

        .entry-actions {
            display: flex;
            gap: 8px;
            opacity: 0;
            transition: opacity 0.3s ease;
            position: absolute;
            top: 16px;
            right: 16px;
        }

        .entry-card:hover .entry-actions {
            opacity: 1;
        }

        .entry-action {
            padding: 6px 12px;
            background: rgba(255, 255, 255, 0.9);
            border: none;
            border-radius: 6px;
            font-size: 11px;
            color: #666;
            cursor: pointer;
            transition: all 0.2s ease;
            backdrop-filter: blur(10px);
        }

        .entry-action:hover {
            background: #7B61FF;
            color: white;
        }

        .entry-action.delete:hover {
            background: #EF4444;
        }

        /* Photo Modal for full-size viewing */
        .photo-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(10px);
            z-index: 2000;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            pointer-events: none;
            transition: all 0.3s ease;
        }

        .photo-modal.visible {
            opacity: 1;
            pointer-events: all;
        }

        .photo-modal-content {
            max-width: 90vw;
            max-height: 90vh;
            position: relative;
        }

        .photo-modal img {
            width: 100%;
            height: 100%;
            object-fit: contain;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
        }

        .photo-modal-close {
            position: absolute;
            top: -50px;
            right: 0;
            background: rgba(255, 255, 255, 0.9);
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            font-size: 20px;
            cursor: pointer;
            color: #333;
            transition: all 0.3s ease;
        }

        .photo-modal-close:hover {
            background: white;
            transform: scale(1.1);
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .empty-state-icon {
            font-size: 64px;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .empty-state-text {
            font-size: 16px;
            margin-bottom: 8px;
        }

        .empty-state-subtext {
            font-size: 14px;
            opacity: 0.7;
        }

        /* Overlay when editing existing entry */
        .editing-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(4px);
            z-index: 999;
            opacity: 0;
            pointer-events: none;
            transition: all 0.3s ease;
        }

        .editing-overlay.visible {
            opacity: 1;
            pointer-events: all;
        }

        .editing-mode .journal-form {
            border: 2px solid #7B61FF;
            box-shadow: 0 12px 48px rgba(123, 97, 255, 0.3);
            transform: scale(1.02);
        }

        /* Floating Add Button - "+" Symbol for New Entry */
        .floating-add-btn {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 64px;
            height: 64px;
            border-radius: 50%;
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            border: none;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 32px;
            font-weight: 300;
            transition: all 0.3s ease;
            z-index: 1000;
            box-shadow: 0 4px 12px rgba(123, 97, 255, 0.3);
        }

        .floating-add-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 16px rgba(123, 97, 255, 0.4);
        }

            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(135deg, #059669 0%, #10B981 100%);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            z-index: 1001;
            box-shadow: 0 4px 16px rgba(5, 150, 105, 0.3);
            animation: demo-bounce 3s ease-in-out infinite;
        }

        @keyframes demo-bounce {
            0%, 100% { transform: translateX(-50%) translateY(0px); }
            50% { transform: translateX(-50%) translateY(-4px); }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .main-container {
                grid-template-columns: 1fr;
                gap: 16px;
                padding: 90px 16px 16px;
                height: auto;
            }

            .nav-menu {
                display: none;
            }

            .entries-section {
                height: auto;
                max-height: 60vh;
            }

            .form-btn {
                padding: 14px 18px;
                font-size: 14px;
            }
        }

        /* Animations */
        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes slideOutRight {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation Bar - EXACT COPY FROM CALENDAR.HTML -->
    <div class="nav-bar">
        <div class="nav-left">
            <div class="mini-orb" onclick="window.location.href='index.html'">
                <div class="fluid-layer"></div>
            </div>
            <div class="nav-menu">
                <a href="index.html" class="nav-item">Dashboard</a>
                <a href="tasks.html" class="nav-item">Tasks</a>
                <a href="calendar.html" class="nav-item">Calendar</a>
                <a href="journal.html" class="nav-item active">Journal</a>
                <button class="more-nav-btn" onclick="openMoreOverlay()">More</button>
            </div>
        </div>
        <div class="nav-right">
            <div class="api-indicator connecting" id="apiStatus">üîÑ Connecting</div>
            <button class="settings-btn" onclick="window.location.href='settings.html'" title="Settings">‚öôÔ∏è</button>
        </div>
    </div>

    <!-- More Overlay - EXACT COPY FROM CALENDAR.HTML -->
    <div class="more-overlay" id="moreOverlay">
        <div class="more-content">
            <button class="more-close" onclick="closeMoreOverlay()">√ó</button>
            <div class="more-header">
                <h2 class="more-title">More Options</h2>
            </div>
            <div class="more-grid">
                <div class="more-item" onclick="navigateToPage('shopping.html')">
                    <div class="more-item-icon">üõí</div>
                    <div class="more-item-label">Shopping</div>
                </div>
                <div class="more-item" onclick="navigateToPage('workflows.html')">
                    <div class="more-item-icon">‚ö°</div>
                    <div class="more-item-label">Workflows</div>
                </div>
                <div class="more-item" onclick="navigateToPage('memories.html')">
                    <div class="more-item-icon">üß†</div>
                    <div class="more-item-label">Memories</div>
                </div>
                <div class="more-item" onclick="alert('Coming soon!')">
                    <div class="more-item-icon">üìä</div>
                    <div class="more-item-label">Analytics</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Photo Modal for Full Size Viewing -->
    <div class="photo-modal" id="photoModal" onclick="closePhotoModal()">
        <div class="photo-modal-content" onclick="event.stopPropagation()">
            <button class="photo-modal-close" onclick="closePhotoModal()">‚úï</button>
            <img id="photoModalImg" src="" alt="Full size photo">
        </div>
    </div>


    <!-- Editing Overlay -->
    <div class="editing-overlay" id="editingOverlay" onclick="cancelEdit()"></div>

    <!-- Main Container -->
    <div class="main-container">
        <!-- Left Column - Entry Form -->
        <div class="entry-form-section">
            <div class="journal-form" id="journalForm">
                <div class="form-header">
                    <div class="form-title" id="formTitle">üìù New Journal Entry</div>
                    <button class="voice-btn" id="voiceBtn" onclick="toggleVoiceInput()" title="Voice Input">üé§</button>
                </div>

                <!-- Title Input -->
                <input 
                    type="text" 
                    id="entryTitle" 
                    class="title-input" 
                    placeholder="Title"
                    oninput="analyzeMood()"
                />

                <!-- Content -->
                <textarea 
                    id="entryContent" 
                    class="content-textarea" 
                    placeholder="Tell me about your day, thoughts, or anything you'd like to remember..."
                    oninput="analyzeMood()"
                ></textarea>

                <!-- Photo -->
                <div class="photo-section">
                    <div class="photo-upload" onclick="document.getElementById('photoInput').click()">
                        <div class="upload-placeholder">
                            <div class="upload-icon">üì∑</div>
                            <div>Add a photo to your entry</div>
                        </div>
                        <img id="photoPreview" class="photo-preview" style="display: none;" />
                    </div>
                    <input type="file" id="photoInput" accept="image/*" onchange="handlePhotoUpload(event)">
                </div>

                <!-- Ultra-Condensed Mood Analysis -->
                <div class="mood-analysis">
                    <div class="mood-analysis-title">üß† Mood Analysis</div>
                    <div class="mood-prompt">Start writing to analyze...</div>
                    <div class="detected-mood" id="detectedMood">
                        <div class="mood-emoji">üòê</div>
                        <div class="mood-text">Neutral</div>
                        <div class="mood-confidence"></div>
                    </div>
                </div>

                <!-- Health Check Section -->
                <div class="health-check">
                    <div class="health-check-header">
                        <div class="health-checkbox" id="healthCheckbox" onclick="toggleHealthCheck()"></div>
                        <div class="health-label" onclick="toggleHealthCheck()">Are you feeling unwell today?</div>
                    </div>
                    <textarea 
                        id="symptomsInput" 
                        class="symptoms-input"
                        placeholder="Describe your symptoms (headache, fatigue, fever, etc.)"
                    ></textarea>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button class="form-btn secondary" onclick="clearForm()" id="clearBtn">Clear</button>
                    <button class="form-btn primary" onclick="saveEntry()" id="saveBtn">Save Entry</button>
                </div>
            </div>
        </div>

        <!-- Right Column - Entries List -->
        <div class="entries-section">
            <div class="section-header">
                <div class="section-title">üìñ Your Entries</div>
                <div class="filter-tabs">
                    <button class="filter-tab active" onclick="filterEntries('all')">All</button>
                    <button class="filter-tab" onclick="filterEntries('today')">Today</button>
                    <button class="filter-tab" onclick="filterEntries('week')">Week</button>
                    <button class="filter-tab" onclick="filterEntries('month')">Month</button>
                </div>
            </div>

            <div class="entries-container" id="entriesContainer">
                <!-- Entries will be populated here -->
                <div class="empty-state">
                    <div class="empty-state-icon">üìù</div>
                    <div class="empty-state-text">No journal entries yet</div>
                    <div class="empty-state-subtext">Start writing to capture your thoughts and feelings</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Floating Add Button - "+" Symbol to Chat with Zoe -->
    <button class="floating-add-btn" onclick="window.location.href='index.html'" title="Chat with Zoe">+</button>

    <script>
        // Global variables
        let entries = [];
        let currentFilter = 'all';
        let isRecording = false;
        let uploadedPhoto = null;
        let isEditMode = false;
        let editingEntryId = null;
        let isHealthCheckEnabled = false;

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            // loadDemoData(); // DISABLED - using real API only
            loadEntries();
            loadEntriesFromBackend();
            
            // Initialize mood analysis
            analyzeMood();
            
            // Update API status
            updateApiStatus();
            setInterval(updateApiStatus, 30000);
            
            // Hide demo indicator after 5 seconds
            setTimeout(() => {
                const indicator = document.getElementById('demoIndicator');
                if (indicator) {
                    indicator.style.animation = 'slideOutRight 0.5s ease forwards';
                    setTimeout(() => indicator.remove(), 500);
                }
            }, 5000);
        });

        // Navigation functions - EXACT COPY FROM CALENDAR.HTML
        function openMoreOverlay() {
            document.getElementById('moreOverlay').classList.add('active');
        }

        function closeMoreOverlay() {
            document.getElementById('moreOverlay').classList.remove('active');
        }

        function navigateToPage(page) {
            window.location.href = page;
        }

        // Update API status
        function updateApiStatus() {
            const indicator = document.getElementById('apiStatus');
            
            fetch('/api/health')
                .then(response => {
                    if (response.ok) {
                        indicator.textContent = '‚úÖ Connected';
                        indicator.className = 'api-indicator online';
                    } else {
                        indicator.textContent = 'üü° Issues';
                        indicator.className = 'api-indicator connecting';
                    }
                })
                .catch(() => {
                    indicator.textContent = '‚ùå Offline';
                    indicator.className = 'api-indicator offline';
                });
        }

        // Load realistic demo data
        function loadDemoData() {
            const demoEntries = [
                {
                    id: 1001,
                    title: "Incredible Orca Encounter! üêã",
                    content: "Had the most amazing experience today on the whale watching tour! We spotted this magnificent orca swimming so close to our boat. The way it moved through the water was absolutely mesmerizing - so powerful yet graceful. These creatures are just incredible. The whole pod was hunting and playing together. Feeling so grateful to witness such raw beauty in nature. Definitely a day I'll never forget!",
                    mood: "amazing",
                    mood_score: 0.9,
                    mood_confidence: 95,
                    photo: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='300' viewBox='0 0 400 300'%3E%3Cdefs%3E%3ClinearGradient id='ocean' x1='0%25' y1='0%25' x2='0%25' y2='100%25'%3E%3Cstop offset='0%25' style='stop-color:%234A90E2'/%3E%3Cstop offset='100%25' style='stop-color:%230F3B57'/%3E%3C/linearGradient%3E%3C/defs%3E%3Crect width='400' height='300' fill='url(%23ocean)'/%3E%3Cellipse cx='200' cy='180' rx='80' ry='25' fill='%23000' opacity='0.8'/%3E%3Cellipse cx='200' cy='175' rx='75' ry='22' fill='%23333'/%3E%3Cellipse cx='210' cy='170' rx='15' ry='8' fill='%23FFF'/%3E%3Cpath d='M120 180 Q200 160 280 180 Q200 200 120 180' fill='%23FFF' opacity='0.3'/%3E%3Ctext x='200' y='40' text-anchor='middle' fill='%23FFF' font-family='Arial' font-size='18' font-weight='bold'%3Eüêã Majestic Orca Encounter%3C/text%3E%3C/svg%3E",
                    health_info: null,
                    createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000) // 3 hours ago
                },
                {
                    id: 1002,
                    title: "Epic Coastal Hike Adventure! ü•æ",
                    content: "What an absolutely incredible day hiking along the coast! The views were just breathtaking - turquoise water, dramatic cliffs, and pristine beaches as far as the eye can see. That wooden boardwalk section was perfect for taking in the scenery. My legs are definitely feeling it after all those hills, but it was so worth it. Nothing beats being out in nature and feeling that ocean breeze. Already planning my next coastal adventure!",
                    mood: "amazing",
                    mood_score: 0.85,
                    mood_confidence: 92,
                    photo: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='350' height='400' viewBox='0 0 350 400'%3E%3Cdefs%3E%3ClinearGradient id='sky2' x1='0%25' y1='0%25' x2='0%25' y2='100%25'%3E%3Cstop offset='0%25' style='stop-color:%2387CEEB'/%3E%3Cstop offset='50%25' style='stop-color:%23E0F6FF'/%3E%3Cstop offset='100%25' style='stop-color:%2300CED1'/%3E%3C/linearGradient%3E%3C/defs%3E%3Crect width='350' height='200' fill='url(%23sky2)'/%3E%3Cpath d='M0 150 Q100 120 200 140 Q250 150 350 130 L350 200 L0 200 Z' fill='%2332CD32'/%3E%3Cpath d='M50 200 Q80 180 110 200 Q140 180 170 200 Q200 180 230 200 Q260 180 290 200' stroke='%238B4513' stroke-width='2' fill='none'/%3E%3Crect x='160' y='250' width='30' height='150' fill='%238B4513'/%3E%3Cpath d='M0 400 L350 400 L350 300 Q300 290 250 295 Q200 300 150 295 Q100 290 50 295 Q25 297 0 300 Z' fill='%2300CED1' opacity='0.7'/%3E%3Ctext x='175' y='30' text-anchor='middle' fill='%23FFF' font-family='Arial' font-size='14' font-weight='bold'%3Eü•æ Coastal Hiking Trail%3C/text%3E%3C/svg%3E",
                    health_info: null,
                    createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // 2 days ago
                },
                {
                    id: 1003,
                    title: "Cozy Night In with the Dogs üêï",
                    content: "Perfect evening relaxing at home with my two beautiful greyhounds. They've claimed the entire couch as usual! There's something so peaceful about just watching them sleep so contentedly. These two have such different personalities but they're inseparable. Feeling grateful for their companionship and these quiet moments. Sometimes the best nights are the simple ones at home.",
                    mood: "good",
                    mood_score: 0.7,
                    mood_confidence: 85,
                    photo: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='450' height='280' viewBox='0 0 450 280'%3E%3Crect width='450' height='280' fill='%23F5F5DC'/%3E%3Crect x='50' y='150' width='350' height='100' rx='20' fill='%23654321'/%3E%3Crect x='60' y='160' width='330' height='80' rx='15' fill='%23D2B48C'/%3E%3Cellipse cx='150' cy='200' rx='40' ry='25' fill='%23708090'/%3E%3Cellipse cx='140' cy='195' rx='35' ry='20' fill='%23A9A9A9'/%3E%3Ccircle cx='135' cy='190' r='3' fill='%23000'/%3E%3Cellipse cx='300' cy='200' rx='40' ry='25' fill='%23D2691E'/%3E%3Cellipse cx='290' cy='195' rx='35' ry='20' fill='%23F4A460'/%3E%3Ccircle cx='285' cy='190' r='3' fill='%23000'/%3E%3Crect x='0' y='250' width='450' height='30' fill='%23DEB887'/%3E%3Ctext x='225' y='40' text-anchor='middle' fill='%23654321' font-family='Arial' font-size='16' font-weight='bold'%3Eüêï Greyhound Cuddle Time%3C/text%3E%3C/svg%3E",
                    health_info: null,
                    createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000) // 3 days ago
                },
                {
                    id: 1004,
                    title: "Feeling Under the Weather",
                    content: "Not feeling my best today. Woke up with a slight headache and feeling a bit under the weather. Decided to take it easy and rest at home. Drinking lots of water and taking care of myself. Hopefully, I'll feel better tomorrow.",
                    mood: "okay",
                    mood_score: -0.1,
                    mood_confidence: 72,
                    photo: null,
                    health_info: {
                        feeling_unwell: true,
                        symptoms: "Headache, mild fatigue, feeling sluggish"
                    },
                    createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000) // 5 days ago
                }
            ];
            
            // Only load demo data if no entries exist
            if (false) { // DISABLED demo data
                entries = demoEntries;
                renderEntries();
            }
        }

        // Advanced Mood Analysis using multiple algorithms
        function analyzeMood() {
            const title = document.getElementById('entryTitle').value;
            const content = document.getElementById('entryContent').value;
            const text = (title + ' ' + content).toLowerCase().trim();
            
            if (text.length < 3) {
                updateMoodDisplay('okay', 'Neutral', '');
                return;
            }
            
            // Comprehensive mood analysis
            const moodData = analyzeTextMood(text);
            updateMoodDisplay(moodData.mood, moodData.label, `${moodData.confidence}%`);
        }

        // Advanced text mood analysis
        function analyzeTextMood(text) {
            const words = text.split(/\s+/);
            let score = 0;
            let wordCount = 0;
            
            // Comprehensive mood lexicon
            const moodLexicon = {
                // Very Positive (amazing)
                'amazing': 2, 'fantastic': 2, 'incredible': 2, 'wonderful': 2, 'excellent': 2,
                'perfect': 2, 'brilliant': 2, 'outstanding': 2, 'marvelous': 2, 'spectacular': 2,
                'thrilled': 2, 'ecstatic': 2, 'elated': 2, 'overjoyed': 2, 'euphoric': 2,
                'love': 1.5, 'adore': 1.5, 'blessed': 1.5, 'grateful': 1.5, 'thankful': 1.5,
                
                // Positive (good)
                'good': 1, 'great': 1, 'nice': 1, 'happy': 1, 'pleased': 1, 'glad': 1,
                'excited': 1, 'cheerful': 1, 'optimistic': 1, 'content': 1, 'satisfied': 1,
                'proud': 1, 'accomplished': 1, 'successful': 1, 'productive': 1, 'motivated': 1,
                'fun': 0.8, 'enjoyable': 0.8, 'pleasant': 0.8, 'comfortable': 0.8, 'relaxed': 0.8,
                
                // Neutral-Positive
                'okay': 0.2, 'fine': 0.2, 'alright': 0.2, 'decent': 0.2, 'normal': 0.1,
                
                // Neutral-Negative
                'tired': -0.3, 'busy': -0.2, 'bored': -0.4, 'confused': -0.3, 'uncertain': -0.2,
                
                // Negative (stressed)
                'stressed': -1, 'anxious': -1, 'worried': -1, 'nervous': -1, 'overwhelmed': -1.2,
                'frustrated': -1, 'annoyed': -0.8, 'irritated': -0.8, 'angry': -1.2, 'upset': -1,
                'difficult': -0.6, 'challenging': -0.4, 'tough': -0.6, 'hard': -0.5, 'struggle': -0.8,
                'pressure': -0.7, 'deadline': -0.5, 'problem': -0.6, 'issue': -0.5, 'concern': -0.4,
                
                // Very Negative (sad)
                'sad': -1.5, 'depressed': -2, 'heartbroken': -2, 'devastated': -2, 'terrible': -1.8,
                'awful': -1.7, 'horrible': -1.7, 'miserable': -1.8, 'hopeless': -2, 'lonely': -1.3,
                'disappointed': -1.2, 'regret': -1.1, 'sorry': -0.8, 'hurt': -1.2, 'pain': -1.3,
                'cry': -1.4, 'tears': -1.2, 'empty': -1.3, 'lost': -1.1, 'broken': -1.4,
                
                // Health-related keywords
                'sick': -1, 'ill': -1, 'unwell': -0.8, 'pain': -1.2, 'hurt': -1, 'ache': -0.8,
                'headache': -0.7, 'tired': -0.5, 'exhausted': -1, 'fever': -0.9, 'nausea': -0.8,
                'doctor': -0.3, 'hospital': -0.5, 'medicine': -0.2, 'treatment': -0.3
            };
            
            // Analyze each word
            words.forEach(word => {
                const cleanWord = word.replace(/[^\w]/g, '').toLowerCase();
                if (moodLexicon.hasOwnProperty(cleanWord)) {
                    score += moodLexicon[cleanWord];
                    wordCount++;
                }
            });
            
            // Calculate average and normalize
            const avgScore = wordCount > 0 ? score / wordCount : 0;
            const normalizedScore = Math.max(-1, Math.min(1, avgScore));
            
            // Determine mood category
            let mood, label, confidence;
            
            if (normalizedScore >= 0.6) {
                mood = 'amazing';
                label = 'Amazing';
                confidence = Math.round(85 + (normalizedScore - 0.6) * 37.5);
            } else if (normalizedScore >= 0.2) {
                mood = 'good';
                label = 'Good';
                confidence = Math.round(70 + (normalizedScore - 0.2) * 37.5);
            } else if (normalizedScore >= -0.2) {
                mood = 'okay';
                label = 'Neutral';
                confidence = Math.round(60 + Math.abs(normalizedScore) * 25);
            } else if (normalizedScore >= -0.6) {
                mood = 'stressed';
                label = 'Stressed';
                confidence = Math.round(70 + (Math.abs(normalizedScore) - 0.2) * 37.5);
            } else {
                mood = 'sad';
                label = 'Sad';
                confidence = Math.round(85 + (Math.abs(normalizedScore) - 0.6) * 37.5);
            }
            
            // Boost confidence based on word count
            const wordCountBoost = Math.min(15, words.length * 2);
            confidence = Math.min(95, confidence + wordCountBoost);
            
            return { mood, label, confidence, score: normalizedScore };
        }

        // Update mood display
        function updateMoodDisplay(mood, label, confidence) {
            const moodDisplay = document.getElementById('detectedMood');
            const emojis = {
                'amazing': 'üòÑ',
                'good': 'üòä',
                'okay': 'üòê',
                'stressed': 'üò∞',
                'sad': 'üò¢'
            };
            
            moodDisplay.innerHTML = `
                <div class="mood-emoji">${emojis[mood] || 'üòê'}</div>
                <div class="mood-text">${label}</div>
                <div class="mood-confidence">${confidence}</div>
            `;
            
            // Show/hide the "Start writing to analyze..." prompt
            const promptElement = document.querySelector('.mood-prompt');
            if (confidence === '') {
                promptElement.style.display = 'block';
            } else {
                promptElement.style.display = 'none';
            }
        }

        // Toggle health check
        function toggleHealthCheck() {
            isHealthCheckEnabled = !isHealthCheckEnabled;
            const checkbox = document.getElementById('healthCheckbox');
            const symptomsInput = document.getElementById('symptomsInput');
            
            if (isHealthCheckEnabled) {
                checkbox.classList.add('checked');
                symptomsInput.classList.add('visible');
                symptomsInput.focus();
            } else {
                checkbox.classList.remove('checked');
                symptomsInput.classList.remove('visible');
                symptomsInput.value = '';
            }
        }

        // Handle photo upload with dynamic sizing
        function handlePhotoUpload(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    uploadedPhoto = e.target.result;
                    const preview = document.getElementById('photoPreview');
                    const upload = document.querySelector('.photo-upload');
                    
                    preview.src = uploadedPhoto;
                    preview.style.display = 'block';
                    upload.classList.add('has-image');
                    upload.querySelector('.upload-placeholder').style.display = 'none';
                    
                    // Adjust upload container height based on image aspect ratio
                    preview.onload = function() {
                        const aspectRatio = this.naturalHeight / this.naturalWidth;
                        const maxHeight = 250;
                        const minHeight = 120;
                        const calculatedHeight = Math.min(maxHeight, Math.max(minHeight, 200 * aspectRatio));
                        upload.style.height = calculatedHeight + 'px';
                    };
                };
                reader.readAsDataURL(file);
            }
        }

        // Toggle voice input
        function toggleVoiceInput() {
            if (!isRecording) {
                startVoiceRecording();
            } else {
                stopVoiceRecording();
            }
        }

        // Start voice recording
        function startVoiceRecording() {
            if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
                alert('Speech recognition not supported in this browser');
                return;
            }

            const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            const voiceBtn = document.getElementById('voiceBtn');
            
            recognition.continuous = true;
            recognition.interimResults = true;
            recognition.lang = 'en-US';

            recognition.onstart = function() {
                isRecording = true;
                voiceBtn.classList.add('recording');
                voiceBtn.innerHTML = 'üî¥';
            };

            recognition.onresult = function(event) {
                let finalTranscript = '';
                for (let i = event.resultIndex; i < event.results.length; i++) {
                    if (event.results[i].isFinal) {
                        finalTranscript += event.results[i][0].transcript;
                    }
                }
                
                if (finalTranscript) {
                    const contentArea = document.getElementById('entryContent');
                    contentArea.value += (contentArea.value ? ' ' : '') + finalTranscript;
                    analyzeMood();
                }
            };

            recognition.onerror = function(event) {
                console.error('Speech recognition error:', event.error);
                stopVoiceRecording();
            };

            recognition.onend = function() {
                stopVoiceRecording();
            };

            recognition.start();
            window.currentRecognition = recognition;
        }

        // Stop voice recording
        function stopVoiceRecording() {
            const voiceBtn = document.getElementById('voiceBtn');
            
            isRecording = false;
            voiceBtn.classList.remove('recording');
            voiceBtn.innerHTML = 'üé§';
            
            if (window.currentRecognition) {
                window.currentRecognition.stop();
                window.currentRecognition = null;
            }
        }

        // Clear form
        function clearForm() {
            document.getElementById('entryTitle').value = '';
            document.getElementById('entryContent').value = '';
            
            // Clear photo
            uploadedPhoto = null;
            const preview = document.getElementById('photoPreview');
            const upload = document.querySelector('.photo-upload');
            preview.style.display = 'none';
            upload.classList.remove('has-image');
            upload.querySelector('.upload-placeholder').style.display = 'block';
            document.getElementById('photoInput').value = '';
            
            // Clear health check
            isHealthCheckEnabled = false;
            document.getElementById('healthCheckbox').classList.remove('checked');
            document.getElementById('symptomsInput').classList.remove('visible');
            document.getElementById('symptomsInput').value = '';
            
            // Reset mood analysis
            analyzeMood();
        }

        // Save entry
        function saveEntry() {
            const title = document.getElementById('entryTitle').value.trim();
            const content = document.getElementById('entryContent').value.trim();
            
            if (!title && !content) {
                alert('Please add a title or write some content!');
                return;
            }
            
            // Get current mood analysis
            const moodData = analyzeTextMood((title + ' ' + content).toLowerCase());
            
            // Get health info
            const healthInfo = isHealthCheckEnabled ? {
                feeling_unwell: true,
                symptoms: document.getElementById('symptomsInput').value.trim()
            } : null;

            if (isEditMode) {
                // Update existing entry
                updateEntry(editingEntryId, title, content, moodData, healthInfo);
            } else {
                // Create new entry
                const newEntry = {
                    id: Date.now(),
                    title: title || `Entry ${new Date().toLocaleDateString()}`,
                    content: content,
                    mood: moodData.mood,
                    mood_score: moodData.score,
                    mood_confidence: moodData.confidence,
                    photo: uploadedPhoto,
                    health_info: healthInfo,
                    createdAt: new Date()
                };

                entries.unshift(newEntry);
                saveEntryToBackend(newEntry);
            }
            
            renderEntries();
            clearForm();
            exitEditMode();
            showNotification(isEditMode ? 'Entry updated! ‚úèÔ∏è' : 'Entry saved! üìù');
        }

        // Update existing entry
        function updateEntry(entryId, title, content, moodData, healthInfo) {
            const entryIndex = entries.findIndex(e => e.id === entryId);
            if (entryIndex !== -1) {
                entries[entryIndex] = {
                    ...entries[entryIndex],
                    title: title,
                    content: content,
                    mood: moodData.mood,
                    mood_score: moodData.score,
                    mood_confidence: moodData.confidence,
                    photo: uploadedPhoto,
                    health_info: healthInfo,
                    updatedAt: new Date()
                };
                
                // Update backend
                updateEntryInBackend(entryId, title, content, moodData.mood, healthInfo);
            }
        }

        // Edit existing entry (click on entry card)
        function editEntry(entryId) {
            const entry = entries.find(e => e.id === entryId);
            if (!entry) return;

            // Enter edit mode
            isEditMode = true;
            editingEntryId = entryId;
            
            // Populate form
            document.getElementById('entryTitle').value = entry.title || '';
            document.getElementById('entryContent').value = entry.content || '';
            
            // Set photo if exists
            if (entry.photo) {
                uploadedPhoto = entry.photo;
                const preview = document.getElementById('photoPreview');
                const upload = document.querySelector('.photo-upload');
                preview.src = uploadedPhoto;
                preview.style.display = 'block';
                upload.classList.add('has-image');
                upload.querySelector('.upload-placeholder').style.display = 'none';
            }
            
            // Set health info if exists
            if (entry.health_info && entry.health_info.feeling_unwell) {
                isHealthCheckEnabled = true;
                document.getElementById('healthCheckbox').classList.add('checked');
                document.getElementById('symptomsInput').classList.add('visible');
                document.getElementById('symptomsInput').value = entry.health_info.symptoms || '';
            }
            
            // Update UI
            document.getElementById('formTitle').textContent = '‚úèÔ∏è Edit Entry';
            document.getElementById('saveBtn').textContent = 'Update Entry';
            document.getElementById('clearBtn').textContent = 'Cancel';
            document.getElementById('clearBtn').onclick = cancelEdit;
            
            // Visual effects
            document.getElementById('editingOverlay').classList.add('visible');
            document.getElementById('journalForm').parentElement.classList.add('editing-mode');
            
            // Highlight the selected entry
            document.querySelectorAll('.entry-card').forEach(card => {
                card.classList.remove('selected');
            });
            document.querySelector(`[data-entry-id="${entryId}"]`).classList.add('selected');
            
            // Re-analyze mood
            analyzeMood();
        }

        // Cancel edit mode
        function cancelEdit() {
            exitEditMode();
            clearForm();
        }

        // Exit edit mode
        function exitEditMode() {
            isEditMode = false;
            editingEntryId = null;
            
            // Reset UI
            document.getElementById('formTitle').textContent = 'üìù New Journal Entry';
            document.getElementById('saveBtn').textContent = 'Save Entry';
            document.getElementById('clearBtn').textContent = 'Clear';
            document.getElementById('clearBtn').onclick = clearForm;
            
            // Remove visual effects
            document.getElementById('editingOverlay').classList.remove('visible');
            document.getElementById('journalForm').parentElement.classList.remove('editing-mode');
            
            // Remove selection
            document.querySelectorAll('.entry-card').forEach(card => {
                card.classList.remove('selected');
            });
        }

        // Save entry to backend
        async function saveEntryToBackend(entry) {
            try {
                const response = await fetch('/api/journal', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        title: entry.title,
                        content: entry.content,
                        mood: entry.mood,
                        mood_score: entry.mood_score,
                        photo: entry.photo,
                        health_info: entry.health_info,
                        user_id: 'default'
                    })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('Entry saved successfully:', result);
                    // Reload entries from backend after saving
                    setTimeout(() => loadEntriesFromBackend(), 500);
                    return result;
                } else {
                    console.error('Failed to save entry:', response.status);
                    return null;
                }
            } catch (error) {
                console.error('Error saving journal entry:', error);
                return null;
            }
        })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    const localEntry = entries.find(e => e.id === entry.id);
                    if (localEntry && result.id) {
                        localEntry.id = result.id;
                    }
                }
            } catch (error) {
                console.error('Error saving journal entry:', error);
            }
        }

        // Update entry in backend
        async function updateEntryInBackend(entryId, title, content, mood, healthInfo) {
            try {
                await fetch(`/api/journal/${entryId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        title: title,
                        content: content,
                        mood: mood,
                        health_info: healthInfo
                    })
                });
            } catch (error) {
                console.error('Error updating journal entry:', error);
            }
        }

        // Load entries from backend
        async function loadEntriesFromBackend() {
            try {
                const response = await fetch('/api/journal');
                if (response.ok) {
                    const backendEntries = await response.json();
                    entries = backendEntries.map(entry => ({
                        id: entry.id,
                        title: entry.title,
                        content: entry.content,
                        mood: entry.mood || getMoodFromScore(entry.mood_score),
                        mood_score: entry.mood_score,
                        photo: entry.photo,
                        health_info: entry.health_info,
                        createdAt: new Date(entry.created_at || entry.createdAt)
                    }));
                    renderEntries();
                }
            } catch (error) {
                console.error('Error loading journal entries:', error);
            }
        }

        // Convert mood score to mood string
        function getMoodFromScore(score) {
            if (!score) return 'okay';
            if (score > 0.5) return 'amazing';
            if (score > 0.1) return 'good';
            if (score > -0.1) return 'okay';
            if (score > -0.5) return 'stressed';
            return 'sad';
        }

        // Load entries from localStorage
        function loadEntries() {
            const savedEntries = localStorage.getItem('zoe_journal_entries');
            if (savedEntries) {
                entries = JSON.parse(savedEntries).map(entry => ({
                    ...entry,
                    createdAt: new Date(entry.createdAt)
                }));
                renderEntries();
            }
        }

        // Save entries to localStorage
        function saveEntries() {
            localStorage.setItem('zoe_journal_entries', JSON.stringify(entries));
        }

        // Filter entries
        function filterEntries(filter) {
            currentFilter = filter;
            
            // Update filter buttons
            document.querySelectorAll('.filter-tab').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            renderEntries();
        }

        // Get filtered entries
        function getFilteredEntries() {
            const now = new Date();
            let filteredEntries = entries;
            
            if (currentFilter === 'today') {
                filteredEntries = entries.filter(entry => {
                    const entryDate = new Date(entry.createdAt);
                    return entryDate.toDateString() === now.toDateString();
                });
            } else if (currentFilter === 'week') {
                const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                filteredEntries = entries.filter(entry => new Date(entry.createdAt) >= weekAgo);
            } else if (currentFilter === 'month') {
                const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                filteredEntries = entries.filter(entry => new Date(entry.createdAt) >= monthAgo);
            }
            
            return filteredEntries;
        }

        // Render entries
        function renderEntries() {
            const container = document.getElementById('entriesContainer');
            const filteredEntries = getFilteredEntries();

            if (filteredEntries.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">üìù</div>
                        <div class="empty-state-text">No journal entries found</div>
                        <div class="empty-state-subtext">Start writing to capture your thoughts and feelings</div>
                    </div>
                `;
                return;
            }

            container.innerHTML = filteredEntries.map(entry => {
                const preview = entry.content.length > 120 ? 
                    entry.content.substring(0, 120) + '...' : entry.content;
                const moodEmoji = getMoodEmoji(entry.mood);
                const moodClass = `mood-${entry.mood}`;
                const hasHealthInfo = entry.health_info && entry.health_info.feeling_unwell;
                
                return `
                    <div class="entry-card" data-entry-id="${entry.id}" onclick="editEntry(${entry.id})">
                        <div class="entry-header">
                            <div>
                                <div class="entry-title">${entry.title}</div>
                                <div class="entry-meta">
                                    <div class="entry-date">${formatDate(entry.createdAt)}</div>
                                    <div class="entry-mood ${moodClass}">${moodEmoji} ${capitalizeFirst(entry.mood)}</div>
                                    ${hasHealthInfo ? '<div class="entry-health">üè• Health</div>' : ''}
                                </div>
                            </div>
                        </div>
                        <div class="entry-content">
                            <div class="entry-preview">${preview}</div>
                            <div class="entry-full">${entry.content.replace(/\n/g, '<br>')}</div>
                        </div>
                        ${entry.photo ? `<img src="${entry.photo}" class="entry-photo" alt="Entry photo" onclick="openPhotoModal('${entry.photo}'); event.stopPropagation();">` : ''}
                        <div class="entry-actions">
                            <button class="entry-action" onclick="editEntry(${entry.id}); event.stopPropagation();">Edit</button>
                            <button class="entry-action delete" onclick="deleteEntry(${entry.id}); event.stopPropagation();">Delete</button>
                        </div>
                    </div>
                `;
            }).join('');

            saveEntries();
        }

        // Delete entry
        function deleteEntry(entryId) {
            if (confirm('Are you sure you want to delete this journal entry?')) {
                entries = entries.filter(e => e.id !== entryId);
                renderEntries();
                showNotification('Journal entry deleted! üóëÔ∏è');

                // Delete from backend
                deleteEntryFromBackend(entryId);
                
                // Exit edit mode if this entry was being edited
                if (editingEntryId === entryId) {
                    exitEditMode();
                    clearForm();
                }
            }
        }

        // Delete entry from backend
        async function deleteEntryFromBackend(entryId) {
            try {
                await fetch(`/api/journal/${entryId}`, {
                    method: 'DELETE'
                });
            } catch (error) {
                console.error('Error deleting journal entry:', error);
            }
        }

        // Get mood emoji
        function getMoodEmoji(mood) {
            const moods = {
                'amazing': 'üòÑ',
                'good': 'üòä',
                'okay': 'üòê',
                'stressed': 'üò∞',
                'sad': 'üò¢'
            };
            return moods[mood] || 'üòê';
        }

        // Capitalize first letter
        function capitalizeFirst(str) {
            return str.charAt(0).toUpperCase() + str.slice(1);
        }

        // Format date
        function formatDate(date) {
            const now = new Date();
            const entryDate = new Date(date);
            const diffMs = now - entryDate;
            const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
            const diffDays = Math.floor(diffHours / 24);

            if (diffHours < 1) {
                const diffMinutes = Math.floor(diffMs / (1000 * 60));
                return diffMinutes < 1 ? 'Just now' : `${diffMinutes} min ago`;
            } else if (diffHours < 24) {
                return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
            } else if (diffDays === 1) {
                return 'Yesterday';
            } else if (diffDays < 7) {
                return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
            } else {
                return entryDate.toLocaleDateString();
            }
        }

        // Open photo modal
        function openPhotoModal(photoSrc) {
            const modal = document.getElementById('photoModal');
            const img = document.getElementById('photoModalImg');
            img.src = photoSrc;
            modal.classList.add('visible');
            document.body.style.overflow = 'hidden';
        }

        // Close photo modal
        function closePhotoModal() {
            document.getElementById('photoModal').classList.remove('visible');
            document.body.style.overflow = 'auto';
        }

        // Show notification
        function showNotification(message) {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 80px;
                right: 20px;
                background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
                color: white;
                padding: 12px 20px;
                border-radius: 12px;
                font-size: 14px;
                font-weight: 500;
                box-shadow: 0 8px 24px rgba(123, 97, 255, 0.3);
                z-index: 1000;
                animation: slideInRight 0.3s ease;
                max-width: 300px;
            `;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.animation = 'slideOutRight 0.3s ease forwards';
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            // Ctrl/Cmd + Enter: Save entry
            if ((event.ctrlKey || event.metaKey) && event.key === 'Enter') {
                event.preventDefault();
                saveEntry();
            }
            
            // Escape: Cancel edit mode or close modals
            if (event.key === 'Escape') {
                if (isEditMode) {
                    event.preventDefault();
                    cancelEdit();
                } else {
                    closePhotoModal();
                    closeMoreOverlay();
                }
            }
        });

        // Console info
        setTimeout(() => {
            console.log(`
üìù Zoe Journal v3.1 Ready!

‚ú® Features Available:
   ‚Ä¢ Advanced mood analysis with confidence scoring
   ‚Ä¢ Photo attachments with full-screen viewing
   ‚Ä¢ Health check-in tracking with symptoms
   ‚Ä¢ Voice-to-text input support
   ‚Ä¢ Comprehensive entry management (edit/delete)
   ‚Ä¢ Time-based filtering (all/today/week/month)
   ‚Ä¢ Real-time backend synchronization
   ‚Ä¢ Beautiful responsive design optimized for Pi 5

üéØ Keyboard Shortcuts:
   ‚Ä¢ Ctrl/Cmd + Enter: Save entry
   ‚Ä¢ Escape: Cancel edit mode
   ‚Ä¢ Tab: Navigate between form fields

üí° Usage Tips:
   ‚Ä¢ Start typing to see real-time mood analysis
   ‚Ä¢ Click photos to view full-size
   ‚Ä¢ Use health check for symptom tracking
   ‚Ä¢ Filter entries to find specific periods
   ‚Ä¢ Voice button supports speech-to-text

Perfect for daily reflection and wellness tracking! üåü
            `);
        }, 500);
    </script>
</body>
</html>
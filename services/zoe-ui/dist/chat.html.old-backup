<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zoe - Chat</title>
    <style>
        * { 
            margin: 0; padding: 0; box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', system-ui, sans-serif;
            background: linear-gradient(135deg, #fafbfc 0%, #f1f3f6 100%);
            overflow: hidden; height: 100vh; color: #333;
        }
        
        /* Navigation Bar */
        .nav-bar {
            position: fixed; top: 0; left: 0; right: 0; background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(20px); border-bottom: 1px solid rgba(255, 255, 255, 0.3);
            padding: 10px 15px; z-index: 100; display: flex; justify-content: space-between;
            align-items: center; height: 60px;
        }
        .nav-left { display: flex; align-items: center; gap: 15px; }
        .mini-orb { 
            width: 32px; height: 32px; border-radius: 50%; 
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%); 
            cursor: pointer; transition: all 0.3s ease; min-width: 44px; min-height: 44px;
        }
        .mini-orb:hover { transform: scale(1.1); }
        .nav-menu { display: flex; gap: 20px; }
        .nav-item { 
            color: #666; text-decoration: none; font-size: 13px; font-weight: 400;
            transition: all 0.3s ease; padding: 8px 12px; border-radius: 6px;
            min-height: 44px; display: flex; align-items: center;
        }
        .nav-item:hover, .nav-item.active { color: #7B61FF; background: rgba(123, 97, 255, 0.1); }
        .nav-right { display: flex; align-items: center; gap: 10px; }
        
        .time-date-display {
            display: flex; flex-direction: column; align-items: flex-end; gap: 2px;
        }
        .current-time { font-size: 16px; font-weight: 500; color: #333; line-height: 1.2; }
        .current-date { font-size: 11px; color: #666; line-height: 1.2; }
        
        /* API Status Indicator */
        .api-indicator { font-size: 12px; padding: 4px 8px; border-radius: 8px; font-weight: 500; display: flex; align-items: center; gap: 6px; }
        .api-indicator.online { background: rgba(34, 197, 94, 0.1); color: #22c55e; }
        .api-indicator.offline { background: rgba(239, 68, 68, 0.1); color: #ef4444; }
        .api-indicator.connecting { background: rgba(251, 146, 60, 0.1); color: #ea580c; }
        .api-indicator::before { content: ''; width: 8px; height: 8px; border-radius: 50%; display: inline-block; }
        .api-indicator.online::before { background: #22c55e; }
        .api-indicator.offline::before { background: #ef4444; }
        .api-indicator.connecting::before { background: #ea580c; animation: pulse 1.5s infinite; }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.3; }
        }
        
        /* Chat Container */
        .chat-container {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 60px);
            margin-top: 60px;
            max-width: 900px;
            margin-left: auto;
            margin-right: auto;
        }
        
        /* Messages Area */
        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 30px 20px;
            display: flex;
            flex-direction: column;
            gap: 24px;
        }
        
        .messages-container::-webkit-scrollbar {
            width: 8px;
        }
        
        .messages-container::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 10px;
        }
        
        .messages-container::-webkit-scrollbar-thumb {
            background: rgba(123, 97, 255, 0.3);
            border-radius: 10px;
        }
        
        /* Message Group */
        .message-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .message-group.user {
            align-items: flex-end;
        }
        
        .message-group.zoe {
            align-items: flex-start;
        }
        
        /* Message Bubbles */
        .message {
            max-width: 70%;
            padding: 16px 20px;
            border-radius: 20px;
            font-size: 15px;
            line-height: 1.6;
            word-wrap: break-word;
            animation: messageSlide 0.3s ease-out;
        }
        
        @keyframes messageSlide {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .message.user {
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            color: white;
            border-bottom-right-radius: 4px;
        }
        
        .message.zoe {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.4);
            color: #333;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            border-bottom-left-radius: 4px;
        }
        
        /* Feedback Actions (CopilotKit style) */
        .message-actions {
            display: flex;
            gap: 4px;
            opacity: 0;
            transition: opacity 0.2s ease;
        }
        
        .message-group:hover .message-actions {
            opacity: 1;
        }
        
        .action-btn {
            width: 32px;
            height: 32px;
            border: none;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            color: #666;
        }
        
        .action-btn:hover {
            background: rgba(255, 255, 255, 1);
            transform: translateY(-2px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        .action-btn.active {
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            color: white;
            border-color: transparent;
        }
        
        .action-btn.positive.active {
            background: #2ecc71;
        }
        
        .action-btn.negative.active {
            background: #e74c3c;
        }
        
        /* Streaming Cursor */
        .streaming-cursor {
            display: inline-block;
            width: 2px;
            height: 1em;
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            margin-left: 4px;
            animation: cursorBlink 1s infinite;
            vertical-align: text-bottom;
        }
        
        @keyframes cursorBlink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }
        
        /* Activity Indicator */
        .activity-indicator {
            max-width: 70%;
            margin-bottom: 8px;
            animation: activitySlide 0.3s ease-out;
        }
        
        @keyframes activitySlide {
            from { opacity: 0; transform: translateX(-10px); }
            to { opacity: 1; transform: translateX(0); }
        }
        
        .activity-content {
            background: rgba(255, 255, 255, 0.7);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.4);
            border-radius: 16px;
            padding: 12px 16px;
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 14px;
            color: #666;
        }
        
        .activity-icon {
            font-size: 20px;
            animation: activityPulse 1.5s ease-in-out infinite;
        }
        
        @keyframes activityPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }
        
        .activity-indicator.thinking .activity-content {
            background: rgba(155, 89, 182, 0.12);
            border-color: rgba(155, 89, 182, 0.3);
            color: #9b59b6;
        }
        
        .activity-indicator.searching .activity-content {
            background: rgba(52, 152, 219, 0.12);
            border-color: rgba(52, 152, 219, 0.3);
            color: #3498db;
        }
        
        .activity-indicator.found .activity-content {
            background: rgba(46, 204, 113, 0.12);
            border-color: rgba(46, 204, 113, 0.3);
            color: #2ecc71;
        }
        
        /* Input Area */
        .input-container {
            padding: 20px;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(20px);
            border-top: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .input-wrapper {
            display: flex;
            gap: 12px;
            align-items: flex-end;
            max-width: 900px;
            margin: 0 auto;
        }
        
        .input-field {
            flex: 1;
            min-height: 48px;
            max-height: 120px;
            padding: 14px 18px;
            border: 2px solid rgba(123, 97, 255, 0.2);
            border-radius: 24px;
            font-size: 15px;
            font-family: inherit;
            resize: none;
            outline: none;
            transition: all 0.3s ease;
            background: white;
            overflow: hidden;
        }
        
        .input-field:focus {
            border-color: #7B61FF;
            box-shadow: 0 0 0 4px rgba(123, 97, 255, 0.1);
            overflow-y: auto;
        }
        
        .input-field::-webkit-scrollbar {
            width: 6px;
        }
        
        .input-field::-webkit-scrollbar-track {
            background: transparent;
        }
        
        .input-field::-webkit-scrollbar-thumb {
            background: rgba(123, 97, 255, 0.3);
            border-radius: 10px;
        }
        
        .send-btn {
            width: 48px;
            height: 48px;
            border: none;
            border-radius: 50%;
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            color: white;
            font-size: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        
        .send-btn:hover:not(:disabled) {
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(123, 97, 255, 0.4);
        }
        
        .send-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        /* Welcome Section */
        .welcome-section {
            padding: 40px 20px 20px;
            text-align: center;
        }
        
        .welcome-title {
            font-size: 32px;
            font-weight: 300;
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 12px;
        }
        
        .welcome-subtitle {
            font-size: 16px;
            color: #666;
            margin-bottom: 30px;
        }
        
        .suggestion-chips {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
            max-width: 700px;
            margin: 0 auto;
        }
        
        .suggestion-chip {
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(123, 97, 255, 0.2);
            border-radius: 24px;
            font-size: 14px;
            color: #666;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .suggestion-chip:hover {
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(123, 97, 255, 0.3);
        }
        
        /* Notification Toast */
        .toast {
            position: fixed;
            bottom: 100px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.4);
            border-radius: 12px;
            padding: 12px 20px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            font-size: 14px;
            color: #333;
            z-index: 1000;
            animation: toastSlide 0.3s ease-out;
        }
        
        @keyframes toastSlide {
            from { opacity: 0; transform: translate(-50%, 20px); }
            to { opacity: 1; transform: translate(-50%, 0); }
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .nav-menu { display: none; }
            .message { max-width: 85%; }
            .suggestion-chips { padding: 0 20px; }
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <div class="nav-bar">
        <div class="nav-left">
            <div class="mini-orb" onclick="handleLogout()"></div>
            <div class="nav-menu">
                <a href="chat.html" class="nav-item active">Chat</a>
                <a href="dashboard.html" class="nav-item">Dashboard</a>
                <a href="lists.html" class="nav-item">Lists</a>
                <a href="calendar.html" class="nav-item">Calendar</a>
                <a href="journal.html" class="nav-item">Journal</a>
            </div>
        </div>
        <div class="nav-right">
            <div class="api-indicator connecting" id="apiStatus">Connecting</div>
            <div class="time-date-display">
                <div class="current-time" id="currentTime">Loading...</div>
                <div class="current-date" id="currentDate">Loading...</div>
            </div>
        </div>
    </div>

    <!-- Chat Container -->
    <div class="chat-container">
        <!-- Messages Container -->
        <div class="messages-container" id="messagesContainer">
            <!-- Welcome Section -->
            <div class="welcome-section">
                <h1 class="welcome-title">Chat with Zoe</h1>
                <p class="welcome-subtitle">Your AI assistant is here to help</p>
                <div class="suggestion-chips">
                    <div class="suggestion-chip" onclick="tryPrompt('What\'s on my calendar today?')">📅 Check my calendar</div>
                    <div class="suggestion-chip" onclick="tryPrompt('Show my shopping list')">🛒 Shopping list</div>
                    <div class="suggestion-chip" onclick="tryPrompt('Help me plan my day')">✨ Plan my day</div>
                </div>
            </div>
        </div>

        <!-- Input Area -->
        <div class="input-container">
            <div class="input-wrapper">
                <textarea 
                    class="input-field" 
                    id="chatInput" 
                    placeholder="Ask me anything..."
                    rows="1"
                    onkeydown="handleKeyDown(event)"
                    oninput="adjustTextareaHeight(this)"
                ></textarea>
                <button class="send-btn" id="sendBtn" onclick="sendMessage()">➤</button>
            </div>
        </div>
    </div>

    <script src="js/auth.js"></script>
    <script src="js/common.js"></script>
    <script>
        let isStreaming = false;
        let currentMessageElement = null;
        let streamingText = '';
        let messageIdCounter = 0;

        // Initialize
        function init() {
            updateTimeDate();
            setInterval(updateTimeDate, 60000);
            document.getElementById('chatInput').focus();
            checkAPIStatus();
        }

        // API Status Check
        async function checkAPIStatus() {
            const indicator = document.getElementById('apiStatus');
            try {
                const response = await fetch('/api/health');
                if (response.ok) {
                    indicator.className = 'api-indicator online';
                    indicator.textContent = 'Online';
                } else {
                    indicator.className = 'api-indicator offline';
                    indicator.textContent = 'Warning';
                }
            } catch (error) {
                indicator.className = 'api-indicator offline';
                indicator.textContent = 'Offline';
                console.error('❌ API Offline:', error);
            }
        }

        // Time/Date
        function updateTimeDate() {
            const now = new Date();
            document.getElementById('currentTime').textContent = 
                now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            document.getElementById('currentDate').textContent = 
                now.toLocaleDateString([], { weekday: 'short', month: 'short', day: 'numeric' });
        }

        // Try Prompt
        function tryPrompt(text) {
            document.getElementById('chatInput').value = text;
            sendMessage();
        }

        // Input Handling
        function handleKeyDown(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        function adjustTextareaHeight(textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
        }

        // Send Message
        async function sendMessage() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            if (!message || isStreaming) return;

            // Remove welcome section if it exists
            const welcome = document.querySelector('.welcome-section');
            if (welcome) welcome.remove();

            addMessage(message, 'user');
            input.value = '';
            adjustTextareaHeight(input);

            await simulateChat(message);
        }

        // REAL AG-UI Enhanced Chat with Streaming
        async function simulateChat(userMessage) {
            isStreaming = true;
            document.getElementById('sendBtn').disabled = true;

            try {
                const session = window.zoeAuth?.getCurrentSession();
                
                // 1. Show thinking
                const thinking = showActivity('🤔', 'Thinking...', 'thinking');

                // 2. Call streaming API with AG-UI protocol
                const response = await fetch(`/api/chat/?user_id=${session?.user_id || 'default'}&stream=true`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message: userMessage,
                        context: { mode: 'main_chat' },
                        session_id: `session_${Date.now()}`
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }

                // 3. Read SSE stream
                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let buffer = '';
                let messageId = null;
                let streamingText = '';
                let currentActivity = thinking;

                while (true) {
                    const {value, done} = await reader.read();
                    if (done) break;
                    
                    buffer += decoder.decode(value, {stream: true});
                    const lines = buffer.split('\n');
                    buffer = lines.pop(); // Keep incomplete line in buffer
                    
                    for (const line of lines) {
                        if (line.startsWith('data: ')) {
                            try {
                                const data = JSON.parse(line.slice(6));
                                
                                if (data.type === 'session_start') {
                                    console.log('Session started:', data.session_id);
                                } else if (data.type === 'metadata') {
                                    // Show tool usage if any
                                    console.log('Metadata:', data);
                                } else if (data.type === 'agent_thinking') {
                                    // Keep thinking indicator
                                } else if (data.type === 'tool_call_start') {
                                    // Update activity to show tool use
                                    removeActivity(currentActivity);
                                    currentActivity = showActivity('🔧', `Using ${data.tool}...`, 'searching');
                                } else if (data.type === 'tool_result') {
                                    // Remove tool activity
                                    removeActivity(currentActivity);
                                    currentActivity = showActivity('✅', 'Tool completed!', 'found');
                                    await sleep(600);
                                    removeActivity(currentActivity);
                                    currentActivity = null;
                                } else if (data.type === 'token') {
                                    // Remove thinking if still showing
                                    if (currentActivity) {
                                        removeActivity(currentActivity);
                                        currentActivity = null;
                                    }
                                    
                                    // Create message if not exists
                                    if (!messageId) {
                                        messageId = await addMessageWithFeedback('', 'zoe');
                                        currentMessageElement = document.querySelector(`[data-message-id="${messageId}"] .message`);
                                    }
                                    
                                    // Append token
                                    streamingText += data.content;
                                    currentMessageElement.innerHTML = streamingText.replace(/\n/g, '<br>') + 
                                                                    '<span class="streaming-cursor"></span>';
                                    scrollToBottom();
                                } else if (data.type === 'done') {
                                    // Remove cursor
                                    if (currentMessageElement) {
                                        currentMessageElement.innerHTML = streamingText.replace(/\n/g, '<br>');
                                    }
                                    if (currentActivity) {
                                        removeActivity(currentActivity);
                                    }
                                }
                            } catch (e) {
                                console.error('Failed to parse SSE:', e);
                            }
                        }
                    }
                }

            } catch (error) {
                console.error('Chat error:', error);
                addMessageWithFeedback('Sorry, I encountered an error. Please check your connection and try again.', 'zoe');
            } finally {
                isStreaming = false;
                document.getElementById('sendBtn').disabled = false;
            }
        }

        // UI Helpers
        function addMessage(text, sender) {
            const container = document.getElementById('messagesContainer');
            const group = document.createElement('div');
            group.className = `message-group ${sender}`;
            
            const message = document.createElement('div');
            message.className = `message ${sender}`;
            message.innerHTML = text.replace(/\n/g, '<br>');
            group.appendChild(message);
            
            container.appendChild(group);
            scrollToBottom();
            return group;
        }

        async function addMessageWithFeedback(text, sender) {
            const messageId = ++messageIdCounter;
            const container = document.getElementById('messagesContainer');
            const group = document.createElement('div');
            group.className = `message-group ${sender}`;
            group.dataset.messageId = messageId;
            
            const message = document.createElement('div');
            message.className = `message ${sender}`;
            message.innerHTML = text.replace(/\n/g, '<br>');
            group.appendChild(message);
            
            // Add feedback actions (CopilotKit style)
            const actions = document.createElement('div');
            actions.className = 'message-actions';
            actions.innerHTML = `
                <button class="action-btn" onclick="regenerateMessage(${messageId})" title="Regenerate">
                    🔄
                </button>
                <button class="action-btn" onclick="copyMessage(${messageId})" title="Copy">
                    📋
                </button>
                <button class="action-btn positive" onclick="feedbackPositive(${messageId})" title="Good response">
                    👍
                </button>
                <button class="action-btn negative" onclick="feedbackNegative(${messageId})" title="Bad response">
                    👎
                </button>
            `;
            group.appendChild(actions);
            
            container.appendChild(group);
            scrollToBottom();
            return messageId;
        }

        function showActivity(icon, text, type) {
            const container = document.getElementById('messagesContainer');
            const activity = document.createElement('div');
            activity.className = `activity-indicator ${type}`;
            activity.innerHTML = `
                <div class="activity-content">
                    <div class="activity-icon">${icon}</div>
                    <div>${text}</div>
                </div>
            `;
            container.appendChild(activity);
            scrollToBottom();
            return activity;
        }

        function removeActivity(element) {
            if (element && element.parentNode) {
                element.remove();
            }
        }

        function scrollToBottom() {
            const container = document.getElementById('messagesContainer');
            container.scrollTop = container.scrollHeight;
        }

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        // Feedback Actions
        async function regenerateMessage(messageId) {
            showToast('Regenerating response...');
            // TODO: Call backend to regenerate
        }

        async function copyMessage(messageId) {
            const messageGroup = document.querySelector(`[data-message-id="${messageId}"]`);
            const messageText = messageGroup.querySelector('.message').innerText;
            
            try {
                await navigator.clipboard.writeText(messageText);
                showToast('Copied to clipboard!');
            } catch (err) {
                showToast('Failed to copy');
            }
        }

        async function feedbackPositive(messageId) {
            const btn = document.querySelector(`[data-message-id="${messageId}"] .action-btn.positive`);
            const negBtn = document.querySelector(`[data-message-id="${messageId}"] .action-btn.negative`);
            
            // Toggle active state
            if (btn.classList.contains('active')) {
                btn.classList.remove('active');
                // TODO: Remove feedback from backend
            } else {
                btn.classList.add('active');
                negBtn.classList.remove('active');
                showToast('Thanks for your feedback!');
                
                // TODO: Send positive feedback to backend
                // await apiRequest('/feedback', {
                //     method: 'POST',
                //     body: JSON.stringify({ message_id: messageId, rating: 'positive' })
                // });
            }
        }

        async function feedbackNegative(messageId) {
            const btn = document.querySelector(`[data-message-id="${messageId}"] .action-btn.negative`);
            const posBtn = document.querySelector(`[data-message-id="${messageId}"] .action-btn.positive`);
            
            // Toggle active state
            if (btn.classList.contains('active')) {
                btn.classList.remove('active');
                // TODO: Remove feedback from backend
            } else {
                btn.classList.add('active');
                posBtn.classList.remove('active');
                showToast('Thanks for your feedback!');
                
                // TODO: Send negative feedback to backend
                // await apiRequest('/feedback', {
                //     method: 'POST',
                //     body: JSON.stringify({ message_id: messageId, rating: 'negative' })
                // });
            }
        }

        function showToast(message) {
            const toast = document.createElement('div');
            toast.className = 'toast';
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 2000);
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Zoe - Settings</title>
    <style>
        * { 
            margin: 0; padding: 0; box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
            touch-action: manipulation;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', system-ui, sans-serif;
            background: linear-gradient(135deg, #fafbfc 0%, #f1f3f6 100%);
            min-height: 100vh; color: #333;
            font-size: clamp(14px, 1.6vw, 16px);
        }
        
        /* Navigation */
        .nav-bar {
            position: fixed; top: 0; left: 0; right: 0; background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(20px); border-bottom: 1px solid rgba(255, 255, 255, 0.3);
            padding: 10px 15px; z-index: 100; display: flex; justify-content: space-between;
            align-items: center; height: 60px;
        }
        .nav-left { display: flex; align-items: center; gap: 15px; }
        .mini-orb { 
            width: 32px; height: 32px; border-radius: 50%; 
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%); 
            cursor: pointer; transition: all 0.3s ease; min-width: 44px; min-height: 44px;
        }
        .mini-orb:hover { transform: scale(1.1); }
        .nav-menu { display: flex; gap: 20px; }
        .nav-item { 
            color: #666; text-decoration: none; font-size: 13px; font-weight: 400; 
            transition: all 0.3s ease; padding: 8px 12px; border-radius: 6px;
            min-height: 44px; display: flex; align-items: center;
        }
        .nav-item:hover, .nav-item.active { color: #7B61FF; background: rgba(123, 97, 255, 0.1); }
        .nav-right { display: flex; align-items: center; gap: 10px; }
        
        .more-nav-btn { 
            color: #666; text-decoration: none; font-size: 13px; font-weight: 400; 
            transition: all 0.3s ease; padding: 8px 12px; border-radius: 6px;
            min-height: 44px; display: flex; align-items: center; cursor: pointer;
            background: none; border: none;
        }
        .more-nav-btn:hover { color: #7B61FF; background: rgba(123, 97, 255, 0.1); }
        
        /* Authentication Integration */
        .user-menu {
            position: relative;
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px 12px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .user-menu:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        
        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 14px;
        }
        
        .user-info {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }
        
        .user-name {
            font-size: 14px;
            font-weight: 500;
            color: #333;
            line-height: 1.2;
        }
        
        .user-role {
            font-size: 12px;
            color: #666;
            line-height: 1.2;
        }
        
        .user-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            padding: 8px 0;
            min-width: 200px;
            z-index: 1000;
            display: none;
            border: 1px solid #e1e5e9;
        }
        
        .user-dropdown.show {
            display: block;
        }
        
        .dropdown-item {
            display: block;
            padding: 8px 16px;
            color: #333;
            text-decoration: none;
            font-size: 14px;
            transition: background 0.2s;
        }
        
        .dropdown-item:hover {
            background: #f8f9fa;
        }
        
        .dropdown-divider {
            height: 1px;
            background: #e1e5e9;
            margin: 4px 0;
        }
        
        .notifications-btn { 
            background: rgba(255, 255, 255, 0.6); border: 1px solid rgba(255, 255, 255, 0.3); 
            border-radius: 50%; width: 32px; height: 32px; display: flex; align-items: center; 
            justify-content: center; cursor: pointer; transition: all 0.3s ease; color: #666;
            font-size: 16px; font-weight: bold; position: relative;
        }
        .notifications-btn:hover { background: rgba(255, 255, 255, 0.8); color: #333; }
        .notifications-btn.has-notifications {
            animation: notificationPulse 2s ease-in-out infinite;
        }
        .notifications-btn.has-notifications::after {
            content: ''; position: absolute; top: 6px; right: 6px;
            width: 10px; height: 10px; background: #ff4757; border-radius: 50%;
            border: 2px solid white;
            animation: notificationDotPulse 1.5s ease-in-out infinite;
        }
        
        @keyframes notificationPulse {
            0%, 100% { 
                transform: scale(1);
                box-shadow: 0 0 0 0 rgba(123, 97, 255, 0.4);
            }
            50% { 
                transform: scale(1.05);
                box-shadow: 0 0 0 8px rgba(123, 97, 255, 0);
            }
        }
        
        @keyframes notificationDotPulse {
            0%, 100% { 
                transform: scale(1);
                opacity: 1;
            }
            50% { 
                transform: scale(1.2);
                opacity: 0.7;
            }
        }
        
        /* Notifications Panel */
        .notifications-panel {
            position: fixed; top: 0; right: -400px; width: 400px; height: 100vh;
            background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px);
            border-left: 1px solid rgba(255, 255, 255, 0.3); z-index: 1000;
            transition: right 0.3s ease; overflow-y: auto;
        }
        .notifications-panel.open { right: 0; }
        .notifications-header {
            padding: 20px; border-bottom: 1px solid rgba(255, 255, 255, 0.3);
            display: flex; justify-content: space-between; align-items: center;
        }
        .notifications-title {
            font-size: 18px; font-weight: 600; color: #333; margin: 0;
        }
        .notifications-close {
            width: 32px; height: 32px; border-radius: 50%; border: none;
            background: rgba(255, 255, 255, 0.3); color: #666; font-size: 18px;
            cursor: pointer; transition: all 0.3s ease; min-width: 44px; min-height: 44px;
        }
        .notifications-close:hover { background: rgba(255, 255, 255, 0.5); }
        .notifications-content {
            padding: 20px; display: flex; flex-direction: column; gap: 15px;
        }
        .notification-item {
            background: rgba(255, 255, 255, 0.6); backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.4); border-radius: 12px;
            padding: 15px; transition: all 0.3s ease; cursor: pointer;
        }
        .notification-item:hover { transform: translateY(-2px); box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1); }
        .notification-item.unread { border-left: 4px solid #7B61FF; }
        .notification-title {
            font-size: 14px; font-weight: 600; color: #333; margin-bottom: 5px;
        }
        .notification-meta {
            font-size: 12px; color: #666; display: flex; gap: 10px;
        }
        .notification-time {
            color: #7B61FF; font-weight: 500;
        }
        .notification-priority {
            padding: 2px 8px; border-radius: 12px; font-size: 10px; font-weight: 600;
        }
        .no-notifications {
            text-align: center; color: #666; font-size: 14px; padding: 40px 20px;
        }
        
        .api-indicator { font-size: 12px; padding: 4px 8px; border-radius: 8px; font-weight: 500; display: flex; align-items: center; gap: 6px; }
        .api-indicator.online { background: rgba(34, 197, 94, 0.1); color: #22c55e; }
        .api-indicator.offline { background: rgba(239, 68, 68, 0.1); color: #ef4444; }
        .api-indicator.warning { background: rgba(251, 146, 60, 0.1); color: #ea580c; }
        .api-indicator::before { content: ''; width: 8px; height: 8px; border-radius: 50%; display: inline-block; }
        .api-indicator.online::before { background: #22c55e; }
        .api-indicator.offline::before { background: #ef4444; }
        .api-indicator.warning::before { background: #ea580c; }

        /* Main Layout */
        .main-container { padding: 70px 20px 20px; }

        /* Settings Layout */
        .settings-layout {
            max-width: 800px; margin: 0 auto;
        }
        .settings-header {
            text-align: center; margin-bottom: 30px;
        }
        .settings-title {
            font-size: 28px; font-weight: 300; color: #333; margin-bottom: 10px;
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
        }
        .settings-subtitle {
            font-size: 16px; color: #666;
        }

        /* Settings Sections */
        .settings-section {
            background: rgba(255, 255, 255, 0.8); backdrop-filter: blur(40px);
            border: 1px solid rgba(255, 255, 255, 0.4); border-radius: 16px;
            margin-bottom: 20px; overflow: hidden;
        }
        .section-header {
            padding: 20px; background: rgba(255, 255, 255, 0.6);
            border-bottom: 1px solid rgba(255, 255, 255, 0.3);
            cursor: pointer; transition: all 0.3s ease;
        }
        .section-header:hover {
            background: rgba(123, 97, 255, 0.05);
        }
        .section-title {
            font-family: var(--font-family-display);
            font-size: 16px; 
            font-weight: 600; 
            line-height: 1.4;
            color: #333; 
            margin-bottom: 4px;
        }
        .section-subtitle {
            font-size: 14px; color: #666;
        }
        .section-content {
            padding: 20px; display: none;
        }
        .section-content.active { display: block; }

        /* Setting Items */
        .setting-item {
            display: flex; justify-content: space-between; align-items: center;
            padding: 16px 0; border-bottom: 1px solid rgba(255, 255, 255, 0.3);
        }
        .setting-item:last-child {
            border-bottom: none;
        }
        .setting-info {
            flex: 1;
        }
        .setting-name {
            font-size: 16px; font-weight: 500; color: #333; margin-bottom: 4px;
        }
        .setting-description {
            font-size: 14px; color: #666;
        }

        /* Smart Time & Language Settings Styles */
        .current-time-display {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            color: white;
            text-align: center;
        }

        .current-time-label {
            font-size: 0.875rem;
            opacity: 0.9;
            margin-bottom: 0.5rem;
        }

        .current-time-value {
            font-size: 2.5rem;
            font-weight: 300;
            font-variant-numeric: tabular-nums;
            margin-bottom: 0.25rem;
        }

        .current-date-value {
            font-size: 1rem;
            opacity: 0.9;
        }

        .setting-subsection {
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid #e5e7eb;
        }

        .subsection-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: #374151;
            margin-bottom: 1rem;
        }

        .btn-outline {
            background: transparent;
            border: 1px solid #d1d5db;
            color: #374151;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-size: 0.875rem;
            transition: all 0.2s ease;
        }

        .btn-outline:hover {
            background: #f9fafb;
            border-color: #9ca3af;
        }

        /* Smart responsive behavior */
        @media (max-width: 768px) {
            .current-time-value {
                font-size: 2rem;
            }
            
            .setting-subsection {
                margin-top: 1rem;
                padding-top: 1rem;
            }
        }

        /* Productivity Settings Styles */
        .timer-settings {
            display: flex; flex-direction: column; gap: 12px;
        }
        .timer-input-group {
            display: flex; flex-direction: column; gap: 4px;
        }
        .timer-input-group label {
            font-size: 12px; color: #666; font-weight: 500;
        }
        .break-settings {
            display: flex; flex-direction: column; gap: 12px;
        }
        .break-reminder-types {
            display: flex; flex-direction: column; gap: 8px; margin-left: 20px;
        }
        .reminder-type {
            display: flex; align-items: center;
        }
        .productivity-settings {
            display: flex; flex-direction: column; gap: 12px;
        }
        .focus-controls {
            display: flex; flex-wrap: wrap; gap: 8px;
        }
        .analytics-preview {
            background: rgba(255, 255, 255, 0.6);
            border: 1px solid rgba(255, 255, 255, 0.4);
            border-radius: 8px; padding: 12px; margin-top: 8px;
        }
        .analytics-loading {
            text-align: center; color: #666; font-style: italic;
        }
        .analytics-metrics {
            display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 12px; margin-top: 8px;
        }
        .metric-item {
            text-align: center; padding: 8px;
            background: rgba(123, 97, 255, 0.1);
            border-radius: 6px;
        }
        .metric-value {
            font-size: 18px; font-weight: 600; color: #7B61FF;
        }
        .metric-label {
            font-size: 11px; color: #666; margin-top: 2px;
        }
        .setting-control {
            display: flex; align-items: center; gap: 12px;
        }

        /* Form Controls */
        .form-input, .form-select {
            padding: 12px 16px; border: 1px solid rgba(255, 255, 255, 0.4);
            border-radius: 8px; background: rgba(255, 255, 255, 0.9);
            font-size: 14px; outline: none; transition: all 0.3s ease;
            min-height: 48px; min-width: 200px;
        }
        .form-input:focus, .form-select:focus {
            border-color: #7B61FF; box-shadow: 0 0 0 2px rgba(123, 97, 255, 0.1);
        }

        /* Toggle Switch */
        .toggle-switch {
            position: relative; width: 48px; height: 24px;
            background: #ccc; border-radius: 12px; cursor: pointer;
            transition: background 0.3s ease;
        }
        .toggle-switch.active {
            background: #22c55e;
        }
        .toggle-slider {
            position: absolute; top: 2px; left: 2px; width: 20px; height: 20px;
            background: white; border-radius: 50%; transition: transform 0.3s ease;
        }
        .toggle-switch.active .toggle-slider {
            transform: translateX(24px);
        }

        /* Buttons */
        .btn {
            padding: 12px 20px; border: 1px solid rgba(255, 255, 255, 0.4);
            border-radius: 8px; background: rgba(255, 255, 255, 0.8);
            color: #666; font-size: 14px; cursor: pointer;
            transition: all 0.3s ease; min-height: 48px;
        }
        .btn:hover {
            background: rgba(123, 97, 255, 0.1); color: #7B61FF;
        }
        .btn.primary {
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            color: white; border-color: transparent;
        }
        .btn.danger {
            background: #ef4444; color: white; border-color: transparent;
        }

        /* API Keys Section */
        .api-key-item {
            display: flex; align-items: center; gap: 12px; padding: 12px;
            background: rgba(255, 255, 255, 0.6); border-radius: 8px;
            margin-bottom: 8px;
        }
        .api-key-name {
            font-weight: 500; color: #333; flex: 1;
        }
        .api-key-value {
            font-family: monospace; font-size: 12px; color: #666;
            background: rgba(0,0,0,0.05); padding: 4px 8px; border-radius: 4px;
            max-width: 200px; overflow: hidden; text-overflow: ellipsis;
        }

        /* Status Indicators */
        .status-indicator {
            display: inline-block; width: 8px; height: 8px; border-radius: 50%;
            margin-right: 8px;
        }
        .status-online { background: #22c55e; }
        .status-offline { background: #ef4444; }
        .status-warning { background: #f59e0b; }

        /* More Overlay */
        .more-overlay {
            position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
            background: rgba(0, 0, 0, 0.4); backdrop-filter: blur(8px);
            display: none; align-items: center; justify-content: center; z-index: 3000;
            opacity: 0; transition: all 0.3s ease;
        }
        .more-overlay.active { display: flex; opacity: 1; }
        .more-content {
            background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(60px);
            border: 1px solid rgba(255, 255, 255, 0.5); border-radius: 20px;
            padding: 40px; max-width: 500px; width: 90%; position: relative;
            transform: scale(0.8); transition: transform 0.3s ease;
        }
        .more-overlay.active .more-content { transform: scale(1); }
        .more-header { text-align: center; margin-bottom: 30px; }
        .more-title {
            font-size: 24px; font-weight: 300; color: #333; margin-bottom: 10px;
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
        }
        .more-close {
            position: absolute; top: 15px; right: 15px; 
            background: rgba(255, 255, 255, 0.6); border: none;
            border-radius: 50%; width: 36px; height: 36px;
            font-size: 18px; cursor: pointer; color: #666;
        }
        .more-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; }
        .more-item {
            background: rgba(255, 255, 255, 0.8); border: 1px solid rgba(255, 255, 255, 0.4);
            border-radius: 16px; padding: 24px; text-align: center; cursor: pointer;
            transition: all 0.3s ease; min-height: 120px; display: flex;
            flex-direction: column; align-items: center; justify-content: center;
        }
        .more-item:hover {
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            color: white; transform: translateY(-4px);
        }
        .more-item-icon { font-size: 36px; margin-bottom: 12px; }
        .more-item-label { font-size: 15px; font-weight: 500; }

        /* Mobile Responsive */
        @media (max-width: 900px) {
            .nav-menu { display: none; }
            .setting-item { flex-direction: column; align-items: flex-start; gap: 12px; }
            .setting-control { width: 100%; justify-content: flex-end; }
            .more-grid { grid-template-columns: 1fr; }
        }
    </style>
    <script src="js/auth.js"></script>
</head>
<body>
    <!-- Navigation -->
    <div class="nav-bar">
        <div class="nav-left">
            <div class="mini-orb" onclick="handleLogout()"></div>
            <div class="nav-menu">
                <a href="chat.html" class="nav-item">Chat</a>
                <a href="dashboard.html" class="nav-item">Dashboard</a>
                <a href="lists.html" class="nav-item">Lists</a>
                <a href="calendar.html" class="nav-item">Calendar</a>
                <a href="journal.html" class="nav-item">Journal</a>
                <button class="more-nav-btn" onclick="openMoreOverlay()">More</button>
            </div>
        </div>
        <div class="nav-right">
            <div class="api-indicator connecting" id="apiStatus">Connecting</div>
            
            
            <button class="notifications-btn" onclick="openNotifications()" title="Notifications">💬</button>
            
            <!-- User Menu -->
            <div class="user-menu" onclick="toggleUserDropdown()">
                <div class="user-avatar" id="userAvatar">?</div>
                
                <div class="user-dropdown" id="userDropdown">
                    <a href="#" class="dropdown-item" onclick="showUserProfile()">Profile</a>
                    <a href="#" class="dropdown-item" onclick="showSecuritySettings()">Security</a>
                    <div class="dropdown-divider"></div>
                    <a href="#" class="dropdown-item" onclick="switchUser()">Switch User</a>
                    <a href="#" class="dropdown-item" onclick="upgradeSession()" id="upgradeSessionItem" style="display: none;">Upgrade Session</a>
                    <div class="dropdown-divider"></div>
                    <a href="admin.html" class="dropdown-item" id="adminLink" style="display: none;">Admin Dashboard</a>
                    <div class="dropdown-divider" id="adminDivider" style="display: none;"></div>
                    <a href="#" class="dropdown-item" onclick="logout()">Logout</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Notifications Panel -->
    <div class="notifications-panel" id="notificationsPanel">
        <div class="notifications-header">
            <h3 class="notifications-title">💬 Notifications</h3>
            <button class="notifications-close" onclick="closeNotifications()">×</button>
        </div>
        <div class="notifications-content" id="notificationsContent">
            <div class="no-notifications">No notifications</div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-container">

        <!-- Settings Layout -->
        <div class="settings-layout">
            <!-- Settings Header -->
            <div class="settings-header">
                <h1 class="settings-title">Settings</h1>
                <p class="settings-subtitle">Configure your Zoe AI experience</p>
            </div>

            <!-- User Profile Section -->
            <div class="settings-section">
                <div class="section-header" onclick="toggleSection('profile')">
                    <div class="section-title">Profile</div>
                    <div class="section-subtitle">Manage your personal information and account settings</div>
                </div>
                <div class="section-content" id="profile">
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Username</div>
                            <div class="setting-description">Your unique identifier</div>
                        </div>
                        <div class="setting-control">
                            <input type="text" id="username" class="form-input" readonly>
                        </div>
                    </div>

                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Email</div>
                            <div class="setting-description">Your email address for notifications</div>
                        </div>
                        <div class="setting-control">
                            <input type="email" id="email" class="form-input" placeholder="Enter email">
                            <button onclick="updateProfile()" class="btn">Update</button>
                        </div>
                    </div>

                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Role</div>
                            <div class="setting-description">Your access level in the system</div>
                        </div>
                        <div class="setting-control">
                            <span id="userRole" class="setting-value">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Security Section -->
            <div class="settings-section">
                <div class="section-header" onclick="toggleSection('security')">
                    <div class="section-title">Security</div>
                    <div class="section-subtitle">Manage your passwords, PIN codes, and security settings</div>
                </div>
                <div class="section-content" id="security">
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Change Password</div>
                            <div class="setting-description">Update your account password</div>
                        </div>
                        <div class="setting-control">
                            <button onclick="showChangePassword()" class="btn">Change</button>
                        </div>
                    </div>

                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">PIN Code</div>
                            <div class="setting-description">Set up a PIN for quick access on touch panels</div>
                        </div>
                        <div class="setting-control">
                            <span id="pinStatus" class="setting-value">Loading...</span>
                            <button onclick="managePinCode()" class="btn" id="pinBtn">Manage</button>
                        </div>
                    </div>

                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Active Sessions</div>
                            <div class="setting-description">View and manage your active sessions</div>
                        </div>
                        <div class="setting-control">
                            <span id="sessionCount" class="setting-value">Loading...</span>
                            <button onclick="viewSessions()" class="btn">View</button>
                        </div>
                    </div>

                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Two-Factor Authentication</div>
                            <div class="setting-description">Add extra security to your account</div>
                        </div>
                        <div class="setting-control">
                            <span class="setting-value">Coming Soon</span>
                            <button class="btn" disabled>Setup</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- User Management Section (Admin Only) -->
            <div class="settings-section" id="userManagementSection" style="display: none;">
                <div class="section-header" onclick="toggleSection('user-management')">
                    <div class="section-title">User Management</div>
                    <div class="section-subtitle">Create and manage users (Admin only)</div>
                </div>
                <div class="section-content" id="user-management">
                    <!-- Create New User -->
                    <div class="setting-item" style="flex-direction: column; align-items: stretch;">
                        <div class="setting-info" style="margin-bottom: 15px;">
                            <div class="setting-name">Create New User</div>
                            <div class="setting-description">Add a new user to the system</div>
                        </div>
                        <div style="display: flex; flex-direction: column; gap: 10px;">
                            <input type="text" id="newUsername" class="form-input" placeholder="Username" style="width: 100%;">
                            <input type="email" id="newEmail" class="form-input" placeholder="Email" style="width: 100%;">
                            <input type="password" id="newPassword" class="form-input" placeholder="Password (min 8 characters)" style="width: 100%;">
                            <select id="newUserRole" class="form-select" style="width: 100%;">
                                <option value="user">User</option>
                                <option value="admin">Admin</option>
                                <option value="family_member">Family Member</option>
                                <option value="child">Child</option>
                                <option value="guest">Guest</option>
                            </select>
                            <button onclick="createNewUser()" class="btn" style="align-self: flex-end;">Create User</button>
                        </div>
                    </div>

                    <!-- User List -->
                    <div class="setting-item" style="flex-direction: column; align-items: stretch;">
                        <div class="setting-info" style="margin-bottom: 15px;">
                            <div class="setting-name">Existing Users</div>
                            <div class="setting-description">View and manage all users</div>
                        </div>
                        <div id="userList" style="display: flex; flex-direction: column; gap: 10px;">
                            <div style="text-align: center; padding: 20px; color: #666;">Loading users...</div>
                        </div>
                        <button onclick="loadUserList()" class="btn" style="align-self: flex-start; margin-top: 10px;">Refresh</button>
                    </div>
                </div>
            </div>

            <!-- General Settings -->
            <div class="settings-section">
                <div class="section-header" onclick="toggleSection('general')">
                    <div class="section-title">General Settings</div>
                    <div class="section-subtitle">Basic configuration options</div>
                </div>
                <div class="section-content" id="general">
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Theme</div>
                            <div class="setting-description">Choose your preferred theme</div>
                        </div>
                        <div class="setting-control">
                            <select class="form-select" id="themeSelect">
                                <option value="light">Light</option>
                                <option value="dark">Dark</option>
                                <option value="auto">Auto</option>
                            </select>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Language</div>
                            <div class="setting-description">Select your preferred language</div>
                        </div>
                        <div class="setting-control">
                            <select class="form-select" id="languageSelect">
                                <option value="en">English</option>
                                <option value="es">Spanish</option>
                                <option value="fr">French</option>
                                <option value="de">German</option>
                            </select>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Notifications</div>
                            <div class="setting-description">Enable push notifications</div>
                        </div>
                        <div class="setting-control">
                            <div class="toggle-switch" id="notificationsToggle" onclick="toggleSetting('notifications')">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- API Settings -->
            <div class="settings-section">
                <div class="section-header" onclick="toggleSection('api')">
                    <div class="section-title">API Configuration</div>
                    <div class="section-subtitle">Manage external service connections</div>
                </div>
                <div class="section-content" id="api">
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">OpenAI API Key</div>
                            <div class="setting-description">Required for AI chat functionality</div>
                        </div>
                        <div class="setting-control">
                            <input type="password" class="form-input" id="openaiKey" placeholder="Enter API key">
                            <button class="btn" onclick="saveApiKey('openai')">Save</button>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Home Assistant URL</div>
                            <div class="setting-description">Your Home Assistant instance URL</div>
                        </div>
                        <div class="setting-control">
                            <input type="url" class="form-input" id="haUrl" placeholder="http://homeassistant.local:8123">
                            <button class="btn" onclick="saveApiKey('homeassistant')">Save</button>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Home Assistant Token</div>
                            <div class="setting-description">Long-lived access token</div>
                        </div>
                        <div class="setting-control">
                            <input type="password" class="form-input" id="haToken" placeholder="Enter token">
                            <button class="btn" onclick="saveApiKey('ha_token')">Save</button>
                        </div>
                    </div>
                    
                    <!-- N8N Settings -->
                    <div class="setting-item" style="border-top: 1px solid rgba(255, 255, 255, 0.2); padding-top: 20px; margin-top: 20px;">
                        <div class="setting-info">
                            <div class="setting-name">N8N Server URL</div>
                            <div class="setting-description">URL of your N8N instance (default: https://zoe.local:5678)</div>
                        </div>
                        <div class="setting-control">
                            <input type="url" class="form-input" id="n8nUrl" placeholder="https://zoe.local:5678">
                            <button class="btn" onclick="saveN8nSettings()">Save</button>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">N8N Username</div>
                            <div class="setting-description">Your N8N username or email</div>
                        </div>
                        <div class="setting-control">
                            <input type="text" class="form-input" id="n8nUsername" placeholder="Enter username">
                            <button class="btn" onclick="saveN8nSettings()">Save</button>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">N8N Password</div>
                            <div class="setting-description">Your N8N password</div>
                        </div>
                        <div class="setting-control">
                            <input type="password" class="form-input" id="n8nPassword" placeholder="Enter password">
                            <button class="btn" onclick="saveN8nSettings()">Save</button>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">N8N API Key</div>
                            <div class="setting-description">API key for N8N (required for API access)</div>
                        </div>
                        <div class="setting-control">
                            <input type="password" class="form-input" id="n8nApiKey" placeholder="Enter API key">
                            <button class="btn" onclick="saveN8nSettings()">Save</button>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Test Connection</div>
                            <div class="setting-description">Test your N8N connection</div>
                        </div>
                        <div class="setting-control">
                            <button class="btn" onclick="testN8nConnection()">Test</button>
                            <div id="n8nStatus" style="margin-left: 10px; font-size: 12px;"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Calendar Settings -->
            <div class="settings-section">
                <div class="section-header" onclick="toggleSection('calendar')">
                    <div class="section-title">Calendar Settings</div>
                    <div class="section-subtitle">Configure your calendar preferences and sync</div>
                </div>
                <div class="section-content" id="calendar">
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Default View</div>
                            <div class="setting-description">Choose your default calendar view</div>
                        </div>
                        <div class="setting-control">
                            <select class="form-select" id="defaultViewSelect" onchange="saveCalendarSetting('defaultView', this.value)">
                                <option value="month">Month View</option>
                                <option value="day">Day View</option>
                            </select>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Work Hours</div>
                            <div class="setting-description">Set your regular work schedule</div>
                        </div>
                        <div class="setting-control">
                            <input type="time" class="form-input" id="workStartTime" onchange="updateWorkHours()">
                            <span style="margin: 0 8px; color: #666;">to</span>
                            <input type="time" class="form-input" id="workEndTime" onchange="updateWorkHours()">
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Show All-Day Events</div>
                            <div class="setting-description">Display all-day events in day view</div>
                        </div>
                        <div class="setting-control">
                            <div class="toggle-switch" id="showAllDayToggle" onclick="toggleCalendarSetting('showAllDayEvents')">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Show Work Tasks</div>
                            <div class="setting-description">Display work-related tasks in day view</div>
                        </div>
                        <div class="setting-control">
                            <div class="toggle-switch" id="showWorkTasksToggle" onclick="toggleCalendarSetting('showWorkTasks')">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Show Personal Tasks</div>
                            <div class="setting-description">Display personal tasks in day view</div>
                        </div>
                        <div class="setting-control">
                            <div class="toggle-switch" id="showPersonalTasksToggle" onclick="toggleCalendarSetting('showPersonalTasks')">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Time Slot Interval</div>
                            <div class="setting-description">Interval between time slots (minutes)</div>
                        </div>
                        <div class="setting-control">
                            <select class="form-select" id="timeSlotInterval" onchange="saveCalendarSetting('timeSlotInterval', parseInt(this.value))">
                                <option value="30">30 minutes</option>
                                <option value="60">1 hour</option>
                                <option value="90">1.5 hours</option>
                                <option value="120">2 hours</option>
                            </select>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Google Calendar Sync</div>
                            <div class="setting-description">Sync with Google Calendar</div>
                        </div>
                        <div class="setting-control">
                            <input type="password" class="form-input" id="googleCalendarKey" placeholder="Enter Google Calendar API key">
                            <button class="btn" onclick="saveCalendarApiKey('google')">Save</button>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Outlook Calendar Sync</div>
                            <div class="setting-description">Sync with Microsoft Outlook</div>
                        </div>
                        <div class="setting-control">
                            <input type="password" class="form-input" id="outlookCalendarKey" placeholder="Enter Outlook API key">
                            <button class="btn" onclick="saveCalendarApiKey('outlook')">Save</button>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Calendar Sync Frequency</div>
                            <div class="setting-description">How often to sync with external calendars</div>
                        </div>
                        <div class="setting-control">
                            <select class="form-select" id="syncFrequency" onchange="saveCalendarSetting('syncFrequency', this.value)">
                                <option value="realtime">Real-time</option>
                                <option value="5min">Every 5 minutes</option>
                                <option value="15min">Every 15 minutes</option>
                                <option value="hourly">Every hour</option>
                                <option value="daily">Daily</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Productivity Settings -->
            <div class="settings-section">
                <div class="section-header" onclick="toggleSection('productivity')">
                    <div class="section-title">Productivity Settings</div>
                    <div class="section-subtitle">Focus timer, break reminders, and productivity tracking</div>
                </div>
                <div class="section-content" id="productivity">
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-label">Focus Timer (Pomodoro)</div>
                            <div class="setting-description">Configure your focus session duration and break intervals</div>
                        </div>
                        <div class="setting-control">
                            <div class="timer-settings">
                                <div class="timer-input-group">
                                    <label>Focus Duration (minutes):</label>
                                    <input type="number" id="focusDuration" class="form-input" value="25" min="5" max="60">
                                </div>
                                <div class="timer-input-group">
                                    <label>Short Break (minutes):</label>
                                    <input type="number" id="shortBreakDuration" class="form-input" value="5" min="1" max="30">
                                </div>
                                <div class="timer-input-group">
                                    <label>Long Break (minutes):</label>
                                    <input type="number" id="longBreakDuration" class="form-input" value="15" min="5" max="60">
                                </div>
                                <div class="timer-input-group">
                                    <label>Sessions until long break:</label>
                                    <input type="number" id="sessionsUntilLongBreak" class="form-input" value="4" min="2" max="10">
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-label">Break Reminders</div>
                            <div class="setting-description">Smart break suggestions and wellness reminders</div>
                        </div>
                        <div class="setting-control">
                            <div class="break-settings">
                                <div class="setting-toggle">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="breakRemindersEnabled" checked>
                                        <span class="toggle-slider"></span>
                                        Enable break reminders
                                    </label>
                                </div>
                                <div class="break-reminder-types">
                                    <div class="reminder-type">
                                        <label class="toggle-label">
                                            <input type="checkbox" id="stretchReminders" checked>
                                            <span class="toggle-slider"></span>
                                            Stretch reminders
                                        </label>
                                    </div>
                                    <div class="reminder-type">
                                        <label class="toggle-label">
                                            <input type="checkbox" id="waterReminders" checked>
                                            <span class="toggle-slider"></span>
                                            Water break reminders
                                        </label>
                                    </div>
                                    <div class="reminder-type">
                                        <label class="toggle-label">
                                            <input type="checkbox" id="eyeRestReminders" checked>
                                            <span class="toggle-slider"></span>
                                            Eye rest reminders
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-label">Productivity Tracking</div>
                            <div class="setting-description">Monitor your productivity patterns and insights</div>
                        </div>
                        <div class="setting-control">
                            <div class="productivity-settings">
                                <div class="setting-toggle">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="productivityTrackingEnabled" checked>
                                        <span class="toggle-slider"></span>
                                        Enable productivity tracking
                                    </label>
                                </div>
                                <div class="setting-toggle">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="timeTrackingEnabled" checked>
                                        <span class="toggle-slider"></span>
                                        Enable automatic time tracking
                                    </label>
                                </div>
                                <div class="setting-toggle">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="productivityInsightsEnabled" checked>
                                        <span class="toggle-slider"></span>
                                        Show productivity insights
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-label">Focus Session Controls</div>
                            <div class="setting-description">Quick access to focus timer and productivity tools</div>
                        </div>
                        <div class="setting-control">
                            <div class="focus-controls">
                                <button class="btn btn-primary" onclick="startFocusSession()">
                                    🎯 Start Focus Session
                                </button>
                                <button class="btn btn-secondary" onclick="viewProductivityAnalytics()">
                                    📊 View Analytics
                                </button>
                                <button class="btn btn-secondary" onclick="configureBreakReminders()">
                                    ⏰ Configure Reminders
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-label">Productivity Analytics</div>
                            <div class="setting-description">View your productivity metrics and insights</div>
                        </div>
                        <div class="setting-control">
                            <div class="analytics-preview" id="analyticsPreview">
                                <div class="analytics-loading">Loading analytics...</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Time and Language Settings -->
            <div class="settings-section">
                <div class="section-header" onclick="toggleSection('time-location')">
                    <div class="section-title">Time and language</div>
                    <div class="section-subtitle">Configure time and location preferences</div>
                </div>
                <div class="section-content" id="time-location">
                    <!-- Current Time Display -->
                    <div class="current-time-display">
                        <div class="current-time-label">Current time</div>
                        <div class="current-time-value" id="currentTimeDisplay">Loading...</div>
                        <div class="current-date-value" id="currentDateDisplay"></div>
                    </div>

                    <!-- Set Time Automatically -->
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Set automatically</div>
                            <div class="setting-description">Use network time</div>
                        </div>
                        <div class="setting-control">
                            <div class="toggle-switch" id="autoTimeToggle" onclick="toggleAutoTime()">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Time Format (only shown when auto-time is off) -->
                    <div class="setting-item" id="timeFormatItem" style="display: none;">
                        <div class="setting-info">
                            <div class="setting-name">24-hour time</div>
                        </div>
                        <div class="setting-control">
                            <div class="toggle-switch" id="twentyFourHourToggle" onclick="toggleTwentyFourHour()">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Date Format -->
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Date format</div>
                        </div>
                        <div class="setting-control">
                            <select class="form-select" id="dateFormatSelect" onchange="updateDateFormat(this.value)">
                                <option value="DD-MM-YYYY">DD/MM/YYYY</option>
                                <option value="MM-DD-YYYY">MM/DD/YYYY</option>
                                <option value="YYYY-MM-DD">YYYY-MM-DD</option>
                            </select>
                        </div>
                    </div>

                    <!-- Time Zone Section -->
                    <div class="setting-subsection">
                        <div class="subsection-title">Time Zone</div>
                        
                        <!-- Set Time Zone Automatically -->
                        <div class="setting-item">
                            <div class="setting-info">
                                <div class="setting-name">Set automatically</div>
                                <div class="setting-description">Use current location</div>
                            </div>
                            <div class="setting-control">
                                <div class="toggle-switch" id="autoTimezoneToggle" onclick="toggleAutoTimezone()">
                                    <div class="toggle-slider"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Manual Time Zone Selection -->
                        <div class="setting-item" id="timezoneItem" style="display: none;">
                            <div class="setting-info">
                                <div class="setting-name">Time zone</div>
                                <div class="setting-description" id="timezoneDescription">Select your time zone</div>
                            </div>
                            <div class="setting-control">
                                <select class="form-select" id="timezoneSelect" onchange="updateTimezone(this.value)">
                                    <option value="UTC">Loading timezones...</option>
                                </select>
                            </div>
                        </div>

                        <!-- Location Search -->
                        <div class="setting-item" id="locationItem">
                            <div class="setting-info">
                                <div class="setting-name">Location</div>
                                <div class="setting-description" id="currentLocationDesc">Tap to set your location</div>
                            </div>
                            <div class="setting-control">
                                <button class="btn btn-outline" onclick="openSmartLocationSearch()">
                                    <span id="locationButtonText">Set Location</span>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Language Section -->
                    <div class="setting-subsection">
                        <div class="subsection-title">Language</div>
                        
                        <div class="setting-item">
                            <div class="setting-info">
                                <div class="setting-name">Language</div>
                            </div>
                            <div class="setting-control">
                                <select class="form-select" id="languageSelect" onchange="updateLanguage(this.value)">
                                    <option value="en-US">English (United States)</option>
                                    <option value="en-GB">English (United Kingdom)</option>
                                    <option value="en-AU">English (Australia)</option>
                                    <option value="es">Español</option>
                                    <option value="fr">Français</option>
                                    <option value="de">Deutsch</option>
                                    <option value="ja">日本語</option>
                                    <option value="zh">中文</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Data Management -->
            <div class="settings-section">
                <div class="section-header" onclick="toggleSection('data')">
                    <div class="section-title">Data Management</div>
                    <div class="section-subtitle">Backup and export your data</div>
                </div>
                <div class="section-content" id="data">
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Export Data</div>
                            <div class="setting-description">Download all your data as JSON</div>
                        </div>
                        <div class="setting-control">
                            <button class="btn" onclick="exportData()">Export</button>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Import Data</div>
                            <div class="setting-description">Restore from a backup file</div>
                        </div>
                        <div class="setting-control">
                            <input type="file" id="importFile" accept=".json" style="display: none;">
                            <button class="btn" onclick="document.getElementById('importFile').click()">Import</button>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Clear All Data</div>
                            <div class="setting-description">⚠️ This will delete all your data permanently</div>
                        </div>
                        <div class="setting-control">
                            <button class="btn danger" onclick="clearAllData()">Clear All</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- System Information -->
            <div class="settings-section">
                <div class="section-header" onclick="toggleSection('system')">
                    <div class="section-title">System Information</div>
                    <div class="section-subtitle">Device and service status</div>
                </div>
                <div class="section-content" id="system">
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">API Status</div>
                            <div class="setting-description">Backend service connectivity</div>
                        </div>
                        <div class="setting-control">
                            <span class="status-indicator" id="apiStatusIndicator"></span>
                            <span id="apiStatusText">Checking...</span>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Version</div>
                            <div class="setting-description">Current Zoe version</div>
                        </div>
                        <div class="setting-control">
                            <span id="versionText">1.0.0</span>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Uptime</div>
                            <div class="setting-description">System uptime</div>
                        </div>
                        <div class="setting-control">
                            <span id="uptimeText">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Intelligence & Proactivity -->
            <div class="settings-section">
                <div class="section-header" onclick="toggleSection('intelligence')">
                    <div class="section-title">🧠 Intelligence & Proactivity</div>
                    <div class="section-subtitle">Control proactive suggestions and intelligent features</div>
                </div>
                <div class="section-content" id="intelligence">
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Proactive Suggestions</div>
                            <div class="setting-description">Let Zoe suggest actions based on patterns</div>
                        </div>
                        <div class="setting-control">
                            <label class="toggle-label">
                                <input type="checkbox" id="proactive-enabled">
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Relationship Monitoring</div>
                            <div class="setting-description">Get reminders when you haven't contacted someone</div>
                        </div>
                        <div class="setting-control">
                            <label class="toggle-label">
                                <input type="checkbox" id="relationship-monitoring">
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Task Suggestions</div>
                            <div class="setting-description">Suggest task breakdowns and schedules</div>
                        </div>
                        <div class="setting-control">
                            <label class="toggle-label">
                                <input type="checkbox" id="task-suggestions">
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Calendar Insights</div>
                            <div class="setting-description">Detect patterns and recommend times</div>
                        </div>
                        <div class="setting-control">
                            <label class="toggle-label">
                                <input type="checkbox" id="calendar-insights">
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Learning</div>
                            <div class="setting-description">Improve suggestions based on feedback</div>
                        </div>
                        <div class="setting-control">
                            <label class="toggle-label">
                                <input type="checkbox" id="learning-enabled">
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Zoe Orb</div>
                            <div class="setting-description">Show Zoe orb and real-time intelligence</div>
                        </div>
                        <div class="setting-control">
                            <label class="toggle-label">
                                <input type="checkbox" id="show-orb">
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-name">Do Not Disturb</div>
                            <div class="setting-description">Pause proactive suggestions temporarily</div>
                        </div>
                        <div class="setting-control">
                            <label class="toggle-label">
                                <input type="checkbox" id="do-not-disturb">
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                    </div>
                    <div style="display:flex; gap:10px;">
                        <button class="btn" onclick="saveIntelligenceSettingsUI()">Save</button>
                        <button class="btn" onclick="loadIntelligenceSettingsUI()">Reload</button>
                        <button class="btn" onclick="triggerRelationshipCheck()">Run Relationship Check</button>
                    </div>
                </div>
            </div>

            <script>
            async function loadIntelligenceSettingsUI(){
                try{
                    const res = await fetch('/api/settings/intelligence');
                    if(!res.ok) return;
                    const data = await res.json();
                    const s = data.settings || {};
                    document.getElementById('proactive-enabled').checked = !!s.proactive_enabled;
                    document.getElementById('relationship-monitoring').checked = !!s.relationship_monitoring;
                    document.getElementById('task-suggestions').checked = !!s.task_suggestions;
                    document.getElementById('calendar-insights').checked = !!s.calendar_insights;
                    document.getElementById('learning-enabled').checked = !!s.learning_enabled;
                    document.getElementById('show-orb').checked = !!s.show_orb;
                    document.getElementById('do-not-disturb').checked = !!s.do_not_disturb;
                }catch(e){console.warn('Load intelligence settings failed', e)}
            }
            async function saveIntelligenceSettingsUI(){
                try{
                    const body = {
                        proactive_enabled: document.getElementById('proactive-enabled').checked,
                        relationship_monitoring: document.getElementById('relationship-monitoring').checked,
                        task_suggestions: document.getElementById('task-suggestions').checked,
                        calendar_insights: document.getElementById('calendar-insights').checked,
                        learning_enabled: document.getElementById('learning-enabled').checked,
                        show_orb: document.getElementById('show-orb').checked,
                        do_not_disturb: document.getElementById('do-not-disturb').checked
                    };
                    const res = await fetch('/api/settings/intelligence', {
                        method: 'PUT', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(body)
                    });
                    if(res.ok){
                        alert('Saved');
                    }
                }catch(e){console.warn('Save intelligence settings failed', e)}
            }
            async function triggerRelationshipCheck(){
                try{ await fetch('/api/proactive/relationship-check', {method:'POST'}); }catch(e){}
            }
            document.addEventListener('DOMContentLoaded', loadIntelligenceSettingsUI);
            </script>
        </div>
    </div>

    <!-- More Overlay -->
    <div class="more-overlay" id="moreOverlay">
        <div class="more-content">
            <button class="more-close" onclick="closeMoreOverlay()">×</button>
            <div class="more-header">
                <h2 class="more-title">More Options</h2>
            </div>
            <div class="more-grid">
                <div class="more-item" onclick="navigateToPage('memories.html')">
                    <div class="more-item-icon">🧠</div>
                    <div class="more-item-label">Memories</div>
                </div>
                <div class="more-item" onclick="navigateToPage('workflows.html')">
                    <div class="more-item-icon">⚡</div>
                    <div class="more-item-label">Workflows</div>
                </div>
                <div class="more-item" onclick="alert('Coming soon!')">
                    <div class="more-item-icon">📊</div>
                    <div class="more-item-label">Analytics</div>
                </div>
                <div class="more-item" onclick="alert('Coming soon!')">
                    <div class="more-item-icon">🔍</div>
                    <div class="more-item-label">Search</div>
                </div>
            </div>
        </div>
    </div>

    <script src="js/common.js"></script>
    <script>
        // Toggle section visibility
        function toggleSection(sectionId) {
            const content = document.getElementById(sectionId);
            const isActive = content.classList.contains('active');
            
            // Close all sections
            document.querySelectorAll('.section-content').forEach(section => {
                section.classList.remove('active');
            });
            
            // Open clicked section if it wasn't active
            if (!isActive) {
                content.classList.add('active');
            }
        }

        // Toggle setting
        function toggleSetting(settingId) {
            const toggle = document.getElementById(settingId + 'Toggle');
            const isActive = toggle.classList.contains('active');
            
            toggle.classList.toggle('active');
            
            // Save setting
            saveSetting(settingId, !isActive);
        }

        // Save setting
        async function saveSetting(key, value) {
            try {
                await apiRequest('/settings', {
                    method: 'PUT',
                    body: JSON.stringify({ [key]: value })
                });
                showNotification('Setting saved', 'success');
            } catch (error) {
                console.error('Failed to save setting:', error);
                showNotification('Failed to save setting', 'error');
            }
        }

        // Save API key
        async function saveApiKey(key) {
            const input = document.getElementById(key === 'openai' ? 'openaiKey' : 
                          key === 'homeassistant' ? 'haUrl' : 'haToken');
            const value = input.value.trim();
            
            if (!value) {
                showNotification('Please enter a value', 'error');
                return;
            }
            
            try {
                await apiRequest('/settings/apikeys', {
                    method: 'POST',
                    body: JSON.stringify({ [key]: value })
                });
                showNotification('API key saved', 'success');
                input.value = '';
            } catch (error) {
                console.error('Failed to save API key:', error);
                showNotification('Failed to save API key', 'error');
            }
        }

        // Export data
        async function exportData() {
            try {
                const response = await apiRequest('/settings/export');
                const blob = new Blob([JSON.stringify(response, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `zoe-backup-${new Date().toISOString().split('T')[0]}.json`;
                a.click();
                URL.revokeObjectURL(url);
                showNotification('Data exported', 'success');
            } catch (error) {
                console.error('Failed to export data:', error);
                showNotification('Failed to export data', 'error');
            }
        }

        // Import data
        document.getElementById('importFile').addEventListener('change', async function(e) {
            const file = e.target.files[0];
            if (!file) return;
            
            try {
                const text = await file.text();
                const data = JSON.parse(text);
                
                await apiRequest('/settings/import', {
                    method: 'POST',
                    body: JSON.stringify(data)
                });
                
                showNotification('Data imported successfully', 'success');
                // Reload page to reflect changes
                setTimeout(() => window.location.reload(), 1000);
            } catch (error) {
                console.error('Failed to import data:', error);
                showNotification('Failed to import data', 'error');
            }
        });

        // Clear all data
        async function clearAllData() {
            if (!confirm('Are you sure? This will permanently delete all your data and cannot be undone.')) {
                return;
            }
            
            if (!confirm('This action is irreversible. Type "DELETE" to confirm.')) {
                return;
            }
            
            try {
                await apiRequest('/settings/clear', {
                    method: 'POST'
                });
                showNotification('All data cleared', 'success');
                // Reload page
                setTimeout(() => window.location.reload(), 1000);
            } catch (error) {
                console.error('Failed to clear data:', error);
                showNotification('Failed to clear data', 'error');
            }
        }

        // Load settings
        async function loadSettings() {
            try {
                const response = await apiRequest('/settings/');
                const settings = response.settings || {};
                
                // Apply settings to UI
                if (settings.theme) {
                    document.getElementById('themeSelect').value = settings.theme;
                }
                if (settings.language) {
                    document.getElementById('languageSelect').value = settings.language;
                }
                if (settings.notifications !== undefined) {
                    const toggle = document.getElementById('notificationsToggle');
                    if (settings.notifications) {
                        toggle.classList.add('active');
                    }
                }
            } catch (error) {
                console.error('Failed to load settings:', error);
            }
        }

        // Update system status
        async function updateSystemStatus() {
            try {
                const response = await apiRequest('/system/status');
                const status = response.status;
                
                const indicator = document.getElementById('apiStatusIndicator');
                const text = document.getElementById('apiStatusText');
                
                if (status.api_online) {
                    indicator.className = 'status-indicator status-online';
                    text.textContent = 'Online';
                } else {
                    indicator.className = 'status-indicator status-offline';
                    text.textContent = 'Offline';
                }
                
                if (status.version) {
                    document.getElementById('versionText').textContent = status.version;
                }
                if (status.uptime) {
                    document.getElementById('uptimeText').textContent = status.uptime;
                }
            } catch (error) {
                console.error('Failed to load system status:', error);
                const indicator = document.getElementById('apiStatusIndicator');
                const text = document.getElementById('apiStatusText');
                indicator.className = 'status-indicator status-offline';
                text.textContent = 'Offline';
            }
        }

        function navigateToPage(page) {
            window.location.href = page;
        }

        // Calendar settings functions
        let calendarSettings = {
            workHours: { start: '09:00', end: '17:00' },
            defaultView: 'month',
            showWorkTasks: true,
            showPersonalTasks: true,
            showAllDayEvents: true,
            timeSlotInterval: 60,
            syncFrequency: 'hourly'
        };

        async function loadCalendarSettings() {
            try {
                const response = await apiRequest('/settings/calendar');
                if (response && response.settings) {
                    calendarSettings = { ...calendarSettings, ...response.settings };
                }
                applyCalendarSettingsToUI();
            } catch (error) {
                console.log('Using default calendar settings');
                applyCalendarSettingsToUI();
            }
        }

        function applyCalendarSettingsToUI() {
            // Apply settings to UI elements
            if (document.getElementById('defaultViewSelect')) {
                document.getElementById('defaultViewSelect').value = calendarSettings.defaultView;
            }
            if (document.getElementById('workStartTime')) {
                document.getElementById('workStartTime').value = calendarSettings.workHours.start;
            }
            if (document.getElementById('workEndTime')) {
                document.getElementById('workEndTime').value = calendarSettings.workHours.end;
            }
            if (document.getElementById('timeSlotInterval')) {
                document.getElementById('timeSlotInterval').value = calendarSettings.timeSlotInterval;
            }
            if (document.getElementById('syncFrequency')) {
                document.getElementById('syncFrequency').value = calendarSettings.syncFrequency;
            }

            // Apply toggle states
            updateToggleState('showAllDayToggle', calendarSettings.showAllDayEvents);
            updateToggleState('showWorkTasksToggle', calendarSettings.showWorkTasks);
            updateToggleState('showPersonalTasksToggle', calendarSettings.showPersonalTasks);
        }

        function updateToggleState(toggleId, isActive) {
            const toggle = document.getElementById(toggleId);
            if (toggle) {
                if (isActive) {
                    toggle.classList.add('active');
                } else {
                    toggle.classList.remove('active');
                }
            }
        }

        async function saveCalendarSetting(key, value) {
            calendarSettings[key] = value;
            await saveCalendarSettings();
        }

        async function toggleCalendarSetting(key) {
            calendarSettings[key] = !calendarSettings[key];
            updateToggleState(key + 'Toggle', calendarSettings[key]);
            await saveCalendarSettings();
        }

        async function updateWorkHours() {
            const startTime = document.getElementById('workStartTime').value;
            const endTime = document.getElementById('workEndTime').value;
            
            if (startTime && endTime) {
                calendarSettings.workHours = { start: startTime, end: endTime };
                await saveCalendarSettings();
            }
        }

        async function saveCalendarSettings() {
            try {
                await apiRequest('/settings/calendar', {
                    method: 'POST',
                    body: JSON.stringify({ settings: calendarSettings })
                });
                showNotification('Calendar settings saved', 'success');
            } catch (error) {
                console.error('Failed to save calendar settings:', error);
                showNotification('Failed to save calendar settings', 'error');
            }
        }

        async function saveCalendarApiKey(service) {
            const inputId = service === 'google' ? 'googleCalendarKey' : 'outlookCalendarKey';
            const input = document.getElementById(inputId);
            const value = input.value.trim();
            
            if (!value) {
                showNotification('Please enter an API key', 'error');
                return;
            }
            
            try {
                await apiRequest('/settings/calendar/api', {
                    method: 'POST',
                    body: JSON.stringify({ 
                        service: service,
                        apiKey: value 
                    })
                });
                showNotification(`${service} API key saved`, 'success');
                input.value = '';
            } catch (error) {
                console.error('Failed to save calendar API key:', error);
                showNotification('Failed to save API key', 'error');
            }
        }

        // Location management
        async function loadCurrentLocation() {
            try {
                const response = await apiRequest('/weather/location');
                const location = response;
                document.getElementById('currentLocationDesc').textContent = 
                    `${location.city}, ${location.country}`;
            } catch (error) {
                console.error('Failed to load location:', error);
                document.getElementById('currentLocationDesc').textContent = 'Location not set';
            }
        }

        async function openLocationSearch() {
            const query = prompt('Enter city name to search for:');
            if (!query) return;
            
            try {
                const response = await apiRequest(`/weather/location/search?query=${encodeURIComponent(query)}`);
                const results = response.results;
                
                if (results.length === 0) {
                    showNotification('No locations found', 'error');
                    return;
                }
                
                // Show results in a simple list
                let message = 'Select a location:\n\n';
                results.forEach((result, index) => {
                    message += `${index + 1}. ${result.name}\n`;
                });
                
                const choice = prompt(message + '\nEnter number (1-' + results.length + '):');
                const choiceIndex = parseInt(choice) - 1;
                
                if (choiceIndex >= 0 && choiceIndex < results.length) {
                    const selected = results[choiceIndex];
                    await updateLocation(selected.lat, selected.lon, selected.name.split(',')[0], selected.country);
                }
            } catch (error) {
                console.error('Failed to search locations:', error);
                showNotification('Failed to search locations', 'error');
            }
        }

        async function updateLocation(lat, lon, city, country) {
            try {
                await apiRequest('/weather/location', {
                    method: 'POST',
                    body: JSON.stringify({
                        latitude: lat,
                        longitude: lon,
                        city: city,
                        country: country
                    })
                });
                
                showNotification('Location updated successfully', 'success');
                loadCurrentLocation();
            } catch (error) {
                console.error('Failed to update location:', error);
                showNotification('Failed to update location', 'error');
            }
        }

        // Productivity Settings Functions
        let productivitySettings = {
            focusDuration: 25,
            shortBreakDuration: 5,
            longBreakDuration: 15,
            sessionsUntilLongBreak: 4,
            breakRemindersEnabled: true,
            stretchReminders: true,
            waterReminders: true,
            eyeRestReminders: true,
            productivityTrackingEnabled: true,
            timeTrackingEnabled: true,
            productivityInsightsEnabled: true
        };

        async function loadProductivitySettings() {
            try {
                // Load settings from localStorage or API
                const saved = localStorage.getItem('productivitySettings');
                if (saved) {
                    productivitySettings = { ...productivitySettings, ...JSON.parse(saved) };
                }
                
                // Update UI with loaded settings
                document.getElementById('focusDuration').value = productivitySettings.focusDuration;
                document.getElementById('shortBreakDuration').value = productivitySettings.shortBreakDuration;
                document.getElementById('longBreakDuration').value = productivitySettings.longBreakDuration;
                document.getElementById('sessionsUntilLongBreak').value = productivitySettings.sessionsUntilLongBreak;
                document.getElementById('breakRemindersEnabled').checked = productivitySettings.breakRemindersEnabled;
                document.getElementById('stretchReminders').checked = productivitySettings.stretchReminders;
                document.getElementById('waterReminders').checked = productivitySettings.waterReminders;
                document.getElementById('eyeRestReminders').checked = productivitySettings.eyeRestReminders;
                document.getElementById('productivityTrackingEnabled').checked = productivitySettings.productivityTrackingEnabled;
                document.getElementById('timeTrackingEnabled').checked = productivitySettings.timeTrackingEnabled;
                document.getElementById('productivityInsightsEnabled').checked = productivitySettings.productivityInsightsEnabled;
                
                // Load analytics preview
                loadProductivityAnalytics();
            } catch (error) {
                console.error('Failed to load productivity settings:', error);
            }
        }

        function saveProductivitySettings() {
            try {
                // Update settings object
                productivitySettings.focusDuration = parseInt(document.getElementById('focusDuration').value);
                productivitySettings.shortBreakDuration = parseInt(document.getElementById('shortBreakDuration').value);
                productivitySettings.longBreakDuration = parseInt(document.getElementById('longBreakDuration').value);
                productivitySettings.sessionsUntilLongBreak = parseInt(document.getElementById('sessionsUntilLongBreak').value);
                productivitySettings.breakRemindersEnabled = document.getElementById('breakRemindersEnabled').checked;
                productivitySettings.stretchReminders = document.getElementById('stretchReminders').checked;
                productivitySettings.waterReminders = document.getElementById('waterReminders').checked;
                productivitySettings.eyeRestReminders = document.getElementById('eyeRestReminders').checked;
                productivitySettings.productivityTrackingEnabled = document.getElementById('productivityTrackingEnabled').checked;
                productivitySettings.timeTrackingEnabled = document.getElementById('timeTrackingEnabled').checked;
                productivitySettings.productivityInsightsEnabled = document.getElementById('productivityInsightsEnabled').checked;
                
                // Save to localStorage
                localStorage.setItem('productivitySettings', JSON.stringify(productivitySettings));
                
                showNotification('Productivity settings saved', 'success');
            } catch (error) {
                console.error('Failed to save productivity settings:', error);
                showNotification('Failed to save settings', 'error');
            }
        }

        async function startFocusSession() {
            try {
                const taskText = prompt('What are you focusing on?', 'Focus session');
                if (!taskText) return;
                
                const response = await apiRequest('/lists/focus-session', {
                    method: 'POST',
                    body: JSON.stringify({
                        task_text: taskText,
                        duration_minutes: productivitySettings.focusDuration,
                        break_duration_minutes: productivitySettings.shortBreakDuration,
                        session_type: 'focus'
                    })
                });
                
                if (response.id) {
                    showNotification(`Focus session started! Duration: ${productivitySettings.focusDuration} minutes`, 'success');
                    // You could open a focus timer modal here
                    openFocusTimerModal(response.id, taskText);
                }
            } catch (error) {
                console.error('Failed to start focus session:', error);
                showNotification('Failed to start focus session', 'error');
            }
        }

        function openFocusTimerModal(sessionId, taskText) {
            // Create a simple focus timer modal
            const modal = document.createElement('div');
            modal.className = 'focus-timer-modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>🎯 Focus Session</h3>
                        <button onclick="closeFocusTimerModal()" class="close-btn">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="task-text">${taskText}</div>
                        <div class="timer-display" id="timerDisplay">${productivitySettings.focusDuration}:00</div>
                        <div class="timer-controls">
                            <button onclick="pauseTimer()" class="btn btn-secondary">Pause</button>
                            <button onclick="stopTimer(${sessionId})" class="btn btn-danger">Stop</button>
                        </div>
                    </div>
                </div>
            `;
            
            // Add modal styles
            const style = document.createElement('style');
            style.textContent = `
                .focus-timer-modal {
                    position: fixed; top: 0; left: 0; right: 0; bottom: 0;
                    background: rgba(0, 0, 0, 0.8); display: flex;
                    align-items: center; justify-content: center; z-index: 1000;
                }
                .modal-content {
                    background: white; border-radius: 12px; padding: 20px;
                    max-width: 400px; width: 90%; text-align: center;
                }
                .modal-header {
                    display: flex; justify-content: space-between; align-items: center;
                    margin-bottom: 20px;
                }
                .close-btn {
                    background: none; border: none; font-size: 24px; cursor: pointer;
                }
                .task-text {
                    font-size: 18px; margin-bottom: 20px; color: #333;
                }
                .timer-display {
                    font-size: 48px; font-weight: bold; color: #7B61FF;
                    margin-bottom: 20px;
                }
                .timer-controls {
                    display: flex; gap: 10px; justify-content: center;
                }
            `;
            document.head.appendChild(style);
            document.body.appendChild(modal);
            
            // Start timer
            startTimer(sessionId, productivitySettings.focusDuration);
        }

        function closeFocusTimerModal() {
            const modal = document.querySelector('.focus-timer-modal');
            if (modal) modal.remove();
        }

        let timerInterval;
        let remainingTime = 0;

        function startTimer(sessionId, durationMinutes) {
            remainingTime = durationMinutes * 60;
            updateTimerDisplay();
            
            timerInterval = setInterval(() => {
                remainingTime--;
                updateTimerDisplay();
                
                if (remainingTime <= 0) {
                    clearInterval(timerInterval);
                    completeFocusSession(sessionId);
                }
            }, 1000);
        }

        function updateTimerDisplay() {
            const minutes = Math.floor(remainingTime / 60);
            const seconds = remainingTime % 60;
            const display = document.getElementById('timerDisplay');
            if (display) {
                display.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            }
        }

        async function completeFocusSession(sessionId) {
            try {
                await apiRequest(`/lists/focus-session/${sessionId}/complete`, {
                    method: 'PUT',
                    body: JSON.stringify({ productivity_score: 8.5 })
                });
                
                showNotification('Focus session completed! Great work! 🎉', 'success');
                closeFocusTimerModal();
                loadProductivityAnalytics(); // Refresh analytics
            } catch (error) {
                console.error('Failed to complete focus session:', error);
            }
        }

        function stopTimer(sessionId) {
            clearInterval(timerInterval);
            completeFocusSession(sessionId);
        }

        function pauseTimer() {
            clearInterval(timerInterval);
            // Could add pause/resume functionality here
        }

        async function loadProductivityAnalytics() {
            try {
                const response = await apiRequest('/lists/productivity-analytics');
                const analytics = response;
                
                const preview = document.getElementById('analyticsPreview');
                if (preview) {
                    preview.innerHTML = `
                        <div class="analytics-metrics">
                            <div class="metric-item">
                                <div class="metric-value">${analytics.total_focus_time || 0}</div>
                                <div class="metric-label">Focus Minutes</div>
                            </div>
                            <div class="metric-item">
                                <div class="metric-value">${analytics.completed_tasks || 0}</div>
                                <div class="metric-label">Tasks Done</div>
                            </div>
                            <div class="metric-item">
                                <div class="metric-value">${analytics.productivity_score || 0}</div>
                                <div class="metric-label">Score</div>
                            </div>
                            <div class="metric-item">
                                <div class="metric-value">${analytics.focus_streak || 0}</div>
                                <div class="metric-label">Streak</div>
                            </div>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Failed to load productivity analytics:', error);
                const preview = document.getElementById('analyticsPreview');
                if (preview) {
                    preview.innerHTML = '<div class="analytics-loading">Failed to load analytics</div>';
                }
            }
        }

        function viewProductivityAnalytics() {
            // Could open a detailed analytics page or modal
            showNotification('Opening productivity analytics...', 'info');
            // window.open('analytics.html', '_blank');
        }

        function configureBreakReminders() {
            // Focus on the break reminders section
            const section = document.getElementById('productivity');
            if (section) {
                section.classList.add('active');
                section.scrollIntoView({ behavior: 'smooth' });
            }
        }

        // Add event listeners for productivity settings
        function addProductivityEventListeners() {
            // Timer settings
            document.getElementById('focusDuration').addEventListener('change', saveProductivitySettings);
            document.getElementById('shortBreakDuration').addEventListener('change', saveProductivitySettings);
            document.getElementById('longBreakDuration').addEventListener('change', saveProductivitySettings);
            document.getElementById('sessionsUntilLongBreak').addEventListener('change', saveProductivitySettings);
            
            // Break reminders
            document.getElementById('breakRemindersEnabled').addEventListener('change', saveProductivitySettings);
            document.getElementById('stretchReminders').addEventListener('change', saveProductivitySettings);
            document.getElementById('waterReminders').addEventListener('change', saveProductivitySettings);
            document.getElementById('eyeRestReminders').addEventListener('change', saveProductivitySettings);
            
            // Productivity tracking
            document.getElementById('productivityTrackingEnabled').addEventListener('change', saveProductivitySettings);
            document.getElementById('timeTrackingEnabled').addEventListener('change', saveProductivitySettings);
            document.getElementById('productivityInsightsEnabled').addEventListener('change', saveProductivitySettings);
        }

        // Time and Language Management
        let timeLanguageSettings = {
            timezone: "UTC",
            twentyFourHour: false,
            dateFormat: "DD-MM-YYYY",
            ntpServer: "automatic",
            language: "en-US",
            location: null,
            autoLocationDetection: false,
            autoTimeSync: true,
            autoTimezoneSync: true
        };

        // Live time display
        let timeUpdateInterval = null;

        async function loadTimeLanguageSettings() {
            try {
                const response = await apiRequest('/settings/time-location');
                if (response && response.settings) {
                    timeLanguageSettings = { ...timeLanguageSettings, ...response.settings };
                }
                
                // Apply smart defaults if no settings exist
                applySmartDefaults();
                
                applyTimeLanguageSettingsToUI();
                loadAvailableTimezones();
            } catch (error) {
                console.error('Failed to load time language settings:', error);
                applySmartDefaults();
                applyTimeLanguageSettingsToUI();
                loadAvailableTimezones();
            }
        }

        function applySmartDefaults() {
            // Smart timezone detection based on browser
            if (!timeLanguageSettings.timezone || timeLanguageSettings.timezone === 'UTC') {
                try {
                    timeLanguageSettings.timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
                } catch (e) {
                    timeLanguageSettings.timezone = 'UTC';
                }
            }

            // Smart language detection
            if (!timeLanguageSettings.language || timeLanguageSettings.language === 'en-US') {
                const browserLang = navigator.language || navigator.userLanguage;
                timeLanguageSettings.language = browserLang;
            }

            // Smart date format based on locale
            if (!timeLanguageSettings.dateFormat || timeLanguageSettings.dateFormat === 'DD-MM-YYYY') {
                const locale = timeLanguageSettings.language || 'en-US';
                if (locale.includes('en-US')) {
                    timeLanguageSettings.dateFormat = 'MM-DD-YYYY';
                } else if (locale.includes('en-GB') || locale.includes('en-AU')) {
                    timeLanguageSettings.dateFormat = 'DD-MM-YYYY';
                } else {
                    timeLanguageSettings.dateFormat = 'YYYY-MM-DD';
                }
            }

            // Smart 24-hour format based on locale
            if (timeLanguageSettings.twentyFourHour === undefined) {
                const locale = timeLanguageSettings.language || 'en-US';
                // Most European countries use 24-hour format
                const uses24Hour = ['de', 'fr', 'es', 'it', 'nl', 'sv', 'no', 'da', 'fi', 'ru', 'pl', 'cs', 'sk', 'hu', 'bg', 'hr', 'sl', 'et', 'lv', 'lt'].some(lang => locale.includes(lang));
                timeLanguageSettings.twentyFourHour = uses24Hour;
            }
        }

        function applyTimeLanguageSettingsToUI() {
            // Update auto time sync toggle
            updateToggleState('autoTimeToggle', timeLanguageSettings.autoTimeSync);

            // Update auto timezone sync toggle
            updateToggleState('autoTimezoneToggle', timeLanguageSettings.autoTimezoneSync);

            // Show/hide manual controls based on auto settings
            toggleManualTimeControls();
            toggleManualTimezoneControls();

            // Update timezone select
            if (document.getElementById('timezoneSelect')) {
                document.getElementById('timezoneSelect').value = timeLanguageSettings.timezone;
            }

            // Update 24-hour toggle
            updateToggleState('twentyFourHourToggle', timeLanguageSettings.twentyFourHour);

            // Update date format
            if (document.getElementById('dateFormatSelect')) {
                document.getElementById('dateFormatSelect').value = timeLanguageSettings.dateFormat;
            }

            // Update language
            if (document.getElementById('languageSelect')) {
                document.getElementById('languageSelect').value = timeLanguageSettings.language;
            }

            // Update location display
            updateLocationDisplay();

            // Start live time display
            startLiveTimeDisplay();
        }

        function toggleManualTimeControls() {
            const timeFormatItem = document.getElementById('timeFormatItem');
            if (timeLanguageSettings.autoTimeSync) {
                timeFormatItem.style.display = 'none';
            } else {
                timeFormatItem.style.display = 'block';
            }
        }

        function toggleManualTimezoneControls() {
            const timezoneItem = document.getElementById('timezoneItem');
            if (timeLanguageSettings.autoTimezoneSync) {
                timezoneItem.style.display = 'none';
            } else {
                timezoneItem.style.display = 'block';
            }
        }

        function updateLocationDisplay() {
            const locationDesc = document.getElementById('currentLocationDesc');
            const locationButton = document.getElementById('locationButtonText');
            
            if (timeLanguageSettings.location) {
                const location = timeLanguageSettings.location;
                const displayName = `${location.city || 'Unknown'}, ${location.country || 'Unknown'}`;
                locationDesc.textContent = displayName;
                locationButton.textContent = 'Change Location';
            } else {
                locationDesc.textContent = 'Tap to set your location';
                locationButton.textContent = 'Set Location';
            }
        }

        function startLiveTimeDisplay() {
            // Clear existing interval
            if (timeUpdateInterval) {
                clearInterval(timeUpdateInterval);
            }

            // Update time immediately
            updateCurrentTimeDisplay();

            // Update every second
            timeUpdateInterval = setInterval(updateCurrentTimeDisplay, 1000);
        }

        function updateCurrentTimeDisplay() {
            const now = new Date();
            const timeDisplay = document.getElementById('currentTimeDisplay');
            const dateDisplay = document.getElementById('currentDateDisplay');

            if (timeDisplay && dateDisplay) {
                // Format time based on 24-hour setting
                const timeOptions = {
                    hour12: !timeLanguageSettings.twentyFourHour,
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                };
                timeDisplay.textContent = now.toLocaleTimeString('en-US', timeOptions);

                // Format date based on date format setting
                const date = now.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit'
                });
                
                let formattedDate = date;
                switch (timeLanguageSettings.dateFormat) {
                    case 'DD-MM-YYYY':
                        formattedDate = date.split('/').reverse().join('/');
                        break;
                    case 'MM-DD-YYYY':
                        formattedDate = date;
                        break;
                    case 'YYYY-MM-DD':
                        formattedDate = date.split('/').reverse().join('-');
                        break;
                }
                
                dateDisplay.textContent = formattedDate;
            }
        }

        async function loadAvailableTimezones() {
            try {
                const response = await apiRequest('/settings/time-location/timezones');
                const timezones = response.timezones || [];
                
                const select = document.getElementById('timezoneSelect');
                if (select && timezones.length > 0) {
                    select.innerHTML = '';
                    
                    // Get browser timezone for smart suggestion
                    const browserTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
                    
                    // Add smart suggestions at the top
                    const smartSuggestions = getSmartTimezoneSuggestions(browserTimezone, timezones);
                    if (smartSuggestions.length > 0) {
                        const suggestionGroup = document.createElement('optgroup');
                        suggestionGroup.label = '📍 Suggested';
                        
                        smartSuggestions.forEach(tz => {
                            const option = document.createElement('option');
                            option.value = tz;
                            option.textContent = `⭐ ${tz}`;
                            suggestionGroup.appendChild(option);
                        });
                        
                        select.appendChild(suggestionGroup);
                    }
                    
                    // Add regular timezones
                    timezones.forEach(tz => {
                        const option = document.createElement('option');
                        option.value = tz;
                        option.textContent = tz;
                        select.appendChild(option);
                    });
                    
                    select.value = timeLanguageSettings.timezone;
                }
            } catch (error) {
                console.error('Failed to load timezones:', error);
            }
        }

        function getSmartTimezoneSuggestions(browserTimezone, allTimezones) {
            const suggestions = [];
            
            // Add browser timezone as first suggestion
            if (allTimezones.includes(browserTimezone)) {
                suggestions.push(browserTimezone);
            }
            
            // Add common timezones
            const commonTimezones = [
                'America/New_York',
                'America/Los_Angeles', 
                'Europe/London',
                'Europe/Paris',
                'Asia/Tokyo',
                'Asia/Shanghai',
                'Australia/Sydney'
            ];
            
            commonTimezones.forEach(tz => {
                if (allTimezones.includes(tz) && !suggestions.includes(tz)) {
                    suggestions.push(tz);
                }
            });
            
            return suggestions.slice(0, 3); // Limit to 3 suggestions
        }

        // Simple setting functions
        async function toggleTwentyFourHour() {
            const toggle = document.getElementById('twentyFourHourToggle');
            const isActive = toggle.classList.contains('active');
            
            timeLanguageSettings.twentyFourHour = !isActive;
            updateToggleState('twentyFourHourToggle', timeLanguageSettings.twentyFourHour);
            
            try {
                await saveTimeLanguageSettings();
                showNotification('24-hour time setting updated', 'success');
            } catch (error) {
                console.error('Failed to update 24-hour setting:', error);
                showNotification('Failed to update setting', 'error');
            }
        }

        async function updateDateFormat(format) {
            timeLanguageSettings.dateFormat = format;
            
            try {
                await saveTimeLanguageSettings();
                showNotification('Date format updated', 'success');
            } catch (error) {
                console.error('Failed to update date format:', error);
                showNotification('Failed to update date format', 'error');
            }
        }

        async function updateNtpServer(server) {
            timeLanguageSettings.ntpServer = server;
            
            try {
                await saveTimeLanguageSettings();
                showNotification('NTP server updated', 'success');
            } catch (error) {
                console.error('Failed to update NTP server:', error);
                showNotification('Failed to update NTP server', 'error');
            }
        }

        async function updateTimezone(timezone) {
            timeLanguageSettings.timezone = timezone;
            
            try {
                await saveTimeLanguageSettings();
                showNotification('Timezone updated', 'success');
            } catch (error) {
                console.error('Failed to update timezone:', error);
                showNotification('Failed to update timezone', 'error');
            }
        }

        async function updateLanguage(language) {
            timeLanguageSettings.language = language;
            
            try {
                await saveTimeLanguageSettings();
                showNotification('Language updated', 'success');
            } catch (error) {
                console.error('Failed to update language:', error);
                showNotification('Failed to update language', 'error');
            }
        }

        async function saveTimeLanguageSettings() {
            try {
                await apiRequest('/settings/time-location', {
                    method: 'POST',
                    body: JSON.stringify(timeLanguageSettings)
                });
            } catch (error) {
                console.error('Failed to save time language settings:', error);
                throw error;
            }
        }

        // Smart toggle functions
        async function toggleAutoTime() {
            const toggle = document.getElementById('autoTimeToggle');
            const isActive = toggle.classList.contains('active');
            
            timeLanguageSettings.autoTimeSync = !isActive;
            updateToggleState('autoTimeToggle', timeLanguageSettings.autoTimeSync);
            toggleManualTimeControls();
            
            try {
                await saveTimeLanguageSettings();
                showNotification('Auto time sync updated', 'success');
            } catch (error) {
                console.error('Failed to update auto time setting:', error);
                showNotification('Failed to update setting', 'error');
            }
        }

        async function toggleAutoTimezone() {
            const toggle = document.getElementById('autoTimezoneToggle');
            const isActive = toggle.classList.contains('active');
            
            timeLanguageSettings.autoTimezoneSync = !isActive;
            updateToggleState('autoTimezoneToggle', timeLanguageSettings.autoTimezoneSync);
            toggleManualTimezoneControls();
            
            try {
                await saveTimeLanguageSettings();
                showNotification('Auto timezone sync updated', 'success');
            } catch (error) {
                console.error('Failed to update auto timezone setting:', error);
                showNotification('Failed to update setting', 'error');
            }
        }

        async function openSmartLocationSearch() {
            // Try to get user's current location first
            if (navigator.geolocation) {
                const useCurrentLocation = confirm('Would you like to use your current location?');
                if (useCurrentLocation) {
                    navigator.geolocation.getCurrentPosition(
                        async (position) => {
                            await handleCurrentLocation(position.coords.latitude, position.coords.longitude);
                        },
                        async () => {
                            // Fallback to manual search
                            await openManualLocationSearch();
                        }
                    );
                    return;
                }
            }
            
            // Manual search
            await openManualLocationSearch();
        }

        async function openManualLocationSearch() {
            const query = prompt('Enter city name to search for:');
            if (!query) return;
            
            try {
                // Smart location search with better formatting
                const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5&addressdetails=1`);
                const results = await response.json();
                
                if (results.length === 0) {
                    showNotification('No locations found', 'error');
                    return;
                }
                
                // Create a smart selection dialog
                let message = 'Select a location:\n\n';
                results.forEach((result, index) => {
                    const city = result.address?.city || result.address?.town || result.address?.village || 'Unknown';
                    const country = result.address?.country || 'Unknown';
                    const state = result.address?.state ? `, ${result.address.state}` : '';
                    message += `${index + 1}. ${city}${state}, ${country}\n`;
                });
                
                const choice = prompt(message + '\nEnter number (1-' + results.length + '):');
                const choiceIndex = parseInt(choice) - 1;
                
                if (choiceIndex >= 0 && choiceIndex < results.length) {
                    const selected = results[choiceIndex];
                    await updateLocation(
                        parseFloat(selected.lat),
                        parseFloat(selected.lon),
                        selected.address?.city || selected.address?.town || selected.address?.village || 'Unknown',
                        selected.address?.country || 'Unknown'
                    );
                }
            } catch (error) {
                console.error('Failed to search locations:', error);
                showNotification('Failed to search locations', 'error');
            }
        }

        async function handleCurrentLocation(lat, lon) {
            try {
                // Get location details from coordinates
                const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&addressdetails=1`);
                const result = await response.json();
                
                if (result && result.address) {
                    await updateLocation(
                        lat,
                        lon,
                        result.address.city || result.address.town || result.address.village || 'Current Location',
                        result.address.country || 'Unknown'
                    );
                }
            } catch (error) {
                console.error('Failed to get location details:', error);
                showNotification('Failed to get location details', 'error');
            }
        }

        async function updateLocation(lat, lon, city, country) {
            try {
                const response = await apiRequest('/settings/time-location/location', {
                    method: 'POST',
                    body: JSON.stringify({
                        latitude: lat,
                        longitude: lon,
                        city: city,
                        country: country
                    })
                });
                
                if (response.success) {
                    timeLanguageSettings.location = {
                        latitude: lat,
                        longitude: lon,
                        city: city,
                        country: country
                    };
                    
                    // Auto-update timezone if detected
                    if (response.timezone) {
                        timeLanguageSettings.timezone = response.timezone;
                        document.getElementById('timezoneSelect').value = response.timezone;
                    }
                    
                    showNotification('Location updated successfully', 'success');
                    applyTimeLanguageSettingsToUI();
                }
            } catch (error) {
                console.error('Failed to update location:', error);
                showNotification('Failed to update location', 'error');
            }
        }


        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            loadSettings();
            loadCalendarSettings();
            loadProductivitySettings();
            loadTimeLanguageSettings();
            loadN8nSettings();
            addProductivityEventListeners();
            updateSystemStatus();
            loadCurrentLocation();
            loadUserProfile();
            loadSecurityInfo();
            
            // Update system status every 30 seconds
            setInterval(updateSystemStatus, 30000);
        });

        // User Profile Functions
        async function loadUserProfile() {
            const user = await window.zoeAuth.getCurrentUser();
            if (user) {
                document.getElementById('username').value = user.username;
                document.getElementById('email').value = user.email || '';
                document.getElementById('userRole').textContent = user.role || 'user';
            }
        }

        async function updateProfile() {
            const email = document.getElementById('email').value;
            
            try {
                const response = await fetch('/api/auth/profile', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Session-ID': window.zoeAuth.getCurrentSession().session_id
                    },
                    body: JSON.stringify({ email })
                });

                if (response.ok) {
                    showUserNotification('Profile updated successfully!', 'success');
                } else {
                    const error = await response.json();
                    showUserNotification(error.detail || 'Failed to update profile', 'error');
                }
            } catch (error) {
                showUserNotification('Connection error', 'error');
            }
        }

        // Security Functions
        async function loadSecurityInfo() {
            try {
                // Load PIN status
                const pinResponse = await fetch('/api/auth/passcode/status', {
                    headers: { 'X-Session-ID': window.zoeAuth.getCurrentSession().session_id }
                });
                if (pinResponse.ok) {
                    const pinData = await pinResponse.json();
                    document.getElementById('pinStatus').textContent = pinData.has_passcode ? 'Configured' : 'Not Set';
                }

                // Load session count
                const sessionsResponse = await fetch('/api/auth/sessions', {
                    headers: { 'X-Session-ID': window.zoeAuth.getCurrentSession().session_id }
                });
                if (sessionsResponse.ok) {
                    const sessionsData = await sessionsResponse.json();
                    document.getElementById('sessionCount').textContent = sessionsData.sessions.length + ' active';
                }
            } catch (error) {
                console.warn('Could not load security info:', error);
            }
        }

        function showChangePassword() {
            const currentPassword = prompt('Enter your current password:');
            if (!currentPassword) return;

            const newPassword = prompt('Enter new password:');
            if (!newPassword) return;

            const confirmPassword = prompt('Confirm new password:');
            if (newPassword !== confirmPassword) {
                showUserNotification('Passwords do not match', 'error');
                return;
            }

            changePassword(currentPassword, newPassword);
        }

        async function changePassword(currentPassword, newPassword) {
            try {
                const response = await fetch('/api/auth/change-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Session-ID': window.zoeAuth.getCurrentSession().session_id
                    },
                    body: JSON.stringify({ current_password: currentPassword, new_password: newPassword })
                });

                if (response.ok) {
                    showUserNotification('Password changed successfully!', 'success');
                } else {
                    const error = await response.json();
                    showUserNotification(error.detail || 'Failed to change password', 'error');
                }
            } catch (error) {
                showUserNotification('Connection error', 'error');
            }
        }

        function managePinCode() {
            const pinStatus = document.getElementById('pinStatus').textContent;
            if (pinStatus === 'Configured') {
                if (confirm('Do you want to remove your PIN code?')) {
                    removePinCode();
                } else {
                    const newPin = prompt('Enter new PIN (4-8 digits):');
                    if (newPin && /^\d{4,8}$/.test(newPin)) {
                        updatePinCode(newPin);
                    } else if (newPin) {
                        showUserNotification('PIN must be 4-8 digits', 'error');
                    }
                }
            } else {
                const newPin = prompt('Enter new PIN (4-8 digits):');
                if (newPin && /^\d{4,8}$/.test(newPin)) {
                    updatePinCode(newPin);
                } else if (newPin) {
                    showUserNotification('PIN must be 4-8 digits', 'error');
                }
            }
        }

        async function updatePinCode(newPin) {
            try {
                const response = await fetch('/api/auth/passcode', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Session-ID': window.zoeAuth.getCurrentSession().session_id
                    },
                    body: JSON.stringify({ new_passcode: newPin })
                });

                if (response.ok) {
                    showUserNotification('PIN code updated successfully!', 'success');
                    loadSecurityInfo();
                } else {
                    const error = await response.json();
                    showUserNotification(error.detail || 'Failed to update PIN', 'error');
                }
            } catch (error) {
                showUserNotification('Connection error', 'error');
            }
        }

        async function removePinCode() {
            try {
                const response = await fetch('/api/auth/passcode', {
                    method: 'DELETE',
                    headers: { 'X-Session-ID': window.zoeAuth.getCurrentSession().session_id }
                });

                if (response.ok) {
                    showUserNotification('PIN code removed successfully!', 'success');
                    loadSecurityInfo();
                } else {
                    const error = await response.json();
                    showUserNotification(error.detail || 'Failed to remove PIN', 'error');
                }
            } catch (error) {
                showUserNotification('Connection error', 'error');
            }
        }

        function viewSessions() {
            // Create a simple modal to show sessions
            showUserNotification('Session management available in admin panel', 'info');
        }

        // Enhanced notification function
        function showUserNotification(message, type = 'info') {
            // Try to use auth system notification first
            if (window.zoeAuth && window.zoeAuth.showNotification) {
                window.zoeAuth.showNotification(message, type);
                return;
            }

            // Fallback notification
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 80px;
                right: 20px;
                padding: 12px 20px;
                border-radius: 8px;
                color: white;
                font-weight: 500;
                z-index: 10000;
                transition: all 0.3s ease;
                max-width: 300px;
                font-size: 14px;
            `;

            switch (type) {
                case 'success':
                    notification.style.background = '#22c55e';
                    break;
                case 'error':
                    notification.style.background = '#ef4444';
                    break;
                case 'warning':
                    notification.style.background = '#f59e0b';
                    break;
                default:
                    notification.style.background = '#3b82f6';
            }

            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // N8N Settings Functions
        async function saveN8nSettings() {
            const url = document.getElementById('n8nUrl').value.trim();
            const username = document.getElementById('n8nUsername').value.trim();
            const password = document.getElementById('n8nPassword').value.trim();
            const apiKey = document.getElementById('n8nApiKey').value.trim();
            
            if (!url) {
                showUserNotification('Please enter N8N server URL', 'error');
                return;
            }
            
            if (!apiKey) {
                showUserNotification('Please enter N8N API key', 'error');
                return;
            }
            
            try {
                const response = await apiRequest('/settings/n8n', {
                    method: 'POST',
                    body: JSON.stringify({
                        n8n_url: url,
                        n8n_username: username,
                        n8n_password: password,
                        n8n_api_key: apiKey
                    })
                });
                
                showUserNotification('N8N settings saved successfully!', 'success');
                // Test connection after saving
                testN8nConnection();
            } catch (error) {
                console.error('Failed to save N8N settings:', error);
                showUserNotification('Failed to save N8N settings', 'error');
            }
        }

        async function testN8nConnection() {
            const statusDiv = document.getElementById('n8nStatus');
            statusDiv.textContent = 'Testing...';
            statusDiv.style.color = '#666';
            
            try {
                const response = await apiRequest('/n8n/health');
                
                if (response.status === 'healthy') {
                    statusDiv.textContent = '✅ Connected';
                    statusDiv.style.color = '#22c55e';
                } else {
                    statusDiv.textContent = '⚠️ Unhealthy';
                    statusDiv.style.color = '#f59e0b';
                }
            } catch (error) {
                console.error('N8N connection test failed:', error);
                statusDiv.textContent = '❌ Connection failed';
                statusDiv.style.color = '#ef4444';
            }
        }

        async function loadN8nSettings() {
            try {
                const response = await apiRequest('/settings/n8n');
                const settings = response.settings || {};
                
                if (settings.n8n_url) {
                    document.getElementById('n8nUrl').value = settings.n8n_url;
                }
                if (settings.n8n_username) {
                    document.getElementById('n8nUsername').value = settings.n8n_username;
                }
                // Don't load password or API key for security
                
                // Test connection if settings exist
                if (settings.n8n_url && settings.n8n_username) {
                    testN8nConnection();
                }
            } catch (error) {
                console.error('Failed to load N8N settings:', error);
            }
        }

        // Notifications system
        function openNotifications() {
            document.getElementById('notificationsPanel').classList.add('open');
            loadNotifications();
            
            // Clear notification indicator when panel is opened
            const notificationBtn = document.querySelector('.notifications-btn');
            notificationBtn.classList.remove('has-notifications');
        }

        function closeNotifications() {
            document.getElementById('notificationsPanel').classList.remove('open');
        }

        async function loadNotifications() {
            try {
                const response = await apiRequest('/reminders/notifications/pending');
                const notifications = response.notifications || [];
                displayNotifications(notifications);
            } catch (error) {
                console.error('Failed to load notifications:', error);
                displayNotifications([]);
            }
        }

        function displayNotifications(notifications) {
            const notificationsContent = document.getElementById('notificationsContent');
            const notificationBtn = document.querySelector('.notifications-btn');
            
            // Update notification button indicator
            if (notifications.length > 0) {
                notificationBtn.classList.add('has-notifications');
            } else {
                notificationBtn.classList.remove('has-notifications');
            }
            
            if (notifications.length === 0) {
                notificationsContent.innerHTML = '<div class="no-notifications">No notifications</div>';
                return;
            }
            
            notificationsContent.innerHTML = notifications.map(notification => `
                <div class="notification-item ${notification.is_delivered ? '' : 'unread'}" 
                     onclick="handleNotificationClick(${notification.id})">
                    <div class="notification-title">${notification.message}</div>
                    <div class="notification-meta">
                        <span class="notification-time">${new Date(notification.created_at).toLocaleTimeString()}</span>
                        ${notification.priority ? `<span class="notification-priority" style="background: ${getPriorityColor(notification.priority)}; color: white;">${notification.priority}</span>` : ''}
                    </div>
                </div>
            `).join('');
        }

        function getPriorityColor(priority) {
            switch(priority.toLowerCase()) {
                case 'high': return '#ef4444';
                case 'medium': return '#f59e0b';
                case 'low': return '#10b981';
                default: return '#6b7280';
            }
        }

        function handleNotificationClick(notificationId) {
            // Mark notification as acknowledged
            acknowledgeNotification(notificationId);
            closeNotifications();
        }

        async function acknowledgeNotification(notificationId) {
            try {
                await apiRequest(`/reminders/notifications/${notificationId}/deliver`, {
                    method: 'POST'
                });
                // Reload notifications
                loadNotifications();
            } catch (error) {
                console.error('Failed to acknowledge notification:', error);
            }
        }

        // User menu functions
        function toggleUserDropdown() {
            const dropdown = document.getElementById('userDropdown');
            dropdown.classList.toggle('show');
        }

        function showUserProfile() {
            // Implement user profile modal
            alert('User profile coming soon!');
            document.getElementById('userDropdown').classList.remove('show');
        }

        function showSecuritySettings() {
            // Implement security settings
            alert('Security settings coming soon!');
            document.getElementById('userDropdown').classList.remove('show');
        }

        // Authentication functions now handled by auth.js

        // User Management Functions (Admin Only)
        async function checkAdminAccess() {
            try {
                const user = await window.zoeAuth.getCurrentUser();
                console.log('Current user:', user);
                if (user && user.role === 'admin') {
                    console.log('Admin access granted - showing user management section');
                    document.getElementById('userManagementSection').style.display = 'block';
                    loadUserList();
                } else {
                    console.log('Not admin or no user:', user);
                }
            } catch (error) {
                console.error('Error checking admin access:', error);
            }
        }

        async function createNewUser() {
            const username = document.getElementById('newUsername').value.trim();
            const email = document.getElementById('newEmail').value.trim();
            const password = document.getElementById('newPassword').value;
            const role = document.getElementById('newUserRole').value;

            if (!username || !email || !password) {
                showNotification('Please fill in all fields', 'error');
                return;
            }

            if (password.length < 8) {
                showNotification('Password must be at least 8 characters', 'error');
                return;
            }

            try {
                const session = window.zoeAuth.getCurrentSession();
                const response = await fetch('/api/admin/users', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Session-ID': session.session_id
                    },
                    body: JSON.stringify({
                        username: username,
                        email: email,
                        password: password,
                        role: role
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    showNotification(`User ${username} created successfully!`, 'success');
                    
                    // Clear form
                    document.getElementById('newUsername').value = '';
                    document.getElementById('newEmail').value = '';
                    document.getElementById('newPassword').value = '';
                    document.getElementById('newUserRole').value = 'user';
                    
                    // Reload user list
                    loadUserList();
                } else {
                    const error = await response.json();
                    showNotification(error.detail || 'Failed to create user', 'error');
                }
            } catch (error) {
                console.error('Error creating user:', error);
                showNotification('Connection error', 'error');
            }
        }

        async function loadUserList() {
            const userListDiv = document.getElementById('userList');
            userListDiv.innerHTML = '<div style="text-align: center; padding: 20px; color: #666;">Loading users...</div>';

            try {
                const session = window.zoeAuth.getCurrentSession();
                const response = await fetch('/api/admin/users?active_only=false', {
                    headers: {
                        'X-Session-ID': session.session_id
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    displayUserList(data.users);
                } else {
                    userListDiv.innerHTML = '<div style="text-align: center; padding: 20px; color: #ef4444;">Failed to load users</div>';
                }
            } catch (error) {
                console.error('Error loading users:', error);
                userListDiv.innerHTML = '<div style="text-align: center; padding: 20px; color: #ef4444;">Connection error</div>';
            }
        }

        function displayUserList(users) {
            const userListDiv = document.getElementById('userList');
            
            if (users.length === 0) {
                userListDiv.innerHTML = '<div style="text-align: center; padding: 20px; color: #666;">No users found</div>';
                return;
            }

            const userCards = users.map(user => `
                <div style="background: white; border-radius: 8px; padding: 15px; border: 1px solid #e1e5e9;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <div style="font-weight: 600; font-size: 16px;">${escapeHtml(user.username)}</div>
                            <div style="font-size: 14px; color: #666; margin-top: 4px;">${escapeHtml(user.email || 'No email')}</div>
                            <div style="display: flex; gap: 10px; margin-top: 8px;">
                                <span style="background: ${getRoleBadgeColor(user.role)}; color: white; padding: 4px 10px; border-radius: 12px; font-size: 12px; font-weight: 500;">
                                    ${escapeHtml(user.role)}
                                </span>
                                <span style="color: #666; font-size: 12px;">
                                    ${user.is_active ? '✅ Active' : '❌ Inactive'}
                                </span>
                                ${user.active_sessions ? `<span style="color: #666; font-size: 12px;">🔗 ${user.active_sessions} sessions</span>` : ''}
                            </div>
                        </div>
                        <div style="display: flex; gap: 8px;">
                            <button onclick="resetUserPassword('${user.user_id}', '${escapeHtml(user.username)}')" 
                                    class="btn" style="padding: 6px 12px; font-size: 13px;">
                                Reset Password
                            </button>
                            ${!user.is_active ? 
                                `<button onclick="activateUser('${user.user_id}')" 
                                         class="btn" style="padding: 6px 12px; font-size: 13px;">
                                    Activate
                                </button>` : 
                                `<button onclick="deactivateUser('${user.user_id}', '${escapeHtml(user.username)}')" 
                                         class="btn" style="padding: 6px 12px; font-size: 13px; background: #ef4444;">
                                    Deactivate
                                </button>`
                            }
                        </div>
                    </div>
                </div>
            `).join('');

            userListDiv.innerHTML = userCards;
        }

        function getRoleBadgeColor(role) {
            switch(role) {
                case 'admin': return '#7B61FF';
                case 'user': return '#10b981';
                case 'family_member': return '#3b82f6';
                case 'child': return '#f59e0b';
                case 'guest': return '#6b7280';
                default: return '#6b7280';
            }
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        async function resetUserPassword(userId, username) {
            if (!confirm(`Reset password for user ${username}? A temporary password will be generated.`)) {
                return;
            }

            try {
                const session = window.zoeAuth.getCurrentSession();
                const response = await fetch(`/api/admin/users/${userId}/reset-password`, {
                    method: 'POST',
                    headers: {
                        'X-Session-ID': session.session_id
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    showNotification(`Password reset for ${username}. Temporary password: ${result.temporary_password}`, 'success');
                    alert(`Temporary password for ${username}:\n\n${result.temporary_password}\n\nPlease save this password and share it securely with the user. They must change it on first login.`);
                } else {
                    const error = await response.json();
                    showNotification(error.detail || 'Failed to reset password', 'error');
                }
            } catch (error) {
                console.error('Error resetting password:', error);
                showNotification('Connection error', 'error');
            }
        }

        async function deactivateUser(userId, username) {
            if (!confirm(`Deactivate user ${username}? They will not be able to log in.`)) {
                return;
            }

            try {
                const session = window.zoeAuth.getCurrentSession();
                const response = await fetch(`/api/admin/users/${userId}`, {
                    method: 'DELETE',
                    headers: {
                        'X-Session-ID': session.session_id
                    }
                });

                if (response.ok) {
                    showNotification(`User ${username} deactivated`, 'success');
                    loadUserList();
                } else {
                    const error = await response.json();
                    showNotification(error.detail || 'Failed to deactivate user', 'error');
                }
            } catch (error) {
                console.error('Error deactivating user:', error);
                showNotification('Connection error', 'error');
            }
        }

        async function activateUser(userId) {
            try {
                const session = window.zoeAuth.getCurrentSession();
                const response = await fetch(`/api/admin/users/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Session-ID': session.session_id
                    },
                    body: JSON.stringify({
                        is_active: true
                    })
                });

                if (response.ok) {
                    showNotification('User activated', 'success');
                    loadUserList();
                } else {
                    const error = await response.json();
                    showNotification(error.detail || 'Failed to activate user', 'error');
                }
            } catch (error) {
                console.error('Error activating user:', error);
                showNotification('Connection error', 'error');
            }
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            const userMenu = document.querySelector('.user-menu');
            const dropdown = document.getElementById('userDropdown');
            
            if (userMenu && !userMenu.contains(event.target)) {
                dropdown.classList.remove('show');
            }
        });

        // Load notifications on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadNotifications();
            checkAdminAccess();
        });
    </script>
</body>
</html>

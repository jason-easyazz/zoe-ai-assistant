<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Zoe AI Assistant</title>
    <style>
        * { 
            margin: 0; padding: 0; box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
            touch-action: manipulation;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', system-ui, sans-serif;
            background: linear-gradient(135deg, #fafbfc 0%, #f1f3f6 100%);
            min-height: 100vh; color: #333;
            font-size: clamp(14px, 1.6vw, 16px);
        }
        
        /* Navigation */
        .nav-bar {
            position: fixed; top: 0; left: 0; right: 0; background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(20px); border-bottom: 1px solid rgba(255, 255, 255, 0.3);
            padding: 10px 15px; z-index: 100; display: flex; justify-content: space-between;
            align-items: center; height: 60px;
        }
        .nav-left { display: flex; align-items: center; gap: 15px; }
        .mini-orb { 
            width: 32px; height: 32px; border-radius: 50%; 
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%); 
            cursor: pointer; transition: all 0.3s ease; min-width: 44px; min-height: 44px;
        }
        .mini-orb:hover { transform: scale(1.1); }
        .nav-menu { display: flex; gap: 20px; }
        .nav-item { 
            color: #666; text-decoration: none; font-size: 13px; font-weight: 400; 
            transition: all 0.3s ease; padding: 8px 12px; border-radius: 6px;
            min-height: 44px; display: flex; align-items: center;
        }
        .nav-item:hover, .nav-item.active { color: #7B61FF; background: rgba(123, 97, 255, 0.1); }
        .nav-right { display: flex; align-items: center; gap: 10px; }
        
        .more-nav-btn { 
            color: #666; text-decoration: none; font-size: 13px; font-weight: 400; 
            transition: all 0.3s ease; padding: 8px 12px; border-radius: 6px;
            min-height: 44px; display: flex; align-items: center; cursor: pointer;
            background: none; border: none;
        }
        .more-nav-btn:hover { color: #7B61FF; background: rgba(123, 97, 255, 0.1); }
        
        /* Authentication Integration */
        .user-menu {
            position: relative;
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px 12px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .user-menu:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        
        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 14px;
        }
        
        .user-info {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }
        
        .user-name {
            font-size: 14px;
            font-weight: 500;
            color: #333;
            line-height: 1.2;
        }
        
        .user-role {
            font-size: 12px;
            color: #666;
            line-height: 1.2;
        }
        
        .user-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            padding: 8px 0;
            min-width: 200px;
            z-index: 1000;
            display: none;
            border: 1px solid #e1e5e9;
        }
        
        .user-dropdown.show {
            display: block;
        }
        
        .dropdown-item {
            display: block;
            padding: 8px 16px;
            color: #333;
            text-decoration: none;
            font-size: 14px;
            transition: background 0.2s;
        }
        
        .dropdown-item:hover {
            background: #f8f9fa;
        }
        
        .dropdown-divider {
            height: 1px;
            background: #e1e5e9;
            margin: 4px 0;
        }
        
        .notifications-btn { 
            background: rgba(255, 255, 255, 0.6); border: 1px solid rgba(255, 255, 255, 0.3); 
            border-radius: 50%; width: 32px; height: 32px; display: flex; align-items: center; 
            justify-content: center; cursor: pointer; transition: all 0.3s ease; color: #666;
            font-size: 16px; font-weight: bold; position: relative;
            font-family: 'Apple Color Emoji', 'Segoe UI Emoji', 'Noto Color Emoji', sans-serif;
        }
        .notifications-btn:hover { background: rgba(255, 255, 255, 0.8); color: #333; }
        .notifications-btn.has-notifications {
            animation: notificationPulse 2s ease-in-out infinite;
        }
        .notifications-btn.has-notifications::after {
            content: ''; position: absolute; top: 6px; right: 6px;
            width: 10px; height: 10px; background: #ff4757; border-radius: 50%;
            border: 2px solid white;
            animation: notificationDotPulse 1.5s ease-in-out infinite;
        }
        
        @keyframes notificationPulse {
            0%, 100% { 
                transform: scale(1);
                box-shadow: 0 0 0 0 rgba(123, 97, 255, 0.4);
            }
            50% { 
                transform: scale(1.05);
                box-shadow: 0 0 0 8px rgba(123, 97, 255, 0);
            }
        }
        
        @keyframes notificationDotPulse {
            0%, 100% { 
                transform: scale(1);
                opacity: 1;
            }
            50% { 
                transform: scale(1.2);
                opacity: 0.7;
            }
        }
        
        /* Notifications Panel */
        .notifications-panel {
            position: fixed; top: 0; right: -400px; width: 400px; height: 100vh;
            background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px);
            border-left: 1px solid rgba(255, 255, 255, 0.3); z-index: 1000;
            transition: right 0.3s ease; overflow-y: auto;
        }
        .notifications-panel.open { right: 0; }
        .notifications-header {
            padding: 20px; border-bottom: 1px solid rgba(255, 255, 255, 0.3);
            display: flex; justify-content: space-between; align-items: center;
        }
        .notifications-title {
            font-size: 18px; font-weight: 600; color: #333; margin: 0;
        }
        .notifications-close {
            width: 32px; height: 32px; border-radius: 50%; border: none;
            background: rgba(255, 255, 255, 0.3); color: #666; font-size: 18px;
            cursor: pointer; transition: all 0.3s ease; min-width: 44px; min-height: 44px;
        }
        .notifications-close:hover { background: rgba(255, 255, 255, 0.5); }
        .notifications-content {
            padding: 20px; display: flex; flex-direction: column; gap: 15px;
        }
        .notification-item {
            background: rgba(255, 255, 255, 0.6); backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.4); border-radius: 12px;
            padding: 15px; transition: all 0.3s ease; cursor: pointer;
        }
        .notification-item:hover { transform: translateY(-2px); box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1); }
        .notification-item.unread { border-left: 4px solid #7B61FF; }
        .notification-title {
            font-size: 14px; font-weight: 600; color: #333; margin-bottom: 5px;
        }
        .notification-meta {
            font-size: 12px; color: #666; display: flex; gap: 10px;
        }
        .notification-time {
            color: #7B61FF; font-weight: 500;
        }
        .notification-priority {
            padding: 2px 8px; border-radius: 12px; font-size: 10px; font-weight: 600;
        }
        .no-notifications {
            text-align: center; color: #666; font-size: 14px; padding: 40px 20px;
        }
        
        .api-indicator { font-size: 12px; padding: 4px 8px; border-radius: 8px; font-weight: 500; display: flex; align-items: center; gap: 6px; }
        .api-indicator.online { background: rgba(34, 197, 94, 0.1); color: #22c55e; }
        .api-indicator.offline { background: rgba(239, 68, 68, 0.1); color: #ef4444; }
        .api-indicator.warning { background: rgba(251, 146, 60, 0.1); color: #ea580c; }
        .api-indicator::before { content: ''; width: 8px; height: 8px; border-radius: 50%; display: inline-block; }
        .api-indicator.online::before { background: #22c55e; }
        .api-indicator.offline::before { background: #ef4444; }
        .api-indicator.warning::before { background: #ea580c; }

        /* Time/Date Display in Top Right */
        .time-date-display {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 2px;
            font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', system-ui, sans-serif;
        }
        .current-time {
            font-size: 16px;
            font-weight: 500;
            color: #333;
            line-height: 1.2;
        }
        .current-date {
            font-size: 11px;
            color: #666;
            line-height: 1.2;
        }

        /* Main Layout */
        .main-container { 
            padding: 70px 20px 20px; height: 100vh; display: flex; flex-direction: column;
        }
        

        /* Chat Container */
        .chat-container {
            flex: 1; display: flex; flex-direction: column; 
            background: rgba(255, 255, 255, 0.6); backdrop-filter: blur(40px);
            border: 1px solid rgba(255, 255, 255, 0.4); border-radius: 16px;
            overflow: hidden; margin-bottom: 20px;
        }

        .chat-wrapper { display: grid; grid-template-columns: 1fr 320px; gap: 16px; height: calc(100vh - 120px); }
        .intelligence-sidebar {
            background: rgba(255,255,255,0.6); backdrop-filter: blur(40px);
            border: 1px solid rgba(255,255,255,0.4); border-radius: 16px; padding: 16px; overflow-y: auto;
        }
        .chip-row { display: flex; flex-wrap: wrap; gap: 8px; margin: 6px 0 0 0; }
        .context-chip { font-size: 12px; padding: 4px 8px; border-radius: 999px; background: rgba(123,97,255,0.12); color: #4b5563; border: 1px solid rgba(123,97,255,0.2); }
        .sidebar-section { margin-bottom: 16px; }
        .sidebar-title { font-size: 13px; font-weight: 600; color: #374151; margin-bottom: 6px; }
        
        .chat-header {
            padding: 20px; border-bottom: 1px solid rgba(255, 255, 255, 0.3);
            text-align: center; background: rgba(255, 255, 255, 0.8);
        }
        .chat-title {
            font-size: 20px; font-weight: 300; color: #333;
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%); 
            -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent;
        }
        .chat-subtitle {
            font-size: 12px; color: #666; margin-top: 4px;
        }
        
        .chat-messages {
            flex: 1; padding: 20px; overflow-y: auto; min-height: 300px;
            display: flex; flex-direction: column; gap: 16px;
        }
        
        .message {
            max-width: 85%; padding: 16px 20px; border-radius: 16px; 
            font-size: 15px; line-height: 1.5; word-wrap: break-word;
        }
        .zoe-message { 
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%); 
            color: white; margin-right: auto; align-self: flex-start;
        }
        .user-message {
            background: rgba(255, 255, 255, 0.8); color: #333; margin-left: auto;
            align-self: flex-end; border: 1px solid rgba(255, 255, 255, 0.4);
        }
        
        .typing-indicator {
            display: none; margin-right: auto; align-self: flex-start;
        }
        .typing-indicator.active { display: block; }
        .typing-dots {
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            color: white; padding: 16px 20px; border-radius: 16px;
            font-size: 15px;
        }
        .typing-dots::after {
            content: '...';
            animation: typing 1.5s infinite;
        }
        @keyframes typing {
            0%, 20% { content: '...'; }
            40% { content: '....'; }
            60% { content: '.....'; }
            80%, 100% { content: '......'; }
        }

        /* Input Area */
        .chat-input-container {
            padding: 20px; background: rgba(255, 255, 255, 0.8);
            border-top: 1px solid rgba(255, 255, 255, 0.3);
            display: flex; gap: 12px; align-items: flex-end;
        }
        
        .input-wrapper {
            flex: 1; position: relative;
        }
        
        .chat-input {
            width: 100%; padding: 16px 20px; border: 1px solid rgba(255, 255, 255, 0.4);
            border-radius: 20px; background: rgba(255, 255, 255, 0.9); 
            font-size: 16px; outline: none; resize: none; min-height: 56px;
            max-height: 120px; font-family: inherit;
        }
        .chat-input:focus {
            border-color: #7B61FF; box-shadow: 0 0 0 2px rgba(123, 97, 255, 0.1);
        }
        
        .input-actions {
            display: flex; gap: 8px; align-items: center;
        }
        
        .voice-btn, .send-btn {
            width: 56px; height: 56px; border-radius: 50%; border: none;
            cursor: pointer; transition: all 0.3s ease; display: flex;
            align-items: center; justify-content: center; font-size: 20px;
        }
        
        .voice-btn {
            background: rgba(255, 255, 255, 0.6); color: #666;
        }
        .voice-btn:hover { background: rgba(255, 255, 255, 0.8); }
        .voice-btn.recording { 
            background: #ef4444; color: white; animation: pulse 1s infinite;
        }
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }
        
        .send-btn {
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            color: white;
        }
        .send-btn:hover { transform: scale(1.05); }
        .send-btn:disabled { opacity: 0.5; cursor: not-allowed; }

        /* More Overlay */
        .more-overlay {
            position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
            background: rgba(0, 0, 0, 0.4); backdrop-filter: blur(8px);
            display: none; align-items: center; justify-content: center; z-index: 3000;
            opacity: 0; transition: all 0.3s ease;
        }
        .more-overlay.active { display: flex; opacity: 1; }
        .more-content {
            background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(60px);
            border: 1px solid rgba(255, 255, 255, 0.5); border-radius: 20px;
            padding: 40px; max-width: 500px; width: 90%; position: relative;
            transform: scale(0.8); transition: transform 0.3s ease;
        }
        .more-overlay.active .more-content { transform: scale(1); }
        .more-header { text-align: center; margin-bottom: 30px; }
        .more-title {
            font-size: 24px; font-weight: 300; color: #333; margin-bottom: 10px;
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent;
        }
        .more-close {
            position: absolute; top: 15px; right: 15px; 
            background: rgba(255, 255, 255, 0.6); border: none;
            border-radius: 50%; width: 36px; height: 36px;
            font-size: 18px; cursor: pointer; color: #666;
        }
        .more-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; }
        .more-item {
            background: rgba(255, 255, 255, 0.8); border: 1px solid rgba(255, 255, 255, 0.4);
            border-radius: 16px; padding: 24px; text-align: center; cursor: pointer;
            transition: all 0.3s ease; min-height: 120px; display: flex;
            flex-direction: column; align-items: center; justify-content: center;
        }
        .more-item:hover {
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            color: white; transform: translateY(-4px);
        }
        .more-item-icon { font-size: 36px; margin-bottom: 12px; }
        .more-item-label { font-size: 15px; font-weight: 500; }

        /* Mobile Responsive */
        @media (max-width: 800px) {
            .nav-menu { display: none; }
            .main-container { padding: 60px 10px 20px; }
            .chat-input-container { padding: 15px; }
            .more-grid { grid-template-columns: 1fr; }
        }

        /* Streaming cursor animation */
        .streaming-cursor {
            animation: blink 1s infinite;
            font-weight: bold;
        }

        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }
    </style>
    <script src="js/auth.js"></script>
        <!-- Zoe Orb Styles -->
        <style>
        .zoe-orb {
            position: fixed; bottom: 24px; right: 24px; width: 70px; height: 70px;
            border-radius: 50%; cursor: pointer; transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            z-index: 1200; display: flex; align-items: center; justify-content: center;
            overflow: hidden;
            animation: orb-liquid-swirl 12s ease-in-out infinite, orb-breathe 4s ease-in-out infinite;
            background: linear-gradient(135deg, #7B61FF 0%, #8B5CF6 50%, #A855F7 100%);
            background-size: 200% 200%;
            box-shadow: 0 6px 20px rgba(123, 97, 255, 0.4), 0 0 40px rgba(123, 97, 255, 0.2);
        }
        .zoe-orb::before {
            content: ""; position: absolute; top: 50%; left: 50%; width: 20px; height: 20px;
            background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);
            border-radius: 50%; transform: translate(-50%, -50%);
            animation: orb-inner-glow 2s ease-in-out infinite alternate;
        }
        .zoe-orb:hover {
            transform: scale(1.12);
            box-shadow: 0 8px 25px rgba(123, 97, 255, 0.5), 0 0 50px rgba(123, 97, 255, 0.3);
            animation-duration: 8s, 3s;
        }
        .zoe-orb:active { transform: scale(0.95); }
        .zoe-orb.connecting {
            background: linear-gradient(135deg, #7B61FF 0%, #6366F1 50%, #8B5CF6 100%);
            background-size: 200% 200%;
            box-shadow: 0 6px 20px rgba(123, 97, 255, 0.4), 0 0 40px rgba(123, 97, 255, 0.2);
        }
        .zoe-orb.connected {
            background: linear-gradient(135deg, #7B61FF 0%, #10B981 50%, #34D399 100%);
            background-size: 200% 200%;
            box-shadow: 0 6px 20px rgba(123, 97, 255, 0.4), 0 0 40px rgba(16, 185, 129, 0.2);
        }
        .zoe-orb.thinking {
            background: linear-gradient(135deg, #7B61FF 0%, #F59E0B 50%, #FBBF24 100%);
            background-size: 200% 200%;
            box-shadow: 0 6px 20px rgba(123, 97, 255, 0.4), 0 0 40px rgba(245, 158, 11, 0.2);
            animation: orb-thinking-gentle 3s ease-in-out infinite, orb-liquid-swirl 10s ease-in-out infinite;
        }
        .zoe-orb.proactive {
            background: linear-gradient(135deg, #7B61FF 0%, #EC4899 50%, #F472B6 100%);
            background-size: 200% 200%;
            box-shadow: 0 6px 20px rgba(123, 97, 255, 0.4), 0 0 40px rgba(236, 72, 153, 0.2);
            animation: orb-proactive-gentle 4s ease-in-out infinite, orb-liquid-swirl 10s ease-in-out infinite;
        }
        .zoe-orb.error {
            background: linear-gradient(135deg, #7B61FF 0%, #EF4444 50%, #F87171 100%);
            background-size: 200% 200%;
            box-shadow: 0 6px 20px rgba(123, 97, 255, 0.4), 0 0 40px rgba(239, 68, 68, 0.2);
            animation: orb-error-shake 0.5s ease-in-out infinite, orb-liquid-swirl 3s ease-in-out infinite;
        }
        .zoe-orb.chatting {
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 50%, #06B6D4 100%);
            background-size: 200% 200%;
            box-shadow: 0 8px 25px rgba(123, 97, 255, 0.6), 0 0 60px rgba(123, 97, 255, 0.4);
            animation: orb-liquid-swirl 12s ease-in-out infinite, orb-breathe 4s ease-in-out infinite;
        }
        .zoe-orb.badge::after {
            content: ""; position: absolute; top: 8px; right: 8px; width: 12px; height: 12px;
            background: #F59E0B; border-radius: 50%; border: 2px solid white;
            box-shadow: 0 0 12px rgba(245, 158, 11, 0.8);
            animation: badge-pulse 2s ease-in-out infinite;
        }
        @keyframes orb-liquid-swirl {
            0%, 100% { background-position: 0% 50%; border-radius: 50% 45% 55% 50%; }
            25% { background-position: 100% 50%; border-radius: 55% 50% 45% 55%; }
            50% { background-position: 100% 100%; border-radius: 45% 55% 50% 45%; }
            75% { background-position: 0% 100%; border-radius: 50% 45% 55% 50%; }
        }
        @keyframes orb-breathe {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        @keyframes orb-inner-glow {
            0% { opacity: 0.3; transform: translate(-50%, -50%) scale(1); }
            100% { opacity: 0.6; transform: translate(-50%, -50%) scale(1.1); }
        }
        @keyframes orb-thinking-gentle {
            0%, 100% { transform: rotate(0deg); }
            25% { transform: rotate(5deg); }
            75% { transform: rotate(-5deg); }
        }
        @keyframes orb-proactive-gentle {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.08); }
        }
        @keyframes orb-error-shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-2px); }
            75% { transform: translateX(2px); }
        }
        @keyframes badge-pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.7; transform: scale(1.2); }
        }
        </style>
</head>
<body>
    <!-- Navigation -->
    <div class="nav-bar">
        <div class="nav-left">
            <div class="mini-orb" onclick="handleLogout()"></div>
            <div class="nav-menu">
                <a href="chat.html" class="nav-item active">Chat</a>
                <a href="dashboard.html" class="nav-item">Dashboard</a>
                <a href="lists.html" class="nav-item">Lists</a>
                <a href="calendar.html" class="nav-item">Calendar</a>
                <a href="journal.html" class="nav-item">Journal</a>
                <button class="more-nav-btn" onclick="openMoreOverlay()">More</button>
            </div>
        </div>
        <div class="nav-right">
            <div class="api-indicator connecting" id="apiStatus">Connecting</div>
            
            <button class="notifications-btn" onclick="openNotifications()" title="Notifications">💬</button>
            
            <!-- Time/Date Display -->
            <div class="time-date-display">
                <div class="current-time" id="currentTime">Loading...</div>
                <div class="current-date" id="currentDate">Loading...</div>
            </div>
            
            <!-- User Menu (moved to mini-orb click) -->
            <div class="user-menu" onclick="toggleUserDropdown()" style="display: none;">
                <div class="user-avatar" id="userAvatar">?</div>
                
                <div class="user-dropdown" id="userDropdown">
                    <a href="#" class="dropdown-item" onclick="showUserProfile()">Profile</a>
                    <a href="#" class="dropdown-item" onclick="showSecuritySettings()">Security</a>
                    <div class="dropdown-divider"></div>
                    <a href="#" class="dropdown-item" onclick="switchUser()">Switch User</a>
                    <a href="#" class="dropdown-item" onclick="upgradeSession()" id="upgradeSessionItem" style="display: none;">Upgrade Session</a>
                    <div class="dropdown-divider"></div>
                    <a href="admin.html" class="dropdown-item" id="adminLink" style="display: none;">Admin Dashboard</a>
                    <div class="dropdown-divider" id="adminDivider" style="display: none;"></div>
                    <a href="#" class="dropdown-item" onclick="logout()">Logout</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-container">
        <div class="chat-wrapper">
        <!-- Chat Container -->
        <div class="chat-container">
            <div class="chat-header">
                <h1 class="chat-title">Zoe AI Assistant</h1>
                <p class="chat-subtitle">Your personal AI companion</p>
            </div>
            
            <div class="chat-messages" id="chatMessages">
                <div class="message zoe-message">
                    Hi! I'm Zoe, your AI assistant. I can help you with:
                    <br>• Managing your calendar and events
                    <br>• Creating and organizing lists
                    <br>• Journaling and memories
                    <br>• Home automation
                    <br>• And much more!
                    <br><br>What would you like to do today?
                </div>
            </div>
            
            <div class="typing-indicator" id="typingIndicator">
                <div class="typing-dots">Zoe is typing</div>
            </div>
            
            <div class="chat-input-container">
                <div class="input-wrapper">
                    <textarea 
                        class="chat-input" 
                        id="chatInput" 
                        placeholder="Ask me anything..."
                        onkeydown="handleKeyDown(event)"
                        oninput="adjustTextareaHeight(this)"
                    ></textarea>
                </div>
                <div class="input-actions">
                    <button class="voice-btn" id="voiceBtn" onclick="toggleVoiceRecording()" title="Voice Input">🎤</button>
                    <button class="send-btn" id="sendBtn" onclick="sendMessage()" title="Send Message">➤</button>
                </div>
            </div>
        </div>

        <!-- Intelligence Sidebar -->
        <div class="intelligence-sidebar" id="intelSidebar">
            <div class="sidebar-section">
                <div class="sidebar-title">💡 Insights</div>
                <div id="insightsList" style="display:flex; flex-direction:column; gap:8px;"></div>
            </div>
            <div class="sidebar-section">
                <div class="sidebar-title">🔗 Related</div>
                <div id="relatedList" style="display:flex; flex-direction:column; gap:6px; color:#4b5563; font-size:13px;"></div>
            </div>
            <div class="sidebar-section">
                <div class="sidebar-title">📊 Context</div>
                <div id="contextCounts" style="font-size:12px; color:#6b7280;"></div>
            </div>
        </div>
        </div>
    </div>

    <!-- More Overlay -->
    <div class="more-overlay" id="moreOverlay">
        <div class="more-content">
            <button class="more-close" onclick="closeMoreOverlay()">×</button>
            <div class="more-header">
                <h2 class="more-title">More Options</h2>
            </div>
            <div class="more-grid">
                <div class="more-item" onclick="navigateToPage('memories.html')">
                    <div class="more-item-icon">🧠</div>
                    <div class="more-item-label">Memories</div>
                </div>
                <div class="more-item" onclick="navigateToPage('workflows.html')">
                    <div class="more-item-icon">⚡</div>
                    <div class="more-item-label">Workflows</div>
                </div>
                <div class="more-item" onclick="navigateToPage('settings.html')">
                    <div class="more-item-icon">⚙️</div>
                    <div class="more-item-label">Settings</div>
                </div>
                <div class="more-item" onclick="alert('Coming soon!')">
                    <div class="more-item-icon">📊</div>
                    <div class="more-item-label">Analytics</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Notifications Panel -->
    <div class="notifications-panel" id="notificationsPanel">
        <div class="notifications-header">
            <h3 class="notifications-title">💬 Notifications</h3>
            <button class="notifications-close" onclick="closeNotifications()">×</button>
        </div>
        <div class="notifications-content" id="notificationsContent">
            <div class="no-notifications">No notifications</div>
    </div>
</div>

    <script src="js/common.js"></script>
    <script>
        let isRecording = false;
        let recognition = null;

        // Initialize voice recognition if available
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            recognition = new SpeechRecognition();
            recognition.continuous = false;
            recognition.interimResults = false;
            recognition.lang = 'en-US';

            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript;
                document.getElementById('chatInput').value = transcript;
                adjustTextareaHeight(document.getElementById('chatInput'));
            };

            recognition.onend = function() {
                isRecording = false;
                updateVoiceButton();
            };

            recognition.onerror = function(event) {
                console.error('Speech recognition error:', event.error);
                isRecording = false;
                updateVoiceButton();
                showNotification('Voice recognition error. Please try again.', 'error');
            };
        }

        function handleKeyDown(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        function adjustTextareaHeight(textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
        }

        function toggleVoiceRecording() {
            if (!recognition) {
                showNotification('Voice recognition not supported in this browser', 'error');
                return;
            }

            if (isRecording) {
                recognition.stop();
            } else {
                recognition.start();
                isRecording = true;
                updateVoiceButton();
            }
        }

        function updateVoiceButton() {
            const voiceBtn = document.getElementById('voiceBtn');
            if (isRecording) {
                voiceBtn.classList.add('recording');
                voiceBtn.title = 'Stop Recording';
            } else {
                voiceBtn.classList.remove('recording');
                voiceBtn.title = 'Voice Input';
            }
        }

        // Generate a session ID for this chat session
        let sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);

        async function sendMessage() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            if (!message) return;

            // Add user message to chat
            addMessage(message, 'user');
            input.value = '';
            adjustTextareaHeight(input);

            // Show typing indicator
            showTypingIndicator();

            try {
                const session = window.zoeAuth?.getCurrentSession();
                // Use relative URL with query params
                const url = `/api/chat/enhanced?user_id=${session?.user_id || 'default'}&stream=true`;
                
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                        // X-Session-ID header added automatically by auth.js
                    },
                    body: JSON.stringify({ 
                        message: message,
                        context: { mode: 'main_chat' },
                        session_id: sessionId
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }

                hideTypingIndicator();

                // Create streaming message container
                const messageDiv = addStreamingMessage();
                
                // Read the stream
                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let buffer = '';

                while (true) {
                    const {value, done} = await reader.read();
                    if (done) break;
                    
                    buffer += decoder.decode(value, {stream: true});
                    const lines = buffer.split('\n');
                    buffer = lines.pop(); // Keep incomplete line in buffer
                    
                    for (const line of lines) {
                        if (line.startsWith('data: ')) {
                            try {
                                const data = JSON.parse(line.slice(6));
                                if (data.type === 'metadata') {
                                    renderContextMeta({ routing: data.routing, context_breakdown: data.memories ? { events: 0, journals: 0, people: data.memories, projects: 0 } : undefined });
                                } else if (data.type === 'token') {
                                    updateStreamingMessage(messageDiv, data.content);
                                } else if (data.type === 'done') {
                                    finalizeStreamingMessage(messageDiv);
                                }
                            } catch (e) {
                                console.error('Failed to parse SSE:', e);
                            }
                        }
                    }
                }

            } catch (error) {
                hideTypingIndicator();
                console.error('Chat error:', error);
                addMessage('Sorry, I encountered an error. Please check your connection and try again.', 'zoe');
            }
        }

        // Streaming message helpers
        function addStreamingMessage() {
            const messagesContainer = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message zoe-message';
            messageDiv.innerHTML = '<div class="message-context"><div class="chip-row" id="contextChips"></div></div><div class="message-content"><span class="streaming-cursor">▊</span></div>';
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            return messageDiv;
        }

        function updateStreamingMessage(messageDiv, token) {
            const content = messageDiv.querySelector('.message-content');
            const cursor = content.querySelector('.streaming-cursor');
            cursor.before(document.createTextNode(token));
            messageDiv.parentElement.scrollTop = messageDiv.parentElement.scrollHeight;
        }

        function finalizeStreamingMessage(messageDiv) {
            const cursor = messageDiv.querySelector('.streaming-cursor');
            if (cursor) cursor.remove();
        }

        // Render chips and sidebar from context metadata
        function renderContextMeta(meta) {
            try {
                if (!meta) return;
                const chips = document.getElementById('contextChips');
                if (chips) {
                    chips.innerHTML = '';
                    const parts = [];
                    if (meta.context_breakdown) {
                        const cb = meta.context_breakdown;
                        parts.push({label: 'Events', val: cb.events||0});
                        parts.push({label: 'Journals', val: cb.journals||0});
                        parts.push({label: 'People', val: cb.people||0});
                        parts.push({label: 'Projects', val: cb.projects||0});
                    }
                    if (meta.routing) parts.push({label: 'Route', val: meta.routing});
                    parts.forEach(p=>{
                        const span = document.createElement('span');
                        span.className = 'context-chip';
                        span.textContent = `${p.label}: ${p.val}`;
                        chips.appendChild(span);
                    });
                }
                const ctxCounts = document.getElementById('contextCounts');
                if (ctxCounts && meta.context_breakdown) {
                    const cb = meta.context_breakdown;
                    ctxCounts.textContent = `events ${cb.events||0} • journals ${cb.journals||0} • people ${cb.people||0} • projects ${cb.projects||0}`;
                }
            } catch(e) {}
        }

        function addMessage(text, sender) {
            const messagesContainer = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message`;
            messageDiv.innerHTML = text.replace(/\n/g, '<br>');
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function showTypingIndicator() {
            document.getElementById('typingIndicator').classList.add('active');
        }

        function hideTypingIndicator() {
            document.getElementById('typingIndicator').classList.remove('active');
        }

        function navigateToPage(page) {
            window.location.href = page;
        }


        // Notifications system
        function openNotifications() {
            document.getElementById('notificationsPanel').classList.add('open');
            loadNotifications();
            
            // Clear notification indicator when panel is opened
            const notificationBtn = document.querySelector('.notifications-btn');
            notificationBtn.classList.remove('has-notifications');
        }

        function closeNotifications() {
            document.getElementById('notificationsPanel').classList.remove('open');
        }

        async function loadNotifications() {
            try {
                const session = window.zoeAuth?.getCurrentSession();
                const response = await apiRequest('/reminders/notifications/pending', {
                    headers: session ? { 'X-Session-ID': session.session_id } : {}
                });
                const notifications = response.notifications || [];
                displayNotifications(notifications);
            } catch (error) {
                console.error('Failed to load notifications:', error);
                displayNotifications([]);
            }
        }

        function displayNotifications(notifications) {
            const notificationsContent = document.getElementById('notificationsContent');
            const notificationBtn = document.querySelector('.notifications-btn');
            
            // Update notification button indicator
            if (notifications.length > 0) {
                notificationBtn.classList.add('has-notifications');
            } else {
                notificationBtn.classList.remove('has-notifications');
            }
            
            if (notifications.length === 0) {
                notificationsContent.innerHTML = '<div class="no-notifications">No notifications</div>';
                return;
            }
            
            notificationsContent.innerHTML = notifications.map(notification => `
                <div class="notification-item ${notification.is_delivered ? '' : 'unread'}" 
                     onclick="handleNotificationClick(${notification.id})">
                    <div class="notification-title">${notification.message}</div>
                    <div class="notification-meta">
                        <span class="notification-time">${new Date(notification.created_at).toLocaleTimeString()}</span>
                        ${notification.priority ? `<span class="notification-priority" style="background: ${getPriorityColor(notification.priority)}; color: white;">${notification.priority}</span>` : ''}
                    </div>
                </div>
            `).join('');
        }

        function getPriorityColor(priority) {
            switch(priority.toLowerCase()) {
                case 'high': return '#ef4444';
                case 'medium': return '#f59e0b';
                case 'low': return '#10b981';
                default: return '#6b7280';
            }
        }

        function handleNotificationClick(notificationId) {
            // Mark notification as acknowledged
            acknowledgeNotification(notificationId);
            closeNotifications();
        }

        async function acknowledgeNotification(notificationId) {
            try {
                const session = window.zoeAuth?.getCurrentSession();
                await apiRequest(`/reminders/notifications/${notificationId}/deliver`, {
                    method: 'POST',
                    headers: session ? { 'X-Session-ID': session.session_id } : {}
                });
                // Reload notifications
                loadNotifications();
            } catch (error) {
                console.error('Failed to acknowledge notification:', error);
            }
        }

        // User menu functions
        function toggleUserDropdown() {
            const dropdown = document.getElementById('userDropdown');
            dropdown.classList.toggle('show');
        }

        function showUserProfile() {
            // Implement user profile modal
            alert('User profile coming soon!');
            document.getElementById('userDropdown').classList.remove('show');
        }

        function showSecuritySettings() {
            // Implement security settings
            alert('Security settings coming soon!');
            document.getElementById('userDropdown').classList.remove('show');
        }

        // Authentication functions now handled by auth.js
        // Removed duplicate logout/switchUser/upgradeSession functions

        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            const userMenu = document.querySelector('.user-menu');
            const dropdown = document.getElementById('userDropdown');
            
            if (userMenu && !userMenu.contains(event.target)) {
                dropdown.classList.remove('show');
            }
        });

        // Time/Date Update Functions
        function updateTimeDate() {
            const now = new Date();
            const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            const dateString = now.toLocaleDateString([], { weekday: 'short', month: 'short', day: 'numeric' });
            
            const timeElement = document.getElementById('currentTime');
            const dateElement = document.getElementById('currentDate');
            
            if (timeElement) timeElement.textContent = timeString;
            if (dateElement) dateElement.textContent = dateString;
        }

        // Intelligence SSE subscription for sidebar updates
        function initChatSSE(){
            // Use relative URL for SSE
            const url = '/api/intelligence/stream';
            
            try {
                const es = new EventSource(url);
                
                es.onopen = () => {
                    console.log('✅ Chat intelligence SSE connected');
                };
                
                es.onmessage = (evt) => {
                    try { 
                        const msg = JSON.parse(evt.data); 
                        handleIntelEvent(msg); 
                    } catch(e) {
                        console.warn('Failed to parse SSE message:', e);
                    }
                };
                
                es.onerror = () => {
                    console.warn('Chat intelligence SSE error');
                };
            } catch(e) {
                console.error('Failed to create SSE:', e);
            }
        }

        function handleIntelEvent(event){
            if (event.type === 'proactive_suggestion'){
                const el = document.getElementById('insightsList');
                if (el){
                    const div = document.createElement('div');
                    div.textContent = `${event.data.title || 'Suggestion'} — ${event.data.message}`;
                    el.prepend(div);
                }
            } else if (event.type === 'memory_update'){
                const related = document.getElementById('relatedList');
                if (related){
                    const d = event.data || {};
                    const item = document.createElement('div');
                    item.textContent = `Context changed — route: ${d.routing}`;
                    related.prepend(item);
                }
            }
        }

        // Focus input on page load
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('chatInput').focus();
            
            // Update time/date immediately and every minute
            updateTimeDate();
            setInterval(updateTimeDate, 60000);
            
            // Load notifications on page load
            loadNotifications();
            initChatSSE();
        });
    </script>
    <script>
    // Zoe Orb Functions
    let orbChatOpen = false;
    let orbWebSocket = null;
    
    function toggleOrbChat() {
        if (!orbChatOpen) {
            openOrbChat();
        } else {
            closeOrbChat();
        }
    }
    
    function openOrbChat() {
        // Create chat window if it doesn't exist
        if (!document.getElementById('orbChatWindow')) {
            const chatWindow = document.createElement('div');
            chatWindow.id = 'orbChatWindow';
            chatWindow.className = 'orb-chat-window';
            chatWindow.innerHTML = `
                <div class="orb-chat-header">
                    <div class="orb-chat-title">Chat with Zoe</div>
                    <button class="orb-chat-close" onclick="closeOrbChat()">×</button>
                </div>
                <div class="orb-chat-messages" id="orbChatMessages">
                    <div class="orb-chat-message assistant">
                        Hi! I'm Zoe, your AI assistant. How can I help you today?
                    </div>
                </div>
                <div class="orb-chat-input-area">
                    <textarea class="orb-chat-input" id="orbChatInput" placeholder="Type your message..." rows="1"></textarea>
                    <button class="orb-chat-send" id="orbChatSend" onclick="sendOrbMessage()">→</button>
                </div>
            `;
            document.body.appendChild(chatWindow);
        }
        
        document.getElementById('orbChatWindow').style.display = 'block';
        document.getElementById('orbChatInput').focus();
        orbChatOpen = true;
        document.getElementById('zoeOrb').classList.add('chatting');
        
        // Connect to intelligence WebSocket
        connectOrbWebSocket();
    }
    
    function closeOrbChat() {
        if (document.getElementById('orbChatWindow')) {
            document.getElementById('orbChatWindow').style.display = 'none';
        }
        orbChatOpen = false;
        document.getElementById('zoeOrb').classList.remove('chatting');
        
        // Disconnect WebSocket
        if (orbWebSocket) {
            orbWebSocket.close();
            orbWebSocket = null;
        }
    }
    
    function sendOrbMessage() {
        const input = document.getElementById('orbChatInput');
        const message = input.value.trim();
        if (!message) return;
        
        // Add user message
        addOrbMessage(message, 'user');
        input.value = '';
        
        // Send to chat API (uses relative URL, auth.js adds session header)
        fetch('/api/chat/enhanced', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message: message, context: {} })
        })
        .then(response => response.json())
        .then(data => {
            if (data.response) {
                addOrbMessage(data.response, 'assistant');
            }
        })
        .catch(error => {
            addOrbMessage('Sorry, I encountered an error. Please try again.', 'assistant');
        });
    }
    
    function addOrbMessage(message, sender) {
        const messagesDiv = document.getElementById('orbChatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `orb-chat-message ${sender}`;
        messageDiv.textContent = message;
        messagesDiv.appendChild(messageDiv);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }
    
    function connectOrbWebSocket() {
        if (orbWebSocket) return;
        
        try {
            // Use relative WebSocket URL - nginx will proxy
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/api/ws/intelligence`;
            orbWebSocket = new WebSocket(wsUrl);
            
            orbWebSocket.onopen = function() {
                document.getElementById('zoeOrb').classList.add('connected');
                document.getElementById('zoeOrb').classList.remove('connecting');
                console.log('✅ Orb WebSocket connected');
            };
            
            orbWebSocket.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    if (data.type === 'proactive_suggestion') {
                        showOrbNotification(data.data);
                    }
                } catch(e) {
                    console.warn('Failed to parse WebSocket message:', e);
                }
            };
            
            orbWebSocket.onclose = function() {
                document.getElementById('zoeOrb').classList.remove('connected');
                document.getElementById('zoeOrb').classList.add('connecting');
                orbWebSocket = null;
                console.log('Orb WebSocket disconnected, will reconnect on reopen');
            };
            
            orbWebSocket.onerror = function(error) {
                document.getElementById('zoeOrb').classList.add('error');
                console.warn('Orb WebSocket error:', error);
            };
        } catch (error) {
            console.error('Failed to create WebSocket:', error);
        }
    }
    
    function showOrbNotification(notification) {
        // Add badge to orb
        document.getElementById('zoeOrb').classList.add('badge');
        
        // Show toast notification
        const toast = document.createElement('div');
        toast.className = 'orb-toast';
        toast.innerHTML = `
            <div class="orb-toast-content">
                <div class="orb-toast-title">${notification.title}</div>
                <div class="orb-toast-message">${notification.message}</div>
            </div>
        `;
        document.body.appendChild(toast);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 5000);
    }
    
    // Initialize orb on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Set initial state
        document.getElementById('zoeOrb').classList.add('connecting');
        
        // Try to connect WebSocket
        connectOrbWebSocket();
        
        // Add Enter key support for chat input
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && orbChatOpen) {
                e.preventDefault();
                sendOrbMessage();
            }
        });
    });
    </script>
    <!-- Zoe Orb -->
    <div class="zoe-orb" id="zoeOrb" title="Click to chat with Zoe" onclick="toggleOrbChat()">
    </div>
</body>
</html>
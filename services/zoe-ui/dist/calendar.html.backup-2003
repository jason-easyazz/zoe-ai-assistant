<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zoe AI Calendar</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', system-ui, sans-serif;
            background: linear-gradient(135deg, #fafbfc 0%, #f1f3f6 100%);
            min-height: 100vh; color: #333; overflow: hidden;
        }
        .orb-mode {
            position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
            display: flex; align-items: center; justify-content: center; flex-direction: column;
            z-index: 1000; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .orb-mode.hidden { opacity: 0; pointer-events: none; transform: scale(0.8); }
        .fluid-orb {
            width: 180px; height: 180px; border-radius: 50%;
            background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%);
            position: relative; cursor: pointer; transition: all 0.3s ease;
            box-shadow: 0 20px 60px rgba(123, 97, 255, 0.2);
        }
        .fluid-orb:hover { transform: scale(1.05); box-shadow: 0 25px 80px rgba(123, 97, 255, 0.3); }
        .fluid-orb.api-connected { box-shadow: 0 20px 60px rgba(123, 97, 255, 0.4); }
        .fluid-orb.api-error { background: linear-gradient(135deg, #ff6b6b 0%, #ffa726 100%); animation: error-pulse 2s ease-in-out infinite; }
        @keyframes error-pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.7; } }
        .fluid-layer { position: absolute; width: 100%; height: 100%; border-radius: 50%; opacity: 0.7; }
        .fluid-layer:nth-child(1) { background: radial-gradient(circle at 30% 20%, #7B61FF 0%, transparent 50%); animation: fluid1 4s ease-in-out infinite; }
        .fluid-layer:nth-child(2) { background: radial-gradient(circle at 70% 80%, #5AE0E0 0%, transparent 50%); animation: fluid2 3.5s ease-in-out infinite reverse; }
        .fluid-layer:nth-child(3) { background: radial-gradient(circle at 50% 50%, rgba(255,255,255,0.3) 0%, transparent 60%); animation: fluid3 5s ease-in-out infinite; }
        .fluid-orb.idle { animation: breathe 3s ease-in-out infinite; }
        .fluid-orb.listening { animation: listen-pulse 1.5s ease-in-out infinite; box-shadow: 0 20px 60px rgba(123, 97, 255, 0.4); }
        .fluid-orb.speaking { animation: speak-vibrate 0.3s ease-in-out infinite; box-shadow: 0 20px 60px rgba(123, 97, 255, 0.6); }
        @keyframes fluid1 { 0%, 100% { transform: rotate(0deg) scale(1); } 50% { transform: rotate(180deg) scale(1.1); } }
        @keyframes fluid2 { 0%, 100% { transform: rotate(0deg) scale(1); } 50% { transform: rotate(-120deg) scale(0.9); } }
        @keyframes fluid3 { 0%, 100% { transform: rotate(0deg) scale(1); } 50% { transform: rotate(90deg) scale(1.05); } }
        @keyframes breathe { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.02); } }
        @keyframes listen-pulse { 0%, 100% { transform: scale(1); opacity: 1; } 50% { transform: scale(1.05); opacity: 0.9; } }
        @keyframes speak-vibrate { 0%, 100% { transform: scale(1) rotate(0deg); } 25% { transform: scale(1.03) rotate(0.5deg); } 75% { transform: scale(1.03) rotate(-0.5deg); } }
        .orb-hint { margin-top: 30px; text-align: center; color: #666; font-size: 14px; font-weight: 300; opacity: 0.8; }
        .api-status { margin-top: 10px; font-size: 12px; padding: 5px 12px; border-radius: 12px; font-weight: 500; }
        .api-status.connected { background: rgba(34, 197, 94, 0.1); color: #22c55e; }
        .api-status.error { background: rgba(239, 68, 68, 0.1); color: #ef4444; }
        .nav-bar {
            position: fixed; top: 0; left: 0; right: 0; background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(20px); border-bottom: 1px solid rgba(255, 255, 255, 0.3);
            padding: 10px 15px; z-index: 100; display: flex; justify-content: space-between;
            align-items: center; height: 60px;
        }
        .nav-left { display: flex; align-items: center; gap: 15px; }
        .mini-orb { width: 32px; height: 32px; border-radius: 50%; background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%); cursor: pointer; transition: all 0.3s ease; position: relative; overflow: hidden; }
        .mini-orb:hover { transform: scale(1.1); }
        .mini-orb .fluid-layer { animation: fluid1 2s ease-in-out infinite; }
        .nav-menu { display: flex; gap: 20px; }
        .nav-item { color: #666; text-decoration: none; font-size: 13px; font-weight: 400; transition: all 0.3s ease; cursor: pointer; }
        .nav-item:hover, .nav-item.active { color: #7B61FF; }
        .nav-right { display: flex; align-items: center; gap: 10px; }
        .settings-btn, .close-btn { background: rgba(255, 255, 255, 0.6); border: 1px solid rgba(255, 255, 255, 0.3); border-radius: 50%; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: all 0.3s ease; color: #666; font-size: 14px; }
        .settings-btn:hover, .close-btn:hover { background: rgba(255, 255, 255, 0.8); color: #333; }
        .api-indicator { font-size: 12px; padding: 4px 8px; border-radius: 8px; font-weight: 500; }
        .api-indicator.online { background: rgba(34, 197, 94, 0.1); color: #22c55e; }
        .api-indicator.offline { background: rgba(239, 68, 68, 0.1); color: #ef4444; }
        .main-interface { position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; opacity: 0; pointer-events: none; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1); overflow: hidden; }
        .main-interface.active { opacity: 1; pointer-events: all; }
        .main-container { width: 100%; height: 100vh; padding-top: 60px; overflow: hidden; display: flex; flex-direction: column; }
        .top-info-bar { display: flex; justify-content: space-between; align-items: center; padding: 10px 15px; height: 50px; flex-shrink: 0; }
        .time-display { display: flex; flex-direction: column; }
        .current-time { font-size: 18px; font-weight: 300; color: #333; line-height: 1; }
        .current-date { font-size: 11px; color: #666; margin-top: 2px; }
        .weather-widget { display: flex; align-items: center; gap: 6px; }
        .weather-icon { font-size: 18px; }
        .weather-temp { font-size: 18px; font-weight: 300; color: #333; }
        .calendar-header { display: flex; justify-content: space-between; align-items: center; padding: 0 15px 8px; height: 40px; flex-shrink: 0; }
        .month-title { font-size: 20px; font-weight: 300; color: #333; background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; margin: 0; }
        .nav-button { background: rgba(255, 255, 255, 0.6); border: 1px solid rgba(255, 255, 255, 0.3); border-radius: 8px; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: all 0.3s ease; color: #666; font-size: 14px; font-weight: bold; }
        .nav-button:hover { background: rgba(123, 97, 255, 0.2); color: #7B61FF; transform: scale(1.05); }
        .calendar-layout { display: grid; grid-template-columns: 1fr 1fr; gap: 10px; padding: 0 15px; flex: 1; min-height: 0; overflow: hidden; }
        .calendar-grid { display: grid; grid-template-columns: repeat(7, 1fr); gap: 3px; background: rgba(255, 255, 255, 0.4); backdrop-filter: blur(40px); border: 1px solid rgba(255, 255, 255, 0.4); border-radius: 12px; padding: 8px; flex: 1; align-content: start; max-height: 100%; overflow: hidden; }
        .day-header { text-align: center; padding: 6px 4px; font-size: 10px; font-weight: 600; color: #666; text-transform: uppercase; letter-spacing: 0.5px; }
        .calendar-day { aspect-ratio: 1; display: flex; align-items: center; justify-content: center; border-radius: 6px; font-size: 12px; cursor: pointer; transition: all 0.3s ease; position: relative; font-weight: 500; min-height: 28px; touch-action: manipulation; }
        .calendar-day:hover { background: rgba(123, 97, 255, 0.1); transform: scale(1.05); }
        .calendar-day.today { background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%); color: white; font-weight: 600; box-shadow: 0 2px 8px rgba(123, 97, 255, 0.3); }
        .calendar-day.selected { background: rgba(123, 97, 255, 0.3); color: #7B61FF; font-weight: 600; border: 2px solid #7B61FF; }
        .calendar-day.today.selected { background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%); color: white; border: 2px solid white; }
        .calendar-day.has-event { background: rgba(123, 97, 255, 0.2); color: #7B61FF; font-weight: 600; }
        .calendar-day.has-event::after { content: ''; position: absolute; bottom: 2px; left: 50%; transform: translateX(-50%); width: 3px; height: 3px; background: #7B61FF; border-radius: 50%; }
        .calendar-day.today.has-event::after { background: white; }
        .calendar-day.other-month { color: #ccc; opacity: 0.5; }
        .day-view { background: rgba(255, 255, 255, 0.4); backdrop-filter: blur(40px); border: 1px solid rgba(255, 255, 255, 0.4); border-radius: 12px; padding: 12px; display: flex; flex-direction: column; min-height: 0; overflow: hidden; }
        .day-header-section { margin-bottom: 12px; text-align: center; flex-shrink: 0; }
        .selected-date { font-size: 18px; font-weight: 300; color: #333; margin-bottom: 2px; background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; }
        .selected-weekday { font-size: 11px; color: #666; font-weight: 400; text-transform: uppercase; letter-spacing: 0.5px; }
        .day-events { flex: 1; overflow-y: auto; margin-bottom: 12px; min-height: 0; }
        .event-item { padding: 8px 0; border-bottom: 1px solid rgba(255, 255, 255, 0.3); cursor: pointer; transition: all 0.3s ease; }
        .event-item:last-child { border-bottom: none; }
        .event-item:hover { transform: translateX(2px); background: rgba(255, 255, 255, 0.2); margin: 0 -6px; padding: 8px 6px; border-radius: 6px; }
        .event-time { font-size: 10px; color: #7B61FF; font-weight: 600; margin-bottom: 2px; text-transform: uppercase; letter-spacing: 0.3px; }
        .event-title { font-size: 12px; color: #333; font-weight: 500; margin-bottom: 1px; }
        .event-category { display: inline-block; padding: 2px 6px; border-radius: 8px; font-size: 9px; font-weight: 500; margin-top: 2px; }
        .category-health { background: rgba(239, 68, 68, 0.2); color: #dc2626; }
        .category-work { background: rgba(59, 130, 246, 0.2); color: #2563eb; }
        .category-personal { background: rgba(34, 197, 94, 0.2); color: #16a34a; }
        .day-summary { display: flex; justify-content: space-around; padding: 8px 0; border-top: 1px solid rgba(255, 255, 255, 0.3); flex-shrink: 0; }
        .summary-stat { text-align: center; }
        .stat-number { display: block; font-size: 14px; font-weight: 600; color: #7B61FF; margin-bottom: 1px; }
        .stat-label { font-size: 9px; color: #666; text-transform: uppercase; letter-spacing: 0.3px; }
        .loading { display: flex; align-items: center; justify-content: center; padding: 20px; color: #666; font-style: italic; }
        .no-events { text-align: center; color: #666; font-style: italic; padding: 20px; }
        .floating-add-btn { position: fixed; bottom: 20px; right: 20px; width: 50px; height: 50px; border-radius: 50%; background: linear-gradient(135deg, #7B61FF 0%, #5AE0E0 100%); border: none; color: white; cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 20px; transition: all 0.3s ease; box-shadow: 0 6px 24px rgba(123, 97, 255, 0.4); z-index: 1000; }
        .floating-add-btn:hover { transform: scale(1.1); box-shadow: 0 8px 32px rgba(123, 97, 255, 0.5); }
        @media (max-width: 600px) { .calendar-layout { grid-template-columns: 1fr; gap: 8px; padding: 0 10px; } .nav-menu { display: none; } .month-title { font-size: 18px; } .calendar-grid { padding: 6px; gap: 2px; } .calendar-day { min-height: 24px; font-size: 11px; } .day-header { font-size: 9px; padding: 4px 2px; } }
    </style>
</head>
<body>
    <!-- Orb Mode (Default State) -->
    <div class="orb-mode" id="orbMode">
        <div class="fluid-orb idle" id="fluidOrb" onclick="enterInterface()">
            <div class="fluid-layer"></div>
            <div class="fluid-layer"></div>
            <div class="fluid-layer"></div>
        </div>
        <div class="orb-hint">Touch to interact or just start talking</div>
        <div class="api-status" id="apiStatus">🔄 Connecting to Zoe...</div>
    </div>

    <!-- Main Interface -->
    <div class="main-interface" id="mainInterface">
        <!-- Navigation -->
        <div class="nav-bar">
            <div class="nav-left">
                <div class="mini-orb" onclick="exitToOrb()">
                    <div class="fluid-layer"></div>
                </div>
                <div class="nav-menu">
                    <a href="index.html" class="nav-item">Chat</a>
                    <a href="dashboard.html" class="nav-item">Dashboard</a>
                    <a href="calendar.html" class="nav-item active">Calendar</a>
                    <a href="tasks.html" class="nav-item">Tasks</a>
                    <a href="journal.html" class="nav-item">Journal</a>
                    <a href="workflows.html" class="nav-item">Workflows</a>
                    <a href="settings.html" class="nav-item">Settings</a>
                </div>
            </div>
            <div class="nav-right">
                <div class="api-indicator" id="navApiStatus">🔄 Connecting</div>
                <button class="settings-btn" onclick="window.location.href='settings.html'">⚙️</button>
                <button class="close-btn" onclick="exitToOrb()">×</button>
            </div>
        </div>
        <div class="main-container">
            <!-- Top Info Bar -->
            <div class="top-info-bar">
                <div class="time-display">
                    <div class="current-time" id="currentTime">Loading...</div>
                    <div class="current-date" id="currentDate">Loading...</div>
                </div>
                <div class="weather-widget">
                    <div class="weather-icon">☀️</div>
                    <div class="weather-temp">23°</div>
                </div>
            </div>

            <!-- Calendar Header with Month Navigation -->
            <div class="calendar-header">
                <button class="nav-button" onclick="previousMonth()">‹</button>
                <h1 class="month-title" id="currentMonth">Loading...</h1>
                <button class="nav-button" onclick="nextMonth()">›</button>
            </div>

            <!-- Split Layout: Month + Day View -->
            <div class="calendar-layout">
                <!-- Month View -->
                <div class="month-view">
                    <div class="calendar-grid" id="calendarGrid">
                        <div class="loading">Loading calendar...</div>
                    </div>
                </div>

                <!-- Day View -->
                <div class="day-view">
                    <div class="day-header-section">
                        <h2 class="selected-date" id="selectedDate">Select a date</h2>
                        <p class="selected-weekday" id="selectedWeekday">Click on a date to view events</p>
                    </div>
                    <div class="day-events" id="dayEvents">
                        <div class="loading">Select a date to view events</div>
                    </div>
                    <div class="day-summary">
                        <div class="summary-stat">
                            <span class="stat-number" id="eventCount">0</span>
                            <span class="stat-label">events</span>
                        </div>
                        <div class="summary-stat">
                            <span class="stat-number" id="freeHours">8</span>
                            <span class="stat-label">free hours</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Chat Overlay -->
        <div class="chat-overlay" id="chatOverlay">
            <div class="chat-window">
                <div class="chat-header">
                    <div class="chat-title">
                        <div class="mini-orb-chat">
                            <div class="fluid-layer"></div>
                        </div>
                        <span>Chat with Zoe</span>
                    </div>
                    <button class="close-chat-btn" onclick="closeChatWindow()">×</button>
                </div>
                <div class="chat-messages" id="chatMessages">
                    <div class="message zoe-message">
                        Hi! I can help you add events to your calendar. Just tell me what you'd like to schedule!
                    </div>
                </div>
                <div class="chat-input-container">
                    <div class="chat-input-group">
                        <input type="text" class="chat-input" placeholder="Schedule dinner tomorrow at 7pm..." id="chatInputField" onkeypress="handleChatKeypress(event)">
                        <button class="voice-btn" onclick="startVoiceInput()" title="Voice input">🎤</button>
                        <button class="send-btn" onclick="sendChatMessage()" title="Send message">📤</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Floating Add Event Button -->
        <button class="floating-add-btn" onclick="addEventViaChat()" title="Add event with AI">+</button>
    </div>

    <script>
        // Configuration
        const API_BASE = 'http://192.168.1.60:8000';
        
        // Global state
        let currentDate = new Date();
        let selectedDate = null;
        let allEvents = [];
        let apiConnected = false;
        
        // DOM elements
        const orbMode = document.getElementById('orbMode');
        const mainInterface = document.getElementById('mainInterface');
        const fluidOrb = document.getElementById('fluidOrb');
        const apiStatus = document.getElementById('apiStatus');
        const navApiStatus = document.getElementById('navApiStatus');

        // Utility functions
        function formatDate(date) {
            return date.toISOString().split('T')[0];
        }

        function formatDisplayDate(dateStr) {
            const date = new Date(dateStr + 'T00:00:00');
            return date.toLocaleDateString('en-GB', {
                weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'
            });
        }

        function formatTime(timeStr) {
            if (!timeStr) return '';
            const [hours, minutes] = timeStr.split(':');
            const hour12 = hours % 12 || 12;
            const ampm = hours >= 12 ? 'PM' : 'AM';
            return `${hour12}:${minutes} ${ampm}`;
        }

        function setOrbState(state) {
            fluidOrb.className = `fluid-orb ${state}`;
        }

        function updateApiStatus(connected, message = '') {
            apiConnected = connected;
            if (connected) {
                fluidOrb.classList.add('api-connected');
                fluidOrb.classList.remove('api-error');
                apiStatus.className = 'api-status connected';
                apiStatus.textContent = '✅ Connected to Zoe API';
                navApiStatus.className = 'api-indicator online';
                navApiStatus.textContent = '✅ Online';
            } else {
                fluidOrb.classList.remove('api-connected');
                fluidOrb.classList.add('api-error');
                apiStatus.className = 'api-status error';
                apiStatus.textContent = `❌ ${message || 'API Connection Failed'}`;
                navApiStatus.className = 'api-indicator offline';
                navApiStatus.textContent = '❌ Offline';
            }
        }

        // API functions
        async function apiCall(endpoint, method = 'GET', data = null) {
            try {
                const options = {
                    method,
                    headers: { 'Content-Type': 'application/json' },
                };
                if (data) {
                    options.body = JSON.stringify(data);
                }
                const response = await fetch(`${API_BASE}${endpoint}`, options);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return await response.json();
            } catch (error) {
                console.error(`API call failed: ${endpoint}`, error);
                throw error;
            }
        }

        async function testApiConnection() {
            try {
                await apiCall('/health');
                updateApiStatus(true);
                return true;
            } catch (error) {
                updateApiStatus(false, 'Cannot reach Zoe backend');
                return false;
            }
        }

        async function loadEvents() {
            try {
                setOrbState('listening');
                const data = await apiCall('/api/events');
                allEvents = data.events || [];
                updateCalendar();
                setOrbState('idle');
                console.log(`✅ Loaded ${allEvents.length} events from API`);
                return true;
            } catch (error) {
                console.error('Error loading events:', error);
                setOrbState('idle');
                return false;
            }
        }

        async function sendApiChatMessage(message) {
            try {
                setOrbState('speaking');
                const data = await apiCall('/api/chat', 'POST', { message });
                setOrbState('idle');
                return data;
            } catch (error) {
                setOrbState('idle');
                throw error;
            }
        }

        // Time and calendar functions
        function updateTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString([], { 
                hour: 'numeric', minute: '2-digit', hour12: true 
            });
            const dateString = now.toLocaleDateString([], { 
                weekday: 'long', month: 'long', day: 'numeric' 
            });
            document.getElementById('currentTime').textContent = timeString;
            document.getElementById('currentDate').textContent = dateString;
        }

        function updateCalendar() {
            updateCalendarHeader();
            generateCalendarGrid();
            if (selectedDate) {
                updateDayView(selectedDate);
            }
        }

        function updateCalendarHeader() {
            const monthNames = [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ];
            const monthYear = `${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`;
            document.getElementById('currentMonth').textContent = monthYear;
        }

        function generateCalendarGrid() {
            const grid = document.getElementById('calendarGrid');
            grid.innerHTML = '';
            
            // Day headers
            const dayHeaders = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            dayHeaders.forEach(day => {
                const headerDiv = document.createElement('div');
                headerDiv.className = 'day-header';
                headerDiv.textContent = day;
                grid.appendChild(headerDiv);
            });
            
            // Get first day of month and number of days
            const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            // Generate calendar days
            const today = new Date();
            const todayStr = formatDate(today);
            
            for (let i = 0; i < 42; i++) {
                const cellDate = new Date(startDate);
                cellDate.setDate(startDate.getDate() + i);
                
                const cellDateStr = formatDate(cellDate);
                const isCurrentMonth = cellDate.getMonth() === currentDate.getMonth();
                const isToday = cellDateStr === todayStr;
                const hasEvents = allEvents.some(event => event.date === cellDateStr || event.start_date === cellDateStr);
                
                const dayDiv = document.createElement('div');
                dayDiv.className = 'calendar-day';
                if (isToday) dayDiv.classList.add('today');
                if (hasEvents) dayDiv.classList.add('has-event');
                if (!isCurrentMonth) dayDiv.classList.add('other-month');
                if (selectedDate === cellDateStr) dayDiv.classList.add('selected');
                
                dayDiv.textContent = cellDate.getDate();
                dayDiv.onclick = () => selectDate(cellDateStr);
                
                grid.appendChild(dayDiv);
            }
        }

        function selectDate(dateStr) {
            selectedDate = dateStr;
            setOrbState('listening');
            setTimeout(() => setOrbState('idle'), 500);
            
            // Update selected state
            document.querySelectorAll('.calendar-day').forEach(d => d.classList.remove('selected'));
            document.querySelectorAll('.calendar-day').forEach(d => {
                if (d.textContent == new Date(dateStr + 'T00:00:00').getDate() && 
                    !d.classList.contains('other-month')) {
                    d.classList.add('selected');
                }
            });
            updateDayView(dateStr);
        }

        function updateDayView(dateStr) {
            const selectedDateEl = document.getElementById('selectedDate');
            const selectedWeekdayEl = document.getElementById('selectedWeekday');
            const dayEventsEl = document.getElementById('dayEvents');
            const eventCountEl = document.getElementById('eventCount');
            const freeHoursEl = document.getElementById('freeHours');
            
            const dateObj = new Date(dateStr + 'T00:00:00');
            const today = formatDate(new Date());
            const isToday = dateStr === today;
            
            if (isToday) {
                selectedDateEl.textContent = 'Today';
            } else {
                selectedDateEl.textContent = dateObj.toLocaleDateString('en-US', { 
                    month: 'short', day: 'numeric' 
                });
            }
            
            selectedWeekdayEl.textContent = dateObj.toLocaleDateString('en-US', { weekday: 'long' });
            
            const dayEvents = allEvents.filter(event => 
                (event.date === dateStr) || (event.start_date === dateStr)
            );
            
            if (dayEvents.length === 0) {
                dayEventsEl.innerHTML = '<div class="no-events">No events scheduled</div>';
            } else {
                let html = '';
                dayEvents.forEach(event => {
                    const category = event.category || 'personal';
                    const timeStr = event.time || event.start_time;
                    html += `
                        <div class="event-item" onclick="editEvent('${event.id}')">
                            ${timeStr ? `<div class="event-time">${formatTime(timeStr)}</div>` : ''}
                            <div class="event-title">${event.title}</div>
                            <span class="event-category category-${category}">${category}</span>
                        </div>
                    `;
                });
                dayEventsEl.innerHTML = html;
            }
            
            eventCountEl.textContent = dayEvents.length;
            freeHoursEl.textContent = Math.max(0, 8 - dayEvents.length);
        }

        function previousMonth() {
            currentDate.setMonth(currentDate.getMonth() - 1);
            updateCalendar();
            setOrbState('listening');
            setTimeout(() => setOrbState('idle'), 500);
        }

        function nextMonth() {
            currentDate.setMonth(currentDate.getMonth() + 1);
            updateCalendar();
            setOrbState('listening');
            setTimeout(() => setOrbState('idle'), 500);
        }

        // Interface switching
        function enterInterface() {
            orbMode.classList.add('hidden');
            mainInterface.classList.add('active');
            setOrbState('idle');
        }

        function exitToOrb() {
            mainInterface.classList.remove('active');
            orbMode.classList.remove('hidden');
            setOrbState('idle');
        }

        // Chat functions
        function addEventViaChat() {
            const chatOverlay = document.getElementById('chatOverlay');
            chatOverlay.classList.add('active');
            setTimeout(() => {
                document.getElementById('chatInputField').focus();
            }, 300);
            setOrbState('listening');
            setTimeout(() => setOrbState('idle'), 1000);
        }

        function closeChatWindow() {
            const chatOverlay = document.getElementById('chatOverlay');
            chatOverlay.classList.remove('active');
        }

        function addMessageToChat(content, isUser = false) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = isUser ? 'message user-message' : 'message zoe-message';
            messageDiv.textContent = content;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function addEventCreatedNotification(event) {
            const chatMessages = document.getElementById('chatMessages');
            const notificationDiv = document.createElement('div');
            notificationDiv.className = 'event-created-notification';
            notificationDiv.innerHTML = `
                ✅ <strong>Event Created:</strong> ${event.title}<br>
                📅 ${formatDisplayDate(event.date || event.start_date)}
                ${event.time || event.start_time ? ` at ${formatTime(event.time || event.start_time)}` : ''}
                ${event.category ? ` (${event.category})` : ''}
            `;
            chatMessages.appendChild(notificationDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        async function sendChatMessage() {
            const input = document.getElementById('chatInputField');
            const message = input.value.trim();
            
            if (!message) return;
            if (!apiConnected) {
                addMessageToChat('❌ Cannot send message - API not connected', false);
                return;
            }
            
            addMessageToChat(message, true);
            input.value = '';
            
            try {
                const response = await sendApiChatMessage(message);
                addMessageToChat(response.response || 'Message received!', false);
                
                if (response.event_created) {
                    addEventCreatedNotification(response.event_created);
                    await loadEvents();
                }
            } catch (error) {
                addMessageToChat('Sorry, I encountered an error. Please try again.', false);
                console.error('Chat error:', error);
            }
        }

        function handleChatKeypress(event) {
            if (event.key === 'Enter') {
                sendChatMessage();
            }
        }

        function startVoiceInput() {
            setOrbState('listening');
            addMessageToChat('🎤 Voice input not yet implemented. Type your message instead!', false);
            setTimeout(() => setOrbState('idle'), 2000);
        }

        function editEvent(eventId) {
            setOrbState('listening');
            console.log('Edit event:', eventId);
            setTimeout(() => setOrbState('idle'), 500);
        }

        // Event listeners and initialization
        document.getElementById('chatOverlay').addEventListener('click', function(e) {
            if (e.target === this) {
                closeChatWindow();
            }
        });

        async function initializeApp() {
            console.log('🚀 Initializing Enhanced Zoe Calendar...');
            
            updateTime();
            setInterval(updateTime, 60000);
            
            const connected = await testApiConnection();
            
            if (connected) {
                await loadEvents();
                selectedDate = formatDate(new Date());
                updateCalendar();
                console.log('✅ Enhanced Calendar initialized successfully!');
            } else {
                console.log('⚠️ Calendar initialized in offline mode');
                updateCalendarHeader();
                generateCalendarGrid();
            }
        }

        // Auto-refresh events every 30 seconds if connected
        setInterval(async () => {
            if (apiConnected) {
                await loadEvents();
            }
        }, 30000);

        // Auto-test API connection every 10 seconds if disconnected
        setInterval(async () => {
            if (!apiConnected) {
                const connected = await testApiConnection();
                if (connected) {
                    await loadEvents();
                }
            }
        }, 10000);

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', initializeApp);

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.code === 'Space' && !mainInterface.classList.contains('active')) {
                e.preventDefault();
                setOrbState('listening');
            } else if (e.key === 'Escape') {
                closeChatWindow();
                if (mainInterface.classList.contains('active')) {
                    exitToOrb();
                }
            }
        });

        document.addEventListener('keyup', function(e) {
            if (e.code === 'Space' && !mainInterface.classList.contains('active')) {
                setOrbState('idle');
            }
        });
    </script>
</body>
</html>

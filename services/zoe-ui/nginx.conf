# Clean zoe.local configuration for mass adoption
# Primary access: http://zoe.local and https://zoe.local

# WebSocket upgrade map (for LiveKit WSS)
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# HTTP server - redirect to HTTPS or serve directly
server {
    listen 80;
    server_name zoe.local *.zoe.local _;
    
    # For mass adoption: serve HTTP directly, optional HTTPS redirect
    # Uncomment next line to force HTTPS:
    # return 301 https://$server_name$request_uri;
    
    root /usr/share/nginx/html;
    index index.html;
    
    # Add discovery headers for touch panels and apps
    add_header X-Zoe-Services "automation:5678,home:8123,ollama:11434" always;
    add_header X-Zoe-Version "5.0" always;
    add_header X-Zoe-Discovery "http://zoe.local/api/services" always;
    
    # Serve JS files - MUST NOT fall back to index.html
    location ~* \.(js|json)$ {
        add_header Content-Type "application/javascript" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        # Return 404 if file doesn't exist, don't fall back to index.html
    }
    
    # Serve CSS files - MUST NOT fall back to index.html  
    location ~* \.css$ {
        add_header Content-Type "text/css" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        # Return 404 if file doesn't exist, don't fall back to index.html
    }
    
    # HTML pages - only these should fall back to index.html
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }

    # PWA manifest must be publicly accessible and CORS-enabled
    location = /manifest.json {
        add_header Content-Type application/manifest+json always;
        add_header Access-Control-Allow-Origin * always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        try_files /manifest.json =404;
    }

    # Service worker must be publicly accessible and allowed at scope '/'
    location = /sw.js {
        add_header Content-Type application/javascript always;
        add_header Access-Control-Allow-Origin * always;
        add_header Service-Worker-Allowed "/" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        try_files /sw.js =404;
    }

    # PWA icons (enable CORS)
    location ~* ^/(icons/|favicon-.*\.png|apple-touch-icon\.png)$ {
        add_header Access-Control-Allow-Origin * always;
        try_files $uri =404;
    }
    
    location /developer/ {
        alias /usr/share/nginx/html/developer/;
        try_files $uri $uri/ /developer/index.html;
    }
    
    # Service Discovery Endpoint (Critical for Touch Panels)
    location /api/services {
        add_header Content-Type application/json;
        add_header Access-Control-Allow-Origin * always;
        return 200 '{
            "zoe": {
                "name": "Zoe AI Assistant",
                "version": "5.0",
                "hostname": "zoe.local",
        "main_url": "http://192.168.1.60",
        "main_url_secure": "https://192.168.1.60",
        "api_url": "http://192.168.1.60/api",
                "discovery_method": "mDNS"
            },
            "services": {
                "automation": {
                    "name": "N8N Automation",
                    "url": "http://192.168.1.60:5678",
                    "type": "workflow",
                    "description": "Workflow automation and integrations"
                },
                "home": {
                    "name": "Home Assistant", 
                    "url": "http://192.168.1.60:8123",
                    "type": "home_automation",
                    "description": "Home automation and device control"
                },
                "ollama": {
                    "name": "Ollama AI",
                    "url": "http://192.168.1.60:11434", 
                    "type": "ai_api",
                    "description": "Local AI model API"
                },
                "whisper": {
                    "name": "Whisper STT",
                    "url": "http://zoe.local:9001",
                    "type": "ai_api", 
                    "description": "Speech to text service"
                },
                "tts": {
                    "name": "TTS Service",
                    "url": "http://zoe.local:9002",
                    "type": "ai_api",
                    "description": "Text to speech service"
                }
            }
        }';
    }
    
    # CRITICAL: Proxy Auth API requests to auth service (priority route)
    location /api/auth/ {
        proxy_pass http://zoe-auth:8002/api/auth/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # CORS headers for auth
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Session-ID" always;
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }
    
    # CRITICAL: Proxy Admin API requests to auth service (admin routes)
    location /api/admin/ {
        proxy_pass http://zoe-auth:8002/api/admin/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # CORS headers for admin
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Session-ID" always;
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }
    
    # Serve uploaded media files (photos, documents, etc.)
    location /uploads/ {
        proxy_pass http://zoe-core:8000/uploads/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache uploaded files for better performance
        proxy_cache_valid 200 1h;
        add_header Cache-Control "public, max-age=3600";
    }
    
    # Proxy other API requests to core service
    location /api/ {
        proxy_pass http://zoe-core:8000/api/;
        proxy_http_version 1.1;
        
        # Allow large file uploads (photos, documents, etc.)
        client_max_body_size 50M;
        
        # WebSocket upgrade support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeout settings
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
    }
    
    location /health {
        proxy_pass http://zoe-core:8000/health;
    }
}

# HTTPS Server (for microphone access and security)
server {
    listen 443 ssl http2;
    server_name zoe.local *.zoe.local _;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/zoe.crt;
    ssl_certificate_key /etc/nginx/ssl/zoe.key;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    root /usr/share/nginx/html;
    index index.html;
    
    # Add discovery headers
    add_header X-Zoe-Services "automation:5678,home:8123,ollama:11434" always;
    add_header X-Zoe-Version "5.0" always;
    add_header X-Zoe-Discovery "https://zoe.local/api/services" always;
    
    # Serve JS files - MUST NOT fall back to index.html
    location ~* \.(js|json)$ {
        add_header Content-Type "application/javascript" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        # Return 404 if file doesn't exist, don't fall back to index.html
    }
    
    # Serve CSS files - MUST NOT fall back to index.html
    location ~* \.css$ {
        add_header Content-Type "text/css" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        # Return 404 if file doesn't exist, don't fall back to index.html
    }
    
    # HTML pages - only these should fall back to index.html
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }
    
    location /developer/ {
        alias /usr/share/nginx/html/developer/;
        try_files $uri $uri/ /developer/index.html;
    }
    
    # LiveKit WebSocket Proxy (WSS for secure microphone access)
    location /livekit/ {
        proxy_pass http://livekit-server:7880/;
        proxy_http_version 1.1;
        
        # WebSocket upgrade
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Real-time optimization
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
    }
    
    # Service Discovery Endpoint (HTTPS version)
    location /api/services {
        add_header Content-Type application/json;
        add_header Access-Control-Allow-Origin * always;
        return 200 '{
            "zoe": {
                "name": "Zoe AI Assistant",
                "version": "5.0",
                "hostname": "zoe.local",
                "main_url": "https://zoe.local",
                "api_url": "https://zoe.local/api",
                "discovery_method": "mDNS"
            },
            "services": {
                "automation": {
                    "name": "N8N Automation",
                    "url": "https://zoe.local:5678",
                    "type": "workflow",
                    "description": "Workflow automation and integrations"
                },
                "home": {
                    "name": "Home Assistant", 
                    "url": "https://zoe.local:8123",
                    "type": "home_automation", 
                    "description": "Home automation and device control"
                },
                "ollama": {
                    "name": "Ollama AI",
                    "url": "https://zoe.local:11434",
                    "type": "ai_api",
                    "description": "Local AI model API"
                }
            }
        }';
    }
    
    # CRITICAL: Proxy Auth API requests to auth service (priority route)
    location /api/auth/ {
        proxy_pass http://zoe-auth:8002/api/auth/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # CORS headers for auth
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Session-ID" always;
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }
    
    # CRITICAL: Proxy Admin API requests to auth service (admin routes)
    location /api/admin/ {
        proxy_pass http://zoe-auth:8002/api/admin/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # CORS headers for admin
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Session-ID" always;
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }
    
    # Serve uploaded media files (photos, documents, etc.)
    location /uploads/ {
        proxy_pass http://zoe-core:8000/uploads/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache uploaded files for better performance
        proxy_cache_valid 200 1h;
        add_header Cache-Control "public, max-age=3600";
    }
    
    # Proxy other API requests to core service
    location /api/ {
        proxy_pass http://zoe-core:8000/api/;
        proxy_http_version 1.1;
        
        # Allow large file uploads (photos, documents, etc.)
        client_max_body_size 50M;
        
        # WebSocket upgrade support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeout settings
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
    }
    
    location /health {
        proxy_pass http://zoe-core:8000/health;
    }
}
